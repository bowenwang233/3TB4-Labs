// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2024 23:40:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          branch_logic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module branch_logic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] register0;
// wires                                               
wire branch;

// assign statements (if any)                          
branch_logic i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.register0(register0)
);
initial 
begin 
#1000000 $finish;
end 
// register0[ 7 ]
initial
begin
	register0[7] = 1'b1;
	register0[7] = #20000 1'b0;
end 
// register0[ 6 ]
initial
begin
	register0[6] = 1'b1;
	register0[6] = #20000 1'b0;
end 
// register0[ 5 ]
initial
begin
	register0[5] = 1'b1;
	register0[5] = #20000 1'b0;
end 
// register0[ 4 ]
initial
begin
	register0[4] = 1'b1;
	register0[4] = #20000 1'b0;
	register0[4] = #500000 1'b1;
	register0[4] = #90000 1'b0;
end 
// register0[ 3 ]
initial
begin
	register0[3] = 1'b1;
	register0[3] = #20000 1'b0;
	register0[3] = #350000 1'b1;
	register0[3] = #60000 1'b0;
	register0[3] = #90000 1'b1;
	register0[3] = #90000 1'b0;
end 
// register0[ 2 ]
initial
begin
	register0[2] = 1'b1;
	register0[2] = #20000 1'b0;
	register0[2] = #350000 1'b1;
	register0[2] = #60000 1'b0;
end 
// register0[ 1 ]
initial
begin
	register0[1] = 1'b1;
	register0[1] = #20000 1'b0;
	register0[1] = #350000 1'b1;
	register0[1] = #60000 1'b0;
end 
// register0[ 0 ]
initial
begin
	register0[0] = 1'b1;
	register0[0] = #20000 1'b0;
end 
endmodule

