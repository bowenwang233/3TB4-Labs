// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2024 23:17:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch;
reg clk;
reg increment;
reg [7:0] newpc;
reg reset_n;
// wires                                               
wire [7:0] pc;

// assign statements (if any)                          
pc i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.clk(clk),
	.increment(increment),
	.newpc(newpc),
	.pc(pc),
	.reset_n(reset_n)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset_n
initial
begin
	reset_n = 1'b0;
	reset_n = #80000 1'b1;
end 

// branch
initial
begin
	branch = 1'b0;
	branch = #100000 1'b1;
	branch = #40000 1'b0;
	branch = #30000 1'b1;
	branch = #110000 1'b0;
	branch = #230000 1'b1;
	branch = #30000 1'b0;
	branch = #30000 1'b1;
	branch = #320000 1'b0;
end 

// increment
initial
begin
	increment = 1'b0;
	increment = #100000 1'b1;
	increment = #40000 1'b0;
	increment = #180000 1'b1;
	increment = #160000 1'b0;
	increment = #90000 1'b1;
	increment = #80000 1'b0;
	increment = #80000 1'b1;
	increment = #160000 1'b0;
end 
// newpc[ 7 ]
initial
begin
	newpc[7] = 1'b0;
end 
// newpc[ 6 ]
initial
begin
	newpc[6] = 1'b0;
end 
// newpc[ 5 ]
initial
begin
	newpc[5] = 1'b0;
end 
// newpc[ 4 ]
initial
begin
	newpc[4] = 1'b0;
end 
// newpc[ 3 ]
initial
begin
	newpc[3] = 1'b0;
end 
// newpc[ 2 ]
initial
begin
	newpc[2] = 1'b0;
	newpc[2] = #490000 1'b1;
end 
// newpc[ 1 ]
initial
begin
	newpc[1] = 1'b1;
	newpc[1] = #490000 1'b0;
end 
// newpc[ 0 ]
initial
begin
	newpc[0] = 1'b0;
end 
endmodule

