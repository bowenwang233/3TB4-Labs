
memory_test.elf:     file format elf32-littlenios2
memory_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f9ac memsz 0x0000f9ac flags r-x
    LOAD off    0x000109cc vaddr 0x0000f9cc paddr 0x000114b8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012fa4 vaddr 0x00012fa4 paddr 0x00012fa4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f304  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  0000f548  0000f548  00010548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000f9cc  000114b8  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00012fa4  00012fa4  00012fa4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00013104  00013104  000124b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000124b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e98  00000000  00000000  000124e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023327  00000000  00000000  00013378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008e7b  00000000  00000000  0003669f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b290  00000000  00000000  0003f51a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000201c  00000000  00000000  0004a7ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000037c1  00000000  00000000  0004c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  0004ff89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000677f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00067828  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c0b6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006c0b9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c0c5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c0c6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006c0c7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006c0d2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006c0dd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006c0e8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000054  00000000  00000000  0006c0f3  2**0
                  CONTENTS, READONLY
 26 .jdi          000056f2  00000000  00000000  0006c147  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003775c  00000000  00000000  00071839  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000f548 l    d  .rodata	00000000 .rodata
0000f9cc l    d  .rwdata	00000000 .rwdata
00012fa4 l    d  .bss	00000000 .bss
00013104 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../memory_test_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f712 l     O .rodata	00000010 zeroes.4404
00002b28 l     F .text	000000bc __sbprintf
0000f722 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002d38 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004868 l     F .text	00000008 __fp_unlock
0000487c l     F .text	0000019c __sinit.part.1
00004a18 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f9cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000fe10 l     O .rwdata	00000020 lc_ctype_charset
0000fdf0 l     O .rwdata	00000020 lc_message_charset
0000fe30 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f754 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007e14 l     F .text	000000fc __sprint_r.part.0
0000f888 l     O .rodata	00000010 blanks.4348
0000f878 l     O .rodata	00000010 zeroes.4349
000093a0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cea8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cfb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cfe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d0cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d1ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d46c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000114a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d6b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d7ec l     F .text	00000034 alt_dev_reg
00010418 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dac4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000dcd0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e47c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e8f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ea30 l     F .text	0000003c alt_get_errno
0000ea6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012fd8 g     O .bss	00000004 alt_instruction_exception_handler
00007458 g     F .text	00000074 _mprec_log10
00007544 g     F .text	0000008c __any_on
0000993c g     F .text	00000054 _isatty_r
0000f760 g     O .rodata	00000028 __mprec_tinytens
0000d3a8 g     F .text	0000007c alt_main
000007a8 g     F .text	000000c0 _puts_r
00013004 g     O .bss	00000100 alt_irq
00009990 g     F .text	00000060 _lseek_r
000114b8 g       *ABS*	00000000 __flash_rwdata_start
0000b9d4 g     F .text	00000088 .hidden __eqdf2
00013104 g       *ABS*	00000000 __alt_heap_start
0000076c g     F .text	0000003c printf
00009ba8 g     F .text	0000009c _wcrtomb_r
00007cd4 g     F .text	0000005c __sseek
00004bb8 g     F .text	00000010 __sinit
00009a50 g     F .text	00000140 __swbuf_r
00005680 g     F .text	0000007c _setlocale_r
00004a20 g     F .text	00000068 __sfmoreglue
0000d448 g     F .text	00000024 __malloc_unlock
00006350 g     F .text	0000015c memmove
00004ba0 g     F .text	00000018 _cleanup
000065d4 g     F .text	000000a8 _Balloc
0000ba5c g     F .text	000000dc .hidden __gtdf2
0000ee28 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000098e0 g     F .text	0000005c _fstat_r
00012fbc g     O .bss	00000004 errno
00007c50 g     F .text	00000008 __seofread
00012fc4 g     O .bss	00000004 alt_argv
00019478 g       *ABS*	00000000 _gp
00010298 g     O .rwdata	00000180 alt_fd_list
0000ee4c g     F .text	00000090 alt_find_dev
00006208 g     F .text	00000148 memcpy
00004870 g     F .text	0000000c _cleanup_r
0000ccc0 g     F .text	000000dc .hidden __floatsidf
0000e9b4 g     F .text	0000007c alt_io_redirect
0000bb38 g     F .text	000000f4 .hidden __ltdf2
0000f548 g       *ABS*	00000000 __DTOR_END__
00000868 g     F .text	00000014 puts
0000f118 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007b34 g     F .text	00000074 __fpclassifyd
000073b4 g     F .text	000000a4 __ratio
00009384 g     F .text	0000001c __vfiprintf_internal
0000dec8 g     F .text	0000021c altera_avalon_jtag_uart_read
0000073c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000680 g     F .text	00000064 .hidden __udivsi3
0000d108 g     F .text	000000a4 isatty
0000f7b0 g     O .rodata	000000c8 __mprec_tens
000056fc g     F .text	0000000c __locale_charset
0000f088 g     F .text	00000090 alt_icache_flush
00012fb8 g     O .bss	00000004 __malloc_top_pad
00011480 g     O .rwdata	00000004 __mb_cur_max
0000572c g     F .text	0000000c _localeconv_r
000069e0 g     F .text	0000003c __i2b
0000503c g     F .text	000004bc __sfvwrite_r
00007ba8 g     F .text	00000054 _sbrk_r
000099f0 g     F .text	00000060 _read_r
000114a0 g     O .rwdata	00000004 alt_max_fd
000095d4 g     F .text	000000f0 _fclose_r
00004838 g     F .text	00000030 fflush
00012fb4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a840 g     F .text	000008ac .hidden __adddf3
0000715c g     F .text	0000010c __b2d
0000a308 g     F .text	00000538 .hidden __umoddi3
0000d2d4 g     F .text	000000d4 lseek
00011478 g     O .rwdata	00000004 _global_impure_ptr
000075d0 g     F .text	00000564 _realloc_r
00013104 g       *ABS*	00000000 __bss_end
0000e800 g     F .text	000000f0 alt_iic_isr_register
0000ed20 g     F .text	00000108 alt_tick
00009d90 g     F .text	00000578 .hidden __udivdi3
0000983c g     F .text	00000024 _fputwc_r
0000f788 g     O .rodata	00000028 __mprec_bigtens
000067c4 g     F .text	00000104 __s2b
0000cd9c g     F .text	000000a8 .hidden __floatunsidf
00006e9c g     F .text	00000060 __mcmp
00004bd8 g     F .text	00000018 __fp_lock_all
0000e7b4 g     F .text	0000004c alt_ic_irq_enabled
0000ec84 g     F .text	0000009c alt_alarm_stop
00012fcc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00010270 g     O .rwdata	00000028 alt_dev_null
0000e434 g     F .text	00000048 alt_dcache_flush_all
000068c8 g     F .text	00000068 __hi0bits
0000cc40 g     F .text	00000080 .hidden __fixdfsi
000114b8 g       *ABS*	00000000 __ram_rwdata_end
00011498 g     O .rwdata	00000008 alt_dev_list
0000d6f4 g     F .text	000000f8 write
0000f9cc g       *ABS*	00000000 __ram_rodata_end
0000d01c g     F .text	000000b0 fstat
0000bb38 g     F .text	000000f4 .hidden __ledf2
00006c14 g     F .text	00000140 __pow5mult
00007f28 g     F .text	0000145c ___vfiprintf_internal_r
00012fac g     O .bss	00000004 __nlocale_changed
000006e4 g     F .text	00000058 .hidden __umodsi3
00013104 g       *ABS*	00000000 end
0000da04 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f548 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000ce44 g     F .text	00000064 .hidden __clzsi2
0000e0e4 g     F .text	00000224 altera_avalon_jtag_uart_write
00004bc8 g     F .text	00000004 __sfp_lock_acquire
00006124 g     F .text	000000e4 memchr
00000914 g     F .text	000021f8 ___vfprintf_internal_r
00004d2c g     F .text	00000310 _free_r
00005708 g     F .text	00000010 __locale_mb_cur_max
0000f394 g     F .text	00000180 __call_exitprocs
00012fa8 g     O .bss	00000004 __mlocale_changed
00011484 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00012fd0 g     O .bss	00000004 _alt_tick_rate
00006d54 g     F .text	00000148 __lshift
00012fd4 g     O .bss	00000004 _alt_nticks
0000d4a8 g     F .text	000000fc read
0000d858 g     F .text	00000048 alt_sys_init
0000f27c g     F .text	00000118 __register_exitproc
00006a1c g     F .text	000001f8 __multiply
0000dd70 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f9cc g       *ABS*	00000000 __ram_rwdata_start
0000f548 g       *ABS*	00000000 __ram_rodata_start
00012fdc g     O .bss	00000028 __malloc_current_mallinfo
00007268 g     F .text	0000014c __d2b
0000d8a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000efe4 g     F .text	000000a4 alt_get_fd
000094bc g     F .text	00000054 _close_r
0000f200 g     F .text	0000007c memcmp
0000d960 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013104 g       *ABS*	00000000 __alt_stack_base
0000d9b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002be4 g     F .text	00000154 __swsetup_r
0000b0ec g     F .text	000008e8 .hidden __divdf3
00004a88 g     F .text	00000118 __sfp
000074cc g     F .text	00000078 __copybits
0000fe68 g     O .rwdata	00000408 __malloc_av_
00004bd4 g     F .text	00000004 __sinit_lock_release
0000bc2c g     F .text	00000718 .hidden __muldf3
00007bfc g     F .text	00000054 __sread
0000eedc g     F .text	00000108 alt_find_file
0000e4b8 g     F .text	000000a4 alt_dev_llist_insert
0000d424 g     F .text	00000024 __malloc_lock
0000d608 g     F .text	000000b0 sbrk
000047dc g     F .text	0000005c _fflush_r
00009510 g     F .text	000000c4 _calloc_r
00012fa4 g       *ABS*	00000000 __bss_start
000064ac g     F .text	00000128 memset
00000290 g     F .text	000002f8 main
00012fc8 g     O .bss	00000004 alt_envp
00012fb0 g     O .bss	00000004 __malloc_max_total_mem
0000d900 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b90 g     F .text	00000018 __swbuf
00007d30 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000096c4 g     F .text	00000014 fclose
00002f38 g     F .text	00001688 _dtoa_r
00005918 g     F .text	0000080c _malloc_r
00009d04 g     F .text	00000030 __ascii_wctomb
000114a4 g     O .rwdata	00000004 alt_errno
000054f8 g     F .text	000000c4 _fwalk
00000588 g     F .text	00000084 .hidden __divsi3
00004c08 g     F .text	00000124 _malloc_trim_r
0000f548 g       *ABS*	00000000 __CTOR_END__
00007d38 g     F .text	000000dc strcmp
0000f548 g       *ABS*	00000000 __flash_rodata_start
0000f548 g       *ABS*	00000000 __DTOR_LIST__
0000b9d4 g     F .text	00000088 .hidden __nedf2
0000d820 g     F .text	00000038 alt_irq_init
0000d5a4 g     F .text	00000064 alt_release_fd
0000f898 g     O .rodata	00000100 .hidden __clz_tab
00012fa4 g     O .bss	00000004 _PathLocale
0000f1b4 g     F .text	00000014 atexit
0000945c g     F .text	00000060 _write_r
00005738 g     F .text	00000018 setlocale
0001147c g     O .rwdata	00000004 _impure_ptr
00012fc0 g     O .bss	00000004 alt_argc
000045c0 g     F .text	0000021c __sflush_r
0000e5bc g     F .text	00000060 _do_dtors
00005724 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000070f8 g     F .text	00000064 __ulp
00004bf0 g     F .text	00000018 __fp_unlock_all
00011490 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005750 g     F .text	0000000c localeconv
0000e650 g     F .text	00000050 alt_ic_isr_register
000114b8 g       *ABS*	00000000 _edata
00013104 g       *ABS*	00000000 _end
000096d8 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000ddd8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000e728 g     F .text	0000008c alt_ic_irq_disable
00007c58 g     F .text	0000007c __swrite
00011488 g     O .rwdata	00000004 __malloc_trim_threshold
00005718 g     F .text	0000000c __locale_msgcharset
0000f1c8 g     F .text	00000038 exit
000055bc g     F .text	000000c4 _fwalk_reent
00006efc g     F .text	000001fc __mdiff
0000060c g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004bcc g     F .text	00000004 __sfp_lock_release
0000f514 g     F .text	00000034 _exit
0000e308 g     F .text	0000012c alt_alarm_start
0000575c g     F .text	000001bc __smakebuf_r
0000087c g     F .text	00000098 strlen
0000eb30 g     F .text	00000154 open
0000ba5c g     F .text	000000dc .hidden __gedf2
0001148c g     O .rwdata	00000004 __wctomb
00007f10 g     F .text	00000018 __sprint_r
0000e61c g     F .text	00000034 alt_icache_flush_all
000114ac g     O .rwdata	00000004 alt_priority_mask
0000e6a0 g     F .text	00000088 alt_ic_irq_enable
00002b0c g     F .text	0000001c __vfprintf_internal
00009d34 g     F .text	0000005c _wctomb_r
0000c344 g     F .text	000008fc .hidden __subdf3
00006930 g     F .text	000000b0 __lo0bits
000114b0 g     O .rwdata	00000008 alt_alarm_list
0000e55c g     F .text	00000060 _do_ctors
00009c44 g     F .text	000000c0 wcrtomb
0000cee4 g     F .text	000000d0 close
0000d214 g     F .text	00000084 alt_load
00009860 g     F .text	00000080 fputwc
00004bd0 g     F .text	00000004 __sinit_lock_acquire
000066a4 g     F .text	00000120 __multadd
0000667c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108c0104 	addi	r2,r2,12292
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108c0104 	addi	r2,r2,12292
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6d817 	ldw	r2,-25760(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6d817 	ldw	r2,-25760(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a51e14 	ori	gp,gp,38008
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	108be914 	ori	r2,r2,12196

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18cc4114 	ori	r3,r3,12548

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000d2140 	call	d214 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000d3a80 	call	d3a8 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xfffe028c>

00000290 <main>:
#define BASE SDRAM_CONTROLLER_0_BASE

#define MAXNUM_WORDS   SDRAM_CONTROLLER_0_SPAN/2

int main()
{
     290:	defff604 	addi	sp,sp,-40
     294:	dfc00915 	stw	ra,36(sp)
     298:	df000815 	stw	fp,32(sp)
     29c:	dc000715 	stw	r16,28(sp)
     2a0:	df000804 	addi	fp,sp,32
  printf("Hello from MT-3TB4 Group 16\n");
     2a4:	01000074 	movhi	r4,1
     2a8:	213d5204 	addi	r4,r4,-2744
     2ac:	00008680 	call	868 <puts>

  int i;
  int char_err_num=0, short_err_num=0, int_err_num=0;
     2b0:	e03ff915 	stw	zero,-28(fp)
     2b4:	e03ffa15 	stw	zero,-24(fp)
     2b8:	e03ffb15 	stw	zero,-20(fp)
  int *int_ptr;
  int aInt;

  int charsize, shortsize, intsize;

  charsize=sizeof(aChar);
     2bc:	00800044 	movi	r2,1
     2c0:	e0bffc15 	stw	r2,-16(fp)
  shortsize=sizeof(aShort);
     2c4:	00800084 	movi	r2,2
     2c8:	e0bffd15 	stw	r2,-12(fp)
  intsize=sizeof(aInt);
     2cc:	00800104 	movi	r2,4
     2d0:	e0bffe15 	stw	r2,-8(fp)
  printf("the size of char, short, int are: %d, %d, %d\n", charsize, shortsize, intsize);
     2d4:	e1fffe17 	ldw	r7,-8(fp)
     2d8:	e1bffd17 	ldw	r6,-12(fp)
     2dc:	e17ffc17 	ldw	r5,-16(fp)
     2e0:	01000074 	movhi	r4,1
     2e4:	213d5904 	addi	r4,r4,-2716
     2e8:	000076c0 	call	76c <printf>

  //----------------TEST CHAR-----------------------------------

  printf("\n writing chars.....\n");
     2ec:	01000074 	movhi	r4,1
     2f0:	213d6504 	addi	r4,r4,-2668
     2f4:	00008680 	call	868 <puts>
  for (i=0; i<5; i++) {
     2f8:	e03ff815 	stw	zero,-32(fp)
     2fc:	00001106 	br	344 <main+0xb4>
	  *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
     300:	e0fff817 	ldw	r3,-32(fp)
     304:	00810034 	movhi	r2,1024
     308:	1885883a 	add	r2,r3,r2
     30c:	1009883a 	mov	r4,r2
     310:	e0fff817 	ldw	r3,-32(fp)
     314:	00a00034 	movhi	r2,32768
     318:	10801fc4 	addi	r2,r2,127
     31c:	1884703a 	and	r2,r3,r2
     320:	1000040e 	bge	r2,zero,334 <main+0xa4>
     324:	10bfffc4 	addi	r2,r2,-1
     328:	00ffe004 	movi	r3,-128
     32c:	10c4b03a 	or	r2,r2,r3
     330:	10800044 	addi	r2,r2,1
     334:	20800005 	stb	r2,0(r4)
  printf("the size of char, short, int are: %d, %d, %d\n", charsize, shortsize, intsize);

  //----------------TEST CHAR-----------------------------------

  printf("\n writing chars.....\n");
  for (i=0; i<5; i++) {
     338:	e0bff817 	ldw	r2,-32(fp)
     33c:	10800044 	addi	r2,r2,1
     340:	e0bff815 	stw	r2,-32(fp)
     344:	e0bff817 	ldw	r2,-32(fp)
     348:	10800150 	cmplti	r2,r2,5
     34c:	103fec1e 	bne	r2,zero,300 <__alt_data_end+0xfffe0300>
	  *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
  }

  printf("\n testing chars.....\n");
     350:	01000074 	movhi	r4,1
     354:	213d6b04 	addi	r4,r4,-2644
     358:	00008680 	call	868 <puts>
  for (i=0; i<5; i++) {
     35c:	e03ff815 	stw	zero,-32(fp)
     360:	00001706 	br	3c0 <main+0x130>
	  if (* (char*)(BASE+i)!=i%128){  // or .....(char)i,   if not i%128
     364:	e0fff817 	ldw	r3,-32(fp)
     368:	00810034 	movhi	r2,1024
     36c:	1885883a 	add	r2,r3,r2
     370:	10800003 	ldbu	r2,0(r2)
     374:	10c03fcc 	andi	r3,r2,255
     378:	18c0201c 	xori	r3,r3,128
     37c:	18ffe004 	addi	r3,r3,-128
     380:	e13ff817 	ldw	r4,-32(fp)
     384:	00a00034 	movhi	r2,32768
     388:	10801fc4 	addi	r2,r2,127
     38c:	2084703a 	and	r2,r4,r2
     390:	1000040e 	bge	r2,zero,3a4 <main+0x114>
     394:	10bfffc4 	addi	r2,r2,-1
     398:	013fe004 	movi	r4,-128
     39c:	1104b03a 	or	r2,r2,r4
     3a0:	10800044 	addi	r2,r2,1
     3a4:	18800326 	beq	r3,r2,3b4 <main+0x124>
		  char_err_num++;
     3a8:	e0bff917 	ldw	r2,-28(fp)
     3ac:	10800044 	addi	r2,r2,1
     3b0:	e0bff915 	stw	r2,-28(fp)
  for (i=0; i<5; i++) {
	  *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
  }

  printf("\n testing chars.....\n");
  for (i=0; i<5; i++) {
     3b4:	e0bff817 	ldw	r2,-32(fp)
     3b8:	10800044 	addi	r2,r2,1
     3bc:	e0bff815 	stw	r2,-32(fp)
     3c0:	e0bff817 	ldw	r2,-32(fp)
     3c4:	10800150 	cmplti	r2,r2,5
     3c8:	103fe61e 	bne	r2,zero,364 <__alt_data_end+0xfffe0364>
	  if (* (char*)(BASE+i)!=i%128){  // or .....(char)i,   if not i%128
		  char_err_num++;
	  }
  }

  printf("Testing  Char: the total numbers of error is : %i\n" ,char_err_num);
     3cc:	e17ff917 	ldw	r5,-28(fp)
     3d0:	01000074 	movhi	r4,1
     3d4:	213d7104 	addi	r4,r4,-2620
     3d8:	000076c0 	call	76c <printf>

       //----------------TEST SHORT-----------------------------------

  printf(" \n writing short......\n");
     3dc:	01000074 	movhi	r4,1
     3e0:	213d7e04 	addi	r4,r4,-2568
     3e4:	00008680 	call	868 <puts>
  for (i=0; i<5; i++) {
     3e8:	e03ff815 	stw	zero,-32(fp)
     3ec:	00000d06 	br	424 <main+0x194>
           //for (i=0; i<32767; i++) {
	  *(short*)(BASE+i*2)=i%32767; // short, uses two bytes
     3f0:	e0fff817 	ldw	r3,-32(fp)
     3f4:	00808034 	movhi	r2,512
     3f8:	1885883a 	add	r2,r3,r2
     3fc:	1085883a 	add	r2,r2,r2
     400:	1021883a 	mov	r16,r2
     404:	e0bff817 	ldw	r2,-32(fp)
     408:	015fffc4 	movi	r5,32767
     40c:	1009883a 	mov	r4,r2
     410:	000060c0 	call	60c <__modsi3>
     414:	8080000d 	sth	r2,0(r16)
  printf("Testing  Char: the total numbers of error is : %i\n" ,char_err_num);

       //----------------TEST SHORT-----------------------------------

  printf(" \n writing short......\n");
  for (i=0; i<5; i++) {
     418:	e0bff817 	ldw	r2,-32(fp)
     41c:	10800044 	addi	r2,r2,1
     420:	e0bff815 	stw	r2,-32(fp)
     424:	e0bff817 	ldw	r2,-32(fp)
     428:	10800150 	cmplti	r2,r2,5
     42c:	103ff01e 	bne	r2,zero,3f0 <__alt_data_end+0xfffe03f0>
           //for (i=0; i<32767; i++) {
	  *(short*)(BASE+i*2)=i%32767; // short, uses two bytes
  }
  printf(" \n testing short......\n");
     430:	01000074 	movhi	r4,1
     434:	213d8404 	addi	r4,r4,-2544
     438:	00008680 	call	868 <puts>
  for (i=0; i<5; i++) {
     43c:	e03ff815 	stw	zero,-32(fp)
     440:	00001306 	br	490 <main+0x200>
 	  if (* (short*)(BASE+i*2)!=i%32767){  // or .....(char)i,   if not i%128
     444:	e0fff817 	ldw	r3,-32(fp)
     448:	00808034 	movhi	r2,512
     44c:	1885883a 	add	r2,r3,r2
     450:	1085883a 	add	r2,r2,r2
     454:	1080000b 	ldhu	r2,0(r2)
     458:	143fffcc 	andi	r16,r2,65535
     45c:	8420001c 	xori	r16,r16,32768
     460:	84200004 	addi	r16,r16,-32768
     464:	e0bff817 	ldw	r2,-32(fp)
     468:	015fffc4 	movi	r5,32767
     46c:	1009883a 	mov	r4,r2
     470:	000060c0 	call	60c <__modsi3>
     474:	80800326 	beq	r16,r2,484 <main+0x1f4>
 		  short_err_num++;
     478:	e0bffa17 	ldw	r2,-24(fp)
     47c:	10800044 	addi	r2,r2,1
     480:	e0bffa15 	stw	r2,-24(fp)
  for (i=0; i<5; i++) {
           //for (i=0; i<32767; i++) {
	  *(short*)(BASE+i*2)=i%32767; // short, uses two bytes
  }
  printf(" \n testing short......\n");
  for (i=0; i<5; i++) {
     484:	e0bff817 	ldw	r2,-32(fp)
     488:	10800044 	addi	r2,r2,1
     48c:	e0bff815 	stw	r2,-32(fp)
     490:	e0bff817 	ldw	r2,-32(fp)
     494:	10800150 	cmplti	r2,r2,5
     498:	103fea1e 	bne	r2,zero,444 <__alt_data_end+0xfffe0444>
 	  if (* (short*)(BASE+i*2)!=i%32767){  // or .....(char)i,   if not i%128
 		  short_err_num++;
 	  }
   }

  printf("Testing Short: the total numbers of error is : %i\n" ,short_err_num);
     49c:	e17ffa17 	ldw	r5,-24(fp)
     4a0:	01000074 	movhi	r4,1
     4a4:	213d8a04 	addi	r4,r4,-2520
     4a8:	000076c0 	call	76c <printf>

       //----------------TEST INT    -----------------------------------
  printf(" \n writing integer......\n");
     4ac:	01000074 	movhi	r4,1
     4b0:	213d9704 	addi	r4,r4,-2468
     4b4:	00008680 	call	868 <puts>

  for (i=0; i<5; i++) {
     4b8:	e03ff815 	stw	zero,-32(fp)
     4bc:	00000b06 	br	4ec <main+0x25c>
	  *(int*)(BASE+i*4)=i; // int, use 4 bytes
     4c0:	e0fff817 	ldw	r3,-32(fp)
     4c4:	00804034 	movhi	r2,256
     4c8:	1885883a 	add	r2,r3,r2
     4cc:	1085883a 	add	r2,r2,r2
     4d0:	1085883a 	add	r2,r2,r2
     4d4:	1007883a 	mov	r3,r2
     4d8:	e0bff817 	ldw	r2,-32(fp)
     4dc:	18800015 	stw	r2,0(r3)
  printf("Testing Short: the total numbers of error is : %i\n" ,short_err_num);

       //----------------TEST INT    -----------------------------------
  printf(" \n writing integer......\n");

  for (i=0; i<5; i++) {
     4e0:	e0bff817 	ldw	r2,-32(fp)
     4e4:	10800044 	addi	r2,r2,1
     4e8:	e0bff815 	stw	r2,-32(fp)
     4ec:	e0bff817 	ldw	r2,-32(fp)
     4f0:	10800150 	cmplti	r2,r2,5
     4f4:	103ff21e 	bne	r2,zero,4c0 <__alt_data_end+0xfffe04c0>
	  *(int*)(BASE+i*4)=i; // int, use 4 bytes
  }

  printf(" \n testing integer......\n");
     4f8:	01000074 	movhi	r4,1
     4fc:	213d9e04 	addi	r4,r4,-2440
     500:	00008680 	call	868 <puts>
    for (i=0; i<5; i++) {
     504:	e03ff815 	stw	zero,-32(fp)
     508:	00001106 	br	550 <main+0x2c0>
   	  if (* (short*)(BASE+i*4)!=i){  // or .....(char)i,   if not i%128
     50c:	e0fff817 	ldw	r3,-32(fp)
     510:	00804034 	movhi	r2,256
     514:	1885883a 	add	r2,r3,r2
     518:	1085883a 	add	r2,r2,r2
     51c:	1085883a 	add	r2,r2,r2
     520:	1080000b 	ldhu	r2,0(r2)
     524:	10ffffcc 	andi	r3,r2,65535
     528:	18e0001c 	xori	r3,r3,32768
     52c:	18e00004 	addi	r3,r3,-32768
     530:	e0bff817 	ldw	r2,-32(fp)
     534:	18800326 	beq	r3,r2,544 <main+0x2b4>
   		  int_err_num++;
     538:	e0bffb17 	ldw	r2,-20(fp)
     53c:	10800044 	addi	r2,r2,1
     540:	e0bffb15 	stw	r2,-20(fp)
  for (i=0; i<5; i++) {
	  *(int*)(BASE+i*4)=i; // int, use 4 bytes
  }

  printf(" \n testing integer......\n");
    for (i=0; i<5; i++) {
     544:	e0bff817 	ldw	r2,-32(fp)
     548:	10800044 	addi	r2,r2,1
     54c:	e0bff815 	stw	r2,-32(fp)
     550:	e0bff817 	ldw	r2,-32(fp)
     554:	10800150 	cmplti	r2,r2,5
     558:	103fec1e 	bne	r2,zero,50c <__alt_data_end+0xfffe050c>
   	  if (* (short*)(BASE+i*4)!=i){  // or .....(char)i,   if not i%128
   		  int_err_num++;
   	  }
    }

  printf("Testing Integer: the total numbers of error is : %i\n" ,int_err_num);
     55c:	e17ffb17 	ldw	r5,-20(fp)
     560:	01000074 	movhi	r4,1
     564:	213da504 	addi	r4,r4,-2412
     568:	000076c0 	call	76c <printf>
  return 0;
     56c:	0005883a 	mov	r2,zero
}
     570:	e6ffff04 	addi	sp,fp,-4
     574:	dfc00217 	ldw	ra,8(sp)
     578:	df000117 	ldw	fp,4(sp)
     57c:	dc000017 	ldw	r16,0(sp)
     580:	dec00304 	addi	sp,sp,12
     584:	f800283a 	ret

00000588 <__divsi3>:
     588:	20001b16 	blt	r4,zero,5f8 <__divsi3+0x70>
     58c:	000f883a 	mov	r7,zero
     590:	28001616 	blt	r5,zero,5ec <__divsi3+0x64>
     594:	200d883a 	mov	r6,r4
     598:	29001a2e 	bgeu	r5,r4,604 <__divsi3+0x7c>
     59c:	00800804 	movi	r2,32
     5a0:	00c00044 	movi	r3,1
     5a4:	00000106 	br	5ac <__divsi3+0x24>
     5a8:	10000d26 	beq	r2,zero,5e0 <__divsi3+0x58>
     5ac:	294b883a 	add	r5,r5,r5
     5b0:	10bfffc4 	addi	r2,r2,-1
     5b4:	18c7883a 	add	r3,r3,r3
     5b8:	293ffb36 	bltu	r5,r4,5a8 <__alt_data_end+0xfffe05a8>
     5bc:	0005883a 	mov	r2,zero
     5c0:	18000726 	beq	r3,zero,5e0 <__divsi3+0x58>
     5c4:	0005883a 	mov	r2,zero
     5c8:	31400236 	bltu	r6,r5,5d4 <__divsi3+0x4c>
     5cc:	314dc83a 	sub	r6,r6,r5
     5d0:	10c4b03a 	or	r2,r2,r3
     5d4:	1806d07a 	srli	r3,r3,1
     5d8:	280ad07a 	srli	r5,r5,1
     5dc:	183ffa1e 	bne	r3,zero,5c8 <__alt_data_end+0xfffe05c8>
     5e0:	38000126 	beq	r7,zero,5e8 <__divsi3+0x60>
     5e4:	0085c83a 	sub	r2,zero,r2
     5e8:	f800283a 	ret
     5ec:	014bc83a 	sub	r5,zero,r5
     5f0:	39c0005c 	xori	r7,r7,1
     5f4:	003fe706 	br	594 <__alt_data_end+0xfffe0594>
     5f8:	0109c83a 	sub	r4,zero,r4
     5fc:	01c00044 	movi	r7,1
     600:	003fe306 	br	590 <__alt_data_end+0xfffe0590>
     604:	00c00044 	movi	r3,1
     608:	003fee06 	br	5c4 <__alt_data_end+0xfffe05c4>

0000060c <__modsi3>:
     60c:	20001716 	blt	r4,zero,66c <__modsi3+0x60>
     610:	000f883a 	mov	r7,zero
     614:	2005883a 	mov	r2,r4
     618:	28001216 	blt	r5,zero,664 <__modsi3+0x58>
     61c:	2900162e 	bgeu	r5,r4,678 <__modsi3+0x6c>
     620:	01800804 	movi	r6,32
     624:	00c00044 	movi	r3,1
     628:	00000106 	br	630 <__modsi3+0x24>
     62c:	30000a26 	beq	r6,zero,658 <__modsi3+0x4c>
     630:	294b883a 	add	r5,r5,r5
     634:	31bfffc4 	addi	r6,r6,-1
     638:	18c7883a 	add	r3,r3,r3
     63c:	293ffb36 	bltu	r5,r4,62c <__alt_data_end+0xfffe062c>
     640:	18000526 	beq	r3,zero,658 <__modsi3+0x4c>
     644:	1806d07a 	srli	r3,r3,1
     648:	11400136 	bltu	r2,r5,650 <__modsi3+0x44>
     64c:	1145c83a 	sub	r2,r2,r5
     650:	280ad07a 	srli	r5,r5,1
     654:	183ffb1e 	bne	r3,zero,644 <__alt_data_end+0xfffe0644>
     658:	38000126 	beq	r7,zero,660 <__modsi3+0x54>
     65c:	0085c83a 	sub	r2,zero,r2
     660:	f800283a 	ret
     664:	014bc83a 	sub	r5,zero,r5
     668:	003fec06 	br	61c <__alt_data_end+0xfffe061c>
     66c:	0109c83a 	sub	r4,zero,r4
     670:	01c00044 	movi	r7,1
     674:	003fe706 	br	614 <__alt_data_end+0xfffe0614>
     678:	00c00044 	movi	r3,1
     67c:	003ff106 	br	644 <__alt_data_end+0xfffe0644>

00000680 <__udivsi3>:
     680:	200d883a 	mov	r6,r4
     684:	2900152e 	bgeu	r5,r4,6dc <__udivsi3+0x5c>
     688:	28001416 	blt	r5,zero,6dc <__udivsi3+0x5c>
     68c:	00800804 	movi	r2,32
     690:	00c00044 	movi	r3,1
     694:	00000206 	br	6a0 <__udivsi3+0x20>
     698:	10000e26 	beq	r2,zero,6d4 <__udivsi3+0x54>
     69c:	28000516 	blt	r5,zero,6b4 <__udivsi3+0x34>
     6a0:	294b883a 	add	r5,r5,r5
     6a4:	10bfffc4 	addi	r2,r2,-1
     6a8:	18c7883a 	add	r3,r3,r3
     6ac:	293ffa36 	bltu	r5,r4,698 <__alt_data_end+0xfffe0698>
     6b0:	18000826 	beq	r3,zero,6d4 <__udivsi3+0x54>
     6b4:	0005883a 	mov	r2,zero
     6b8:	31400236 	bltu	r6,r5,6c4 <__udivsi3+0x44>
     6bc:	314dc83a 	sub	r6,r6,r5
     6c0:	10c4b03a 	or	r2,r2,r3
     6c4:	1806d07a 	srli	r3,r3,1
     6c8:	280ad07a 	srli	r5,r5,1
     6cc:	183ffa1e 	bne	r3,zero,6b8 <__alt_data_end+0xfffe06b8>
     6d0:	f800283a 	ret
     6d4:	0005883a 	mov	r2,zero
     6d8:	f800283a 	ret
     6dc:	00c00044 	movi	r3,1
     6e0:	003ff406 	br	6b4 <__alt_data_end+0xfffe06b4>

000006e4 <__umodsi3>:
     6e4:	2005883a 	mov	r2,r4
     6e8:	2900122e 	bgeu	r5,r4,734 <__umodsi3+0x50>
     6ec:	28001116 	blt	r5,zero,734 <__umodsi3+0x50>
     6f0:	01800804 	movi	r6,32
     6f4:	00c00044 	movi	r3,1
     6f8:	00000206 	br	704 <__umodsi3+0x20>
     6fc:	30000c26 	beq	r6,zero,730 <__umodsi3+0x4c>
     700:	28000516 	blt	r5,zero,718 <__umodsi3+0x34>
     704:	294b883a 	add	r5,r5,r5
     708:	31bfffc4 	addi	r6,r6,-1
     70c:	18c7883a 	add	r3,r3,r3
     710:	293ffa36 	bltu	r5,r4,6fc <__alt_data_end+0xfffe06fc>
     714:	18000626 	beq	r3,zero,730 <__umodsi3+0x4c>
     718:	1806d07a 	srli	r3,r3,1
     71c:	11400136 	bltu	r2,r5,724 <__umodsi3+0x40>
     720:	1145c83a 	sub	r2,r2,r5
     724:	280ad07a 	srli	r5,r5,1
     728:	183ffb1e 	bne	r3,zero,718 <__alt_data_end+0xfffe0718>
     72c:	f800283a 	ret
     730:	f800283a 	ret
     734:	00c00044 	movi	r3,1
     738:	003ff706 	br	718 <__alt_data_end+0xfffe0718>

0000073c <_printf_r>:
     73c:	defffd04 	addi	sp,sp,-12
     740:	2805883a 	mov	r2,r5
     744:	dfc00015 	stw	ra,0(sp)
     748:	d9800115 	stw	r6,4(sp)
     74c:	d9c00215 	stw	r7,8(sp)
     750:	21400217 	ldw	r5,8(r4)
     754:	d9c00104 	addi	r7,sp,4
     758:	100d883a 	mov	r6,r2
     75c:	00009140 	call	914 <___vfprintf_internal_r>
     760:	dfc00017 	ldw	ra,0(sp)
     764:	dec00304 	addi	sp,sp,12
     768:	f800283a 	ret

0000076c <printf>:
     76c:	defffc04 	addi	sp,sp,-16
     770:	dfc00015 	stw	ra,0(sp)
     774:	d9400115 	stw	r5,4(sp)
     778:	d9800215 	stw	r6,8(sp)
     77c:	d9c00315 	stw	r7,12(sp)
     780:	00800074 	movhi	r2,1
     784:	10851f04 	addi	r2,r2,5244
     788:	10800017 	ldw	r2,0(r2)
     78c:	200b883a 	mov	r5,r4
     790:	d9800104 	addi	r6,sp,4
     794:	11000217 	ldw	r4,8(r2)
     798:	0002b0c0 	call	2b0c <__vfprintf_internal>
     79c:	dfc00017 	ldw	ra,0(sp)
     7a0:	dec00404 	addi	sp,sp,16
     7a4:	f800283a 	ret

000007a8 <_puts_r>:
     7a8:	defff604 	addi	sp,sp,-40
     7ac:	dc000715 	stw	r16,28(sp)
     7b0:	2021883a 	mov	r16,r4
     7b4:	2809883a 	mov	r4,r5
     7b8:	dc400815 	stw	r17,32(sp)
     7bc:	dfc00915 	stw	ra,36(sp)
     7c0:	2823883a 	mov	r17,r5
     7c4:	000087c0 	call	87c <strlen>
     7c8:	10c00044 	addi	r3,r2,1
     7cc:	d8800115 	stw	r2,4(sp)
     7d0:	00800074 	movhi	r2,1
     7d4:	10bdb304 	addi	r2,r2,-2356
     7d8:	d8800215 	stw	r2,8(sp)
     7dc:	00800044 	movi	r2,1
     7e0:	d8800315 	stw	r2,12(sp)
     7e4:	00800084 	movi	r2,2
     7e8:	dc400015 	stw	r17,0(sp)
     7ec:	d8c00615 	stw	r3,24(sp)
     7f0:	dec00415 	stw	sp,16(sp)
     7f4:	d8800515 	stw	r2,20(sp)
     7f8:	80000226 	beq	r16,zero,804 <_puts_r+0x5c>
     7fc:	80800e17 	ldw	r2,56(r16)
     800:	10001426 	beq	r2,zero,854 <_puts_r+0xac>
     804:	81400217 	ldw	r5,8(r16)
     808:	2880030b 	ldhu	r2,12(r5)
     80c:	10c8000c 	andi	r3,r2,8192
     810:	1800061e 	bne	r3,zero,82c <_puts_r+0x84>
     814:	29001917 	ldw	r4,100(r5)
     818:	00f7ffc4 	movi	r3,-8193
     81c:	10880014 	ori	r2,r2,8192
     820:	20c6703a 	and	r3,r4,r3
     824:	2880030d 	sth	r2,12(r5)
     828:	28c01915 	stw	r3,100(r5)
     82c:	d9800404 	addi	r6,sp,16
     830:	8009883a 	mov	r4,r16
     834:	000503c0 	call	503c <__sfvwrite_r>
     838:	1000091e 	bne	r2,zero,860 <_puts_r+0xb8>
     83c:	00800284 	movi	r2,10
     840:	dfc00917 	ldw	ra,36(sp)
     844:	dc400817 	ldw	r17,32(sp)
     848:	dc000717 	ldw	r16,28(sp)
     84c:	dec00a04 	addi	sp,sp,40
     850:	f800283a 	ret
     854:	8009883a 	mov	r4,r16
     858:	0004bb80 	call	4bb8 <__sinit>
     85c:	003fe906 	br	804 <__alt_data_end+0xfffe0804>
     860:	00bfffc4 	movi	r2,-1
     864:	003ff606 	br	840 <__alt_data_end+0xfffe0840>

00000868 <puts>:
     868:	00800074 	movhi	r2,1
     86c:	10851f04 	addi	r2,r2,5244
     870:	200b883a 	mov	r5,r4
     874:	11000017 	ldw	r4,0(r2)
     878:	00007a81 	jmpi	7a8 <_puts_r>

0000087c <strlen>:
     87c:	208000cc 	andi	r2,r4,3
     880:	10002026 	beq	r2,zero,904 <strlen+0x88>
     884:	20800007 	ldb	r2,0(r4)
     888:	10002026 	beq	r2,zero,90c <strlen+0x90>
     88c:	2005883a 	mov	r2,r4
     890:	00000206 	br	89c <strlen+0x20>
     894:	10c00007 	ldb	r3,0(r2)
     898:	18001826 	beq	r3,zero,8fc <strlen+0x80>
     89c:	10800044 	addi	r2,r2,1
     8a0:	10c000cc 	andi	r3,r2,3
     8a4:	183ffb1e 	bne	r3,zero,894 <__alt_data_end+0xfffe0894>
     8a8:	10c00017 	ldw	r3,0(r2)
     8ac:	01ffbff4 	movhi	r7,65279
     8b0:	39ffbfc4 	addi	r7,r7,-257
     8b4:	00ca303a 	nor	r5,zero,r3
     8b8:	01a02074 	movhi	r6,32897
     8bc:	19c7883a 	add	r3,r3,r7
     8c0:	31a02004 	addi	r6,r6,-32640
     8c4:	1946703a 	and	r3,r3,r5
     8c8:	1986703a 	and	r3,r3,r6
     8cc:	1800091e 	bne	r3,zero,8f4 <strlen+0x78>
     8d0:	10800104 	addi	r2,r2,4
     8d4:	10c00017 	ldw	r3,0(r2)
     8d8:	19cb883a 	add	r5,r3,r7
     8dc:	00c6303a 	nor	r3,zero,r3
     8e0:	28c6703a 	and	r3,r5,r3
     8e4:	1986703a 	and	r3,r3,r6
     8e8:	183ff926 	beq	r3,zero,8d0 <__alt_data_end+0xfffe08d0>
     8ec:	00000106 	br	8f4 <strlen+0x78>
     8f0:	10800044 	addi	r2,r2,1
     8f4:	10c00007 	ldb	r3,0(r2)
     8f8:	183ffd1e 	bne	r3,zero,8f0 <__alt_data_end+0xfffe08f0>
     8fc:	1105c83a 	sub	r2,r2,r4
     900:	f800283a 	ret
     904:	2005883a 	mov	r2,r4
     908:	003fe706 	br	8a8 <__alt_data_end+0xfffe08a8>
     90c:	0005883a 	mov	r2,zero
     910:	f800283a 	ret

00000914 <___vfprintf_internal_r>:
     914:	deffb804 	addi	sp,sp,-288
     918:	dfc04715 	stw	ra,284(sp)
     91c:	ddc04515 	stw	r23,276(sp)
     920:	dd404315 	stw	r21,268(sp)
     924:	d9002c15 	stw	r4,176(sp)
     928:	282f883a 	mov	r23,r5
     92c:	302b883a 	mov	r21,r6
     930:	d9c02d15 	stw	r7,180(sp)
     934:	df004615 	stw	fp,280(sp)
     938:	dd804415 	stw	r22,272(sp)
     93c:	dd004215 	stw	r20,264(sp)
     940:	dcc04115 	stw	r19,260(sp)
     944:	dc804015 	stw	r18,256(sp)
     948:	dc403f15 	stw	r17,252(sp)
     94c:	dc003e15 	stw	r16,248(sp)
     950:	000572c0 	call	572c <_localeconv_r>
     954:	10800017 	ldw	r2,0(r2)
     958:	1009883a 	mov	r4,r2
     95c:	d8803415 	stw	r2,208(sp)
     960:	000087c0 	call	87c <strlen>
     964:	d8803715 	stw	r2,220(sp)
     968:	d8802c17 	ldw	r2,176(sp)
     96c:	10000226 	beq	r2,zero,978 <___vfprintf_internal_r+0x64>
     970:	10800e17 	ldw	r2,56(r2)
     974:	1000f926 	beq	r2,zero,d5c <___vfprintf_internal_r+0x448>
     978:	b880030b 	ldhu	r2,12(r23)
     97c:	10c8000c 	andi	r3,r2,8192
     980:	1800061e 	bne	r3,zero,99c <___vfprintf_internal_r+0x88>
     984:	b9001917 	ldw	r4,100(r23)
     988:	00f7ffc4 	movi	r3,-8193
     98c:	10880014 	ori	r2,r2,8192
     990:	20c6703a 	and	r3,r4,r3
     994:	b880030d 	sth	r2,12(r23)
     998:	b8c01915 	stw	r3,100(r23)
     99c:	10c0020c 	andi	r3,r2,8
     9a0:	1800c126 	beq	r3,zero,ca8 <___vfprintf_internal_r+0x394>
     9a4:	b8c00417 	ldw	r3,16(r23)
     9a8:	1800bf26 	beq	r3,zero,ca8 <___vfprintf_internal_r+0x394>
     9ac:	1080068c 	andi	r2,r2,26
     9b0:	00c00284 	movi	r3,10
     9b4:	10c0c426 	beq	r2,r3,cc8 <___vfprintf_internal_r+0x3b4>
     9b8:	d8c00404 	addi	r3,sp,16
     9bc:	05000074 	movhi	r20,1
     9c0:	d9001e04 	addi	r4,sp,120
     9c4:	a53dc484 	addi	r20,r20,-2286
     9c8:	d8c01e15 	stw	r3,120(sp)
     9cc:	d8002015 	stw	zero,128(sp)
     9d0:	d8001f15 	stw	zero,124(sp)
     9d4:	d8003315 	stw	zero,204(sp)
     9d8:	d8003615 	stw	zero,216(sp)
     9dc:	d8003815 	stw	zero,224(sp)
     9e0:	1811883a 	mov	r8,r3
     9e4:	d8003915 	stw	zero,228(sp)
     9e8:	d8003a15 	stw	zero,232(sp)
     9ec:	d8002f15 	stw	zero,188(sp)
     9f0:	d9002815 	stw	r4,160(sp)
     9f4:	a8800007 	ldb	r2,0(r21)
     9f8:	10027b26 	beq	r2,zero,13e8 <___vfprintf_internal_r+0xad4>
     9fc:	00c00944 	movi	r3,37
     a00:	a821883a 	mov	r16,r21
     a04:	10c0021e 	bne	r2,r3,a10 <___vfprintf_internal_r+0xfc>
     a08:	00001406 	br	a5c <___vfprintf_internal_r+0x148>
     a0c:	10c00326 	beq	r2,r3,a1c <___vfprintf_internal_r+0x108>
     a10:	84000044 	addi	r16,r16,1
     a14:	80800007 	ldb	r2,0(r16)
     a18:	103ffc1e 	bne	r2,zero,a0c <__alt_data_end+0xfffe0a0c>
     a1c:	8563c83a 	sub	r17,r16,r21
     a20:	88000e26 	beq	r17,zero,a5c <___vfprintf_internal_r+0x148>
     a24:	d8c02017 	ldw	r3,128(sp)
     a28:	d8801f17 	ldw	r2,124(sp)
     a2c:	45400015 	stw	r21,0(r8)
     a30:	1c47883a 	add	r3,r3,r17
     a34:	10800044 	addi	r2,r2,1
     a38:	d8c02015 	stw	r3,128(sp)
     a3c:	44400115 	stw	r17,4(r8)
     a40:	d8801f15 	stw	r2,124(sp)
     a44:	00c001c4 	movi	r3,7
     a48:	1880a716 	blt	r3,r2,ce8 <___vfprintf_internal_r+0x3d4>
     a4c:	42000204 	addi	r8,r8,8
     a50:	d9402f17 	ldw	r5,188(sp)
     a54:	2c4b883a 	add	r5,r5,r17
     a58:	d9402f15 	stw	r5,188(sp)
     a5c:	80800007 	ldb	r2,0(r16)
     a60:	1000a826 	beq	r2,zero,d04 <___vfprintf_internal_r+0x3f0>
     a64:	84400047 	ldb	r17,1(r16)
     a68:	00bfffc4 	movi	r2,-1
     a6c:	85400044 	addi	r21,r16,1
     a70:	d8002785 	stb	zero,158(sp)
     a74:	0007883a 	mov	r3,zero
     a78:	000f883a 	mov	r7,zero
     a7c:	d8802915 	stw	r2,164(sp)
     a80:	d8003115 	stw	zero,196(sp)
     a84:	0025883a 	mov	r18,zero
     a88:	01401604 	movi	r5,88
     a8c:	01800244 	movi	r6,9
     a90:	02800a84 	movi	r10,42
     a94:	02401b04 	movi	r9,108
     a98:	ad400044 	addi	r21,r21,1
     a9c:	88bff804 	addi	r2,r17,-32
     aa0:	28830436 	bltu	r5,r2,16b4 <___vfprintf_internal_r+0xda0>
     aa4:	100490ba 	slli	r2,r2,2
     aa8:	01000034 	movhi	r4,0
     aac:	2102af04 	addi	r4,r4,2748
     ab0:	1105883a 	add	r2,r2,r4
     ab4:	10800017 	ldw	r2,0(r2)
     ab8:	1000683a 	jmp	r2
     abc:	000015d4 	movui	zero,87
     ac0:	000016b4 	movhi	zero,90
     ac4:	000016b4 	movhi	zero,90
     ac8:	000015f4 	movhi	zero,87
     acc:	000016b4 	movhi	zero,90
     ad0:	000016b4 	movhi	zero,90
     ad4:	000016b4 	movhi	zero,90
     ad8:	000016b4 	movhi	zero,90
     adc:	000016b4 	movhi	zero,90
     ae0:	000016b4 	movhi	zero,90
     ae4:	00000d68 	cmpgeui	zero,zero,53
     ae8:	00001510 	cmplti	zero,zero,84
     aec:	000016b4 	movhi	zero,90
     af0:	00000c30 	cmpltui	zero,zero,48
     af4:	00000d90 	cmplti	zero,zero,54
     af8:	000016b4 	movhi	zero,90
     afc:	00000dd0 	cmplti	zero,zero,55
     b00:	00000ddc 	xori	zero,zero,55
     b04:	00000ddc 	xori	zero,zero,55
     b08:	00000ddc 	xori	zero,zero,55
     b0c:	00000ddc 	xori	zero,zero,55
     b10:	00000ddc 	xori	zero,zero,55
     b14:	00000ddc 	xori	zero,zero,55
     b18:	00000ddc 	xori	zero,zero,55
     b1c:	00000ddc 	xori	zero,zero,55
     b20:	00000ddc 	xori	zero,zero,55
     b24:	000016b4 	movhi	zero,90
     b28:	000016b4 	movhi	zero,90
     b2c:	000016b4 	movhi	zero,90
     b30:	000016b4 	movhi	zero,90
     b34:	000016b4 	movhi	zero,90
     b38:	000016b4 	movhi	zero,90
     b3c:	000016b4 	movhi	zero,90
     b40:	000016b4 	movhi	zero,90
     b44:	000016b4 	movhi	zero,90
     b48:	000016b4 	movhi	zero,90
     b4c:	00000e10 	cmplti	zero,zero,56
     b50:	00000ecc 	andi	zero,zero,59
     b54:	000016b4 	movhi	zero,90
     b58:	00000ecc 	andi	zero,zero,59
     b5c:	000016b4 	movhi	zero,90
     b60:	000016b4 	movhi	zero,90
     b64:	000016b4 	movhi	zero,90
     b68:	000016b4 	movhi	zero,90
     b6c:	00000f6c 	andhi	zero,zero,61
     b70:	000016b4 	movhi	zero,90
     b74:	000016b4 	movhi	zero,90
     b78:	00000f78 	rdprs	zero,zero,61
     b7c:	000016b4 	movhi	zero,90
     b80:	000016b4 	movhi	zero,90
     b84:	000016b4 	movhi	zero,90
     b88:	000016b4 	movhi	zero,90
     b8c:	000016b4 	movhi	zero,90
     b90:	000013f0 	cmpltui	zero,zero,79
     b94:	000016b4 	movhi	zero,90
     b98:	000016b4 	movhi	zero,90
     b9c:	00001450 	cmplti	zero,zero,81
     ba0:	000016b4 	movhi	zero,90
     ba4:	000016b4 	movhi	zero,90
     ba8:	000016b4 	movhi	zero,90
     bac:	000016b4 	movhi	zero,90
     bb0:	000016b4 	movhi	zero,90
     bb4:	000016b4 	movhi	zero,90
     bb8:	000016b4 	movhi	zero,90
     bbc:	000016b4 	movhi	zero,90
     bc0:	000016b4 	movhi	zero,90
     bc4:	000016b4 	movhi	zero,90
     bc8:	00001660 	cmpeqi	zero,zero,89
     bcc:	00001600 	call	160 <alt_irq_handler+0x64>
     bd0:	00000ecc 	andi	zero,zero,59
     bd4:	00000ecc 	andi	zero,zero,59
     bd8:	00000ecc 	andi	zero,zero,59
     bdc:	00001610 	cmplti	zero,zero,88
     be0:	00001600 	call	160 <alt_irq_handler+0x64>
     be4:	000016b4 	movhi	zero,90
     be8:	000016b4 	movhi	zero,90
     bec:	0000161c 	xori	zero,zero,88
     bf0:	000016b4 	movhi	zero,90
     bf4:	0000162c 	andhi	zero,zero,88
     bf8:	00001500 	call	150 <alt_irq_handler+0x54>
     bfc:	00000c3c 	xorhi	zero,zero,48
     c00:	00001520 	cmpeqi	zero,zero,84
     c04:	000016b4 	movhi	zero,90
     c08:	0000152c 	andhi	zero,zero,84
     c0c:	000016b4 	movhi	zero,90
     c10:	00001588 	cmpgei	zero,zero,86
     c14:	000016b4 	movhi	zero,90
     c18:	000016b4 	movhi	zero,90
     c1c:	00001598 	cmpnei	zero,zero,86
     c20:	d9003117 	ldw	r4,196(sp)
     c24:	d8802d15 	stw	r2,180(sp)
     c28:	0109c83a 	sub	r4,zero,r4
     c2c:	d9003115 	stw	r4,196(sp)
     c30:	94800114 	ori	r18,r18,4
     c34:	ac400007 	ldb	r17,0(r21)
     c38:	003f9706 	br	a98 <__alt_data_end+0xfffe0a98>
     c3c:	00800c04 	movi	r2,48
     c40:	d9002d17 	ldw	r4,180(sp)
     c44:	d9402917 	ldw	r5,164(sp)
     c48:	d8802705 	stb	r2,156(sp)
     c4c:	00801e04 	movi	r2,120
     c50:	d8802745 	stb	r2,157(sp)
     c54:	d8002785 	stb	zero,158(sp)
     c58:	20c00104 	addi	r3,r4,4
     c5c:	24c00017 	ldw	r19,0(r4)
     c60:	002d883a 	mov	r22,zero
     c64:	90800094 	ori	r2,r18,2
     c68:	28029a16 	blt	r5,zero,16d4 <___vfprintf_internal_r+0xdc0>
     c6c:	00bfdfc4 	movi	r2,-129
     c70:	90a4703a 	and	r18,r18,r2
     c74:	d8c02d15 	stw	r3,180(sp)
     c78:	94800094 	ori	r18,r18,2
     c7c:	9802871e 	bne	r19,zero,169c <___vfprintf_internal_r+0xd88>
     c80:	00800074 	movhi	r2,1
     c84:	10bdbd04 	addi	r2,r2,-2316
     c88:	d8803915 	stw	r2,228(sp)
     c8c:	04401e04 	movi	r17,120
     c90:	d8802917 	ldw	r2,164(sp)
     c94:	0039883a 	mov	fp,zero
     c98:	1001e926 	beq	r2,zero,1440 <___vfprintf_internal_r+0xb2c>
     c9c:	0027883a 	mov	r19,zero
     ca0:	002d883a 	mov	r22,zero
     ca4:	00020506 	br	14bc <___vfprintf_internal_r+0xba8>
     ca8:	d9002c17 	ldw	r4,176(sp)
     cac:	b80b883a 	mov	r5,r23
     cb0:	0002be40 	call	2be4 <__swsetup_r>
     cb4:	1005ac1e 	bne	r2,zero,2368 <___vfprintf_internal_r+0x1a54>
     cb8:	b880030b 	ldhu	r2,12(r23)
     cbc:	00c00284 	movi	r3,10
     cc0:	1080068c 	andi	r2,r2,26
     cc4:	10ff3c1e 	bne	r2,r3,9b8 <__alt_data_end+0xfffe09b8>
     cc8:	b880038f 	ldh	r2,14(r23)
     ccc:	103f3a16 	blt	r2,zero,9b8 <__alt_data_end+0xfffe09b8>
     cd0:	d9c02d17 	ldw	r7,180(sp)
     cd4:	d9002c17 	ldw	r4,176(sp)
     cd8:	a80d883a 	mov	r6,r21
     cdc:	b80b883a 	mov	r5,r23
     ce0:	0002b280 	call	2b28 <__sbprintf>
     ce4:	00001106 	br	d2c <___vfprintf_internal_r+0x418>
     ce8:	d9002c17 	ldw	r4,176(sp)
     cec:	d9801e04 	addi	r6,sp,120
     cf0:	b80b883a 	mov	r5,r23
     cf4:	0007f100 	call	7f10 <__sprint_r>
     cf8:	1000081e 	bne	r2,zero,d1c <___vfprintf_internal_r+0x408>
     cfc:	da000404 	addi	r8,sp,16
     d00:	003f5306 	br	a50 <__alt_data_end+0xfffe0a50>
     d04:	d8802017 	ldw	r2,128(sp)
     d08:	10000426 	beq	r2,zero,d1c <___vfprintf_internal_r+0x408>
     d0c:	d9002c17 	ldw	r4,176(sp)
     d10:	d9801e04 	addi	r6,sp,120
     d14:	b80b883a 	mov	r5,r23
     d18:	0007f100 	call	7f10 <__sprint_r>
     d1c:	b880030b 	ldhu	r2,12(r23)
     d20:	1080100c 	andi	r2,r2,64
     d24:	1005901e 	bne	r2,zero,2368 <___vfprintf_internal_r+0x1a54>
     d28:	d8802f17 	ldw	r2,188(sp)
     d2c:	dfc04717 	ldw	ra,284(sp)
     d30:	df004617 	ldw	fp,280(sp)
     d34:	ddc04517 	ldw	r23,276(sp)
     d38:	dd804417 	ldw	r22,272(sp)
     d3c:	dd404317 	ldw	r21,268(sp)
     d40:	dd004217 	ldw	r20,264(sp)
     d44:	dcc04117 	ldw	r19,260(sp)
     d48:	dc804017 	ldw	r18,256(sp)
     d4c:	dc403f17 	ldw	r17,252(sp)
     d50:	dc003e17 	ldw	r16,248(sp)
     d54:	dec04804 	addi	sp,sp,288
     d58:	f800283a 	ret
     d5c:	d9002c17 	ldw	r4,176(sp)
     d60:	0004bb80 	call	4bb8 <__sinit>
     d64:	003f0406 	br	978 <__alt_data_end+0xfffe0978>
     d68:	d8802d17 	ldw	r2,180(sp)
     d6c:	d9002d17 	ldw	r4,180(sp)
     d70:	10800017 	ldw	r2,0(r2)
     d74:	d8803115 	stw	r2,196(sp)
     d78:	20800104 	addi	r2,r4,4
     d7c:	d9003117 	ldw	r4,196(sp)
     d80:	203fa716 	blt	r4,zero,c20 <__alt_data_end+0xfffe0c20>
     d84:	d8802d15 	stw	r2,180(sp)
     d88:	ac400007 	ldb	r17,0(r21)
     d8c:	003f4206 	br	a98 <__alt_data_end+0xfffe0a98>
     d90:	ac400007 	ldb	r17,0(r21)
     d94:	aac00044 	addi	r11,r21,1
     d98:	8a872826 	beq	r17,r10,2a3c <___vfprintf_internal_r+0x2128>
     d9c:	88bff404 	addi	r2,r17,-48
     da0:	0009883a 	mov	r4,zero
     da4:	30867d36 	bltu	r6,r2,279c <___vfprintf_internal_r+0x1e88>
     da8:	5c400007 	ldb	r17,0(r11)
     dac:	210002a4 	muli	r4,r4,10
     db0:	5d400044 	addi	r21,r11,1
     db4:	a817883a 	mov	r11,r21
     db8:	2089883a 	add	r4,r4,r2
     dbc:	88bff404 	addi	r2,r17,-48
     dc0:	30bff92e 	bgeu	r6,r2,da8 <__alt_data_end+0xfffe0da8>
     dc4:	2005c916 	blt	r4,zero,24ec <___vfprintf_internal_r+0x1bd8>
     dc8:	d9002915 	stw	r4,164(sp)
     dcc:	003f3306 	br	a9c <__alt_data_end+0xfffe0a9c>
     dd0:	94802014 	ori	r18,r18,128
     dd4:	ac400007 	ldb	r17,0(r21)
     dd8:	003f2f06 	br	a98 <__alt_data_end+0xfffe0a98>
     ddc:	a809883a 	mov	r4,r21
     de0:	d8003115 	stw	zero,196(sp)
     de4:	88bff404 	addi	r2,r17,-48
     de8:	0017883a 	mov	r11,zero
     dec:	24400007 	ldb	r17,0(r4)
     df0:	5ac002a4 	muli	r11,r11,10
     df4:	ad400044 	addi	r21,r21,1
     df8:	a809883a 	mov	r4,r21
     dfc:	12d7883a 	add	r11,r2,r11
     e00:	88bff404 	addi	r2,r17,-48
     e04:	30bff92e 	bgeu	r6,r2,dec <__alt_data_end+0xfffe0dec>
     e08:	dac03115 	stw	r11,196(sp)
     e0c:	003f2306 	br	a9c <__alt_data_end+0xfffe0a9c>
     e10:	18c03fcc 	andi	r3,r3,255
     e14:	18072b1e 	bne	r3,zero,2ac4 <___vfprintf_internal_r+0x21b0>
     e18:	94800414 	ori	r18,r18,16
     e1c:	9080080c 	andi	r2,r18,32
     e20:	10037b26 	beq	r2,zero,1c10 <___vfprintf_internal_r+0x12fc>
     e24:	d9402d17 	ldw	r5,180(sp)
     e28:	28800117 	ldw	r2,4(r5)
     e2c:	2cc00017 	ldw	r19,0(r5)
     e30:	29400204 	addi	r5,r5,8
     e34:	d9402d15 	stw	r5,180(sp)
     e38:	102d883a 	mov	r22,r2
     e3c:	10044b16 	blt	r2,zero,1f6c <___vfprintf_internal_r+0x1658>
     e40:	d9402917 	ldw	r5,164(sp)
     e44:	df002783 	ldbu	fp,158(sp)
     e48:	2803bc16 	blt	r5,zero,1d3c <___vfprintf_internal_r+0x1428>
     e4c:	00ffdfc4 	movi	r3,-129
     e50:	9d84b03a 	or	r2,r19,r22
     e54:	90e4703a 	and	r18,r18,r3
     e58:	10017726 	beq	r2,zero,1438 <___vfprintf_internal_r+0xb24>
     e5c:	b0038326 	beq	r22,zero,1c6c <___vfprintf_internal_r+0x1358>
     e60:	dc402a15 	stw	r17,168(sp)
     e64:	dc001e04 	addi	r16,sp,120
     e68:	b023883a 	mov	r17,r22
     e6c:	402d883a 	mov	r22,r8
     e70:	9809883a 	mov	r4,r19
     e74:	880b883a 	mov	r5,r17
     e78:	01800284 	movi	r6,10
     e7c:	000f883a 	mov	r7,zero
     e80:	000a3080 	call	a308 <__umoddi3>
     e84:	10800c04 	addi	r2,r2,48
     e88:	843fffc4 	addi	r16,r16,-1
     e8c:	9809883a 	mov	r4,r19
     e90:	880b883a 	mov	r5,r17
     e94:	80800005 	stb	r2,0(r16)
     e98:	01800284 	movi	r6,10
     e9c:	000f883a 	mov	r7,zero
     ea0:	0009d900 	call	9d90 <__udivdi3>
     ea4:	1027883a 	mov	r19,r2
     ea8:	10c4b03a 	or	r2,r2,r3
     eac:	1823883a 	mov	r17,r3
     eb0:	103fef1e 	bne	r2,zero,e70 <__alt_data_end+0xfffe0e70>
     eb4:	d8c02817 	ldw	r3,160(sp)
     eb8:	dc402a17 	ldw	r17,168(sp)
     ebc:	b011883a 	mov	r8,r22
     ec0:	1c07c83a 	sub	r3,r3,r16
     ec4:	d8c02e15 	stw	r3,184(sp)
     ec8:	00005906 	br	1030 <___vfprintf_internal_r+0x71c>
     ecc:	18c03fcc 	andi	r3,r3,255
     ed0:	1806fa1e 	bne	r3,zero,2abc <___vfprintf_internal_r+0x21a8>
     ed4:	9080020c 	andi	r2,r18,8
     ed8:	10048a26 	beq	r2,zero,2104 <___vfprintf_internal_r+0x17f0>
     edc:	d8c02d17 	ldw	r3,180(sp)
     ee0:	d9002d17 	ldw	r4,180(sp)
     ee4:	d9402d17 	ldw	r5,180(sp)
     ee8:	18c00017 	ldw	r3,0(r3)
     eec:	21000117 	ldw	r4,4(r4)
     ef0:	29400204 	addi	r5,r5,8
     ef4:	d8c03615 	stw	r3,216(sp)
     ef8:	d9003815 	stw	r4,224(sp)
     efc:	d9402d15 	stw	r5,180(sp)
     f00:	d9003617 	ldw	r4,216(sp)
     f04:	d9403817 	ldw	r5,224(sp)
     f08:	da003d15 	stw	r8,244(sp)
     f0c:	04000044 	movi	r16,1
     f10:	0007b340 	call	7b34 <__fpclassifyd>
     f14:	da003d17 	ldw	r8,244(sp)
     f18:	14041f1e 	bne	r2,r16,1f98 <___vfprintf_internal_r+0x1684>
     f1c:	d9003617 	ldw	r4,216(sp)
     f20:	d9403817 	ldw	r5,224(sp)
     f24:	000d883a 	mov	r6,zero
     f28:	000f883a 	mov	r7,zero
     f2c:	000bb380 	call	bb38 <__ledf2>
     f30:	da003d17 	ldw	r8,244(sp)
     f34:	1005be16 	blt	r2,zero,2630 <___vfprintf_internal_r+0x1d1c>
     f38:	df002783 	ldbu	fp,158(sp)
     f3c:	008011c4 	movi	r2,71
     f40:	1445330e 	bge	r2,r17,2410 <___vfprintf_internal_r+0x1afc>
     f44:	04000074 	movhi	r16,1
     f48:	843db504 	addi	r16,r16,-2348
     f4c:	00c000c4 	movi	r3,3
     f50:	00bfdfc4 	movi	r2,-129
     f54:	d8c02a15 	stw	r3,168(sp)
     f58:	90a4703a 	and	r18,r18,r2
     f5c:	d8c02e15 	stw	r3,184(sp)
     f60:	d8002915 	stw	zero,164(sp)
     f64:	d8003215 	stw	zero,200(sp)
     f68:	00003706 	br	1048 <___vfprintf_internal_r+0x734>
     f6c:	94800214 	ori	r18,r18,8
     f70:	ac400007 	ldb	r17,0(r21)
     f74:	003ec806 	br	a98 <__alt_data_end+0xfffe0a98>
     f78:	18c03fcc 	andi	r3,r3,255
     f7c:	1806db1e 	bne	r3,zero,2aec <___vfprintf_internal_r+0x21d8>
     f80:	94800414 	ori	r18,r18,16
     f84:	9080080c 	andi	r2,r18,32
     f88:	1002d826 	beq	r2,zero,1aec <___vfprintf_internal_r+0x11d8>
     f8c:	d9402d17 	ldw	r5,180(sp)
     f90:	d8c02917 	ldw	r3,164(sp)
     f94:	d8002785 	stb	zero,158(sp)
     f98:	28800204 	addi	r2,r5,8
     f9c:	2cc00017 	ldw	r19,0(r5)
     fa0:	2d800117 	ldw	r22,4(r5)
     fa4:	18048f16 	blt	r3,zero,21e4 <___vfprintf_internal_r+0x18d0>
     fa8:	013fdfc4 	movi	r4,-129
     fac:	9d86b03a 	or	r3,r19,r22
     fb0:	d8802d15 	stw	r2,180(sp)
     fb4:	9124703a 	and	r18,r18,r4
     fb8:	1802d91e 	bne	r3,zero,1b20 <___vfprintf_internal_r+0x120c>
     fbc:	d8c02917 	ldw	r3,164(sp)
     fc0:	0039883a 	mov	fp,zero
     fc4:	1805c326 	beq	r3,zero,26d4 <___vfprintf_internal_r+0x1dc0>
     fc8:	0027883a 	mov	r19,zero
     fcc:	002d883a 	mov	r22,zero
     fd0:	dc001e04 	addi	r16,sp,120
     fd4:	9806d0fa 	srli	r3,r19,3
     fd8:	b008977a 	slli	r4,r22,29
     fdc:	b02cd0fa 	srli	r22,r22,3
     fe0:	9cc001cc 	andi	r19,r19,7
     fe4:	98800c04 	addi	r2,r19,48
     fe8:	843fffc4 	addi	r16,r16,-1
     fec:	20e6b03a 	or	r19,r4,r3
     ff0:	80800005 	stb	r2,0(r16)
     ff4:	9d86b03a 	or	r3,r19,r22
     ff8:	183ff61e 	bne	r3,zero,fd4 <__alt_data_end+0xfffe0fd4>
     ffc:	90c0004c 	andi	r3,r18,1
    1000:	18013b26 	beq	r3,zero,14f0 <___vfprintf_internal_r+0xbdc>
    1004:	10803fcc 	andi	r2,r2,255
    1008:	1080201c 	xori	r2,r2,128
    100c:	10bfe004 	addi	r2,r2,-128
    1010:	00c00c04 	movi	r3,48
    1014:	10c13626 	beq	r2,r3,14f0 <___vfprintf_internal_r+0xbdc>
    1018:	80ffffc5 	stb	r3,-1(r16)
    101c:	d8c02817 	ldw	r3,160(sp)
    1020:	80bfffc4 	addi	r2,r16,-1
    1024:	1021883a 	mov	r16,r2
    1028:	1887c83a 	sub	r3,r3,r2
    102c:	d8c02e15 	stw	r3,184(sp)
    1030:	d8802e17 	ldw	r2,184(sp)
    1034:	d9002917 	ldw	r4,164(sp)
    1038:	1100010e 	bge	r2,r4,1040 <___vfprintf_internal_r+0x72c>
    103c:	2005883a 	mov	r2,r4
    1040:	d8802a15 	stw	r2,168(sp)
    1044:	d8003215 	stw	zero,200(sp)
    1048:	e7003fcc 	andi	fp,fp,255
    104c:	e700201c 	xori	fp,fp,128
    1050:	e73fe004 	addi	fp,fp,-128
    1054:	e0000326 	beq	fp,zero,1064 <___vfprintf_internal_r+0x750>
    1058:	d8c02a17 	ldw	r3,168(sp)
    105c:	18c00044 	addi	r3,r3,1
    1060:	d8c02a15 	stw	r3,168(sp)
    1064:	90c0008c 	andi	r3,r18,2
    1068:	d8c02b15 	stw	r3,172(sp)
    106c:	18000326 	beq	r3,zero,107c <___vfprintf_internal_r+0x768>
    1070:	d8c02a17 	ldw	r3,168(sp)
    1074:	18c00084 	addi	r3,r3,2
    1078:	d8c02a15 	stw	r3,168(sp)
    107c:	90c0210c 	andi	r3,r18,132
    1080:	d8c03015 	stw	r3,192(sp)
    1084:	1801a31e 	bne	r3,zero,1714 <___vfprintf_internal_r+0xe00>
    1088:	d9003117 	ldw	r4,196(sp)
    108c:	d8c02a17 	ldw	r3,168(sp)
    1090:	20e7c83a 	sub	r19,r4,r3
    1094:	04c19f0e 	bge	zero,r19,1714 <___vfprintf_internal_r+0xe00>
    1098:	02400404 	movi	r9,16
    109c:	d8c02017 	ldw	r3,128(sp)
    10a0:	d8801f17 	ldw	r2,124(sp)
    10a4:	4cc50d0e 	bge	r9,r19,24dc <___vfprintf_internal_r+0x1bc8>
    10a8:	01400074 	movhi	r5,1
    10ac:	297dc884 	addi	r5,r5,-2270
    10b0:	dc403b15 	stw	r17,236(sp)
    10b4:	d9403515 	stw	r5,212(sp)
    10b8:	9823883a 	mov	r17,r19
    10bc:	482d883a 	mov	r22,r9
    10c0:	9027883a 	mov	r19,r18
    10c4:	070001c4 	movi	fp,7
    10c8:	8025883a 	mov	r18,r16
    10cc:	dc002c17 	ldw	r16,176(sp)
    10d0:	00000306 	br	10e0 <___vfprintf_internal_r+0x7cc>
    10d4:	8c7ffc04 	addi	r17,r17,-16
    10d8:	42000204 	addi	r8,r8,8
    10dc:	b440130e 	bge	r22,r17,112c <___vfprintf_internal_r+0x818>
    10e0:	01000074 	movhi	r4,1
    10e4:	18c00404 	addi	r3,r3,16
    10e8:	10800044 	addi	r2,r2,1
    10ec:	213dc884 	addi	r4,r4,-2270
    10f0:	41000015 	stw	r4,0(r8)
    10f4:	45800115 	stw	r22,4(r8)
    10f8:	d8c02015 	stw	r3,128(sp)
    10fc:	d8801f15 	stw	r2,124(sp)
    1100:	e0bff40e 	bge	fp,r2,10d4 <__alt_data_end+0xfffe10d4>
    1104:	d9801e04 	addi	r6,sp,120
    1108:	b80b883a 	mov	r5,r23
    110c:	8009883a 	mov	r4,r16
    1110:	0007f100 	call	7f10 <__sprint_r>
    1114:	103f011e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1118:	8c7ffc04 	addi	r17,r17,-16
    111c:	d8c02017 	ldw	r3,128(sp)
    1120:	d8801f17 	ldw	r2,124(sp)
    1124:	da000404 	addi	r8,sp,16
    1128:	b47fed16 	blt	r22,r17,10e0 <__alt_data_end+0xfffe10e0>
    112c:	9021883a 	mov	r16,r18
    1130:	9825883a 	mov	r18,r19
    1134:	8827883a 	mov	r19,r17
    1138:	dc403b17 	ldw	r17,236(sp)
    113c:	d9403517 	ldw	r5,212(sp)
    1140:	98c7883a 	add	r3,r19,r3
    1144:	10800044 	addi	r2,r2,1
    1148:	41400015 	stw	r5,0(r8)
    114c:	44c00115 	stw	r19,4(r8)
    1150:	d8c02015 	stw	r3,128(sp)
    1154:	d8801f15 	stw	r2,124(sp)
    1158:	010001c4 	movi	r4,7
    115c:	2082a316 	blt	r4,r2,1bec <___vfprintf_internal_r+0x12d8>
    1160:	df002787 	ldb	fp,158(sp)
    1164:	42000204 	addi	r8,r8,8
    1168:	e0000c26 	beq	fp,zero,119c <___vfprintf_internal_r+0x888>
    116c:	d8801f17 	ldw	r2,124(sp)
    1170:	d9002784 	addi	r4,sp,158
    1174:	18c00044 	addi	r3,r3,1
    1178:	10800044 	addi	r2,r2,1
    117c:	41000015 	stw	r4,0(r8)
    1180:	01000044 	movi	r4,1
    1184:	41000115 	stw	r4,4(r8)
    1188:	d8c02015 	stw	r3,128(sp)
    118c:	d8801f15 	stw	r2,124(sp)
    1190:	010001c4 	movi	r4,7
    1194:	20823c16 	blt	r4,r2,1a88 <___vfprintf_internal_r+0x1174>
    1198:	42000204 	addi	r8,r8,8
    119c:	d8802b17 	ldw	r2,172(sp)
    11a0:	10000c26 	beq	r2,zero,11d4 <___vfprintf_internal_r+0x8c0>
    11a4:	d8801f17 	ldw	r2,124(sp)
    11a8:	d9002704 	addi	r4,sp,156
    11ac:	18c00084 	addi	r3,r3,2
    11b0:	10800044 	addi	r2,r2,1
    11b4:	41000015 	stw	r4,0(r8)
    11b8:	01000084 	movi	r4,2
    11bc:	41000115 	stw	r4,4(r8)
    11c0:	d8c02015 	stw	r3,128(sp)
    11c4:	d8801f15 	stw	r2,124(sp)
    11c8:	010001c4 	movi	r4,7
    11cc:	20823616 	blt	r4,r2,1aa8 <___vfprintf_internal_r+0x1194>
    11d0:	42000204 	addi	r8,r8,8
    11d4:	d9003017 	ldw	r4,192(sp)
    11d8:	00802004 	movi	r2,128
    11dc:	20819926 	beq	r4,r2,1844 <___vfprintf_internal_r+0xf30>
    11e0:	d9402917 	ldw	r5,164(sp)
    11e4:	d8802e17 	ldw	r2,184(sp)
    11e8:	28adc83a 	sub	r22,r5,r2
    11ec:	0580310e 	bge	zero,r22,12b4 <___vfprintf_internal_r+0x9a0>
    11f0:	07000404 	movi	fp,16
    11f4:	d8801f17 	ldw	r2,124(sp)
    11f8:	e584140e 	bge	fp,r22,224c <___vfprintf_internal_r+0x1938>
    11fc:	01400074 	movhi	r5,1
    1200:	297dc484 	addi	r5,r5,-2286
    1204:	dc402915 	stw	r17,164(sp)
    1208:	d9402b15 	stw	r5,172(sp)
    120c:	b023883a 	mov	r17,r22
    1210:	04c001c4 	movi	r19,7
    1214:	a82d883a 	mov	r22,r21
    1218:	902b883a 	mov	r21,r18
    121c:	8025883a 	mov	r18,r16
    1220:	dc002c17 	ldw	r16,176(sp)
    1224:	00000306 	br	1234 <___vfprintf_internal_r+0x920>
    1228:	8c7ffc04 	addi	r17,r17,-16
    122c:	42000204 	addi	r8,r8,8
    1230:	e440110e 	bge	fp,r17,1278 <___vfprintf_internal_r+0x964>
    1234:	18c00404 	addi	r3,r3,16
    1238:	10800044 	addi	r2,r2,1
    123c:	45000015 	stw	r20,0(r8)
    1240:	47000115 	stw	fp,4(r8)
    1244:	d8c02015 	stw	r3,128(sp)
    1248:	d8801f15 	stw	r2,124(sp)
    124c:	98bff60e 	bge	r19,r2,1228 <__alt_data_end+0xfffe1228>
    1250:	d9801e04 	addi	r6,sp,120
    1254:	b80b883a 	mov	r5,r23
    1258:	8009883a 	mov	r4,r16
    125c:	0007f100 	call	7f10 <__sprint_r>
    1260:	103eae1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1264:	8c7ffc04 	addi	r17,r17,-16
    1268:	d8c02017 	ldw	r3,128(sp)
    126c:	d8801f17 	ldw	r2,124(sp)
    1270:	da000404 	addi	r8,sp,16
    1274:	e47fef16 	blt	fp,r17,1234 <__alt_data_end+0xfffe1234>
    1278:	9021883a 	mov	r16,r18
    127c:	a825883a 	mov	r18,r21
    1280:	b02b883a 	mov	r21,r22
    1284:	882d883a 	mov	r22,r17
    1288:	dc402917 	ldw	r17,164(sp)
    128c:	d9002b17 	ldw	r4,172(sp)
    1290:	1d87883a 	add	r3,r3,r22
    1294:	10800044 	addi	r2,r2,1
    1298:	41000015 	stw	r4,0(r8)
    129c:	45800115 	stw	r22,4(r8)
    12a0:	d8c02015 	stw	r3,128(sp)
    12a4:	d8801f15 	stw	r2,124(sp)
    12a8:	010001c4 	movi	r4,7
    12ac:	2081ee16 	blt	r4,r2,1a68 <___vfprintf_internal_r+0x1154>
    12b0:	42000204 	addi	r8,r8,8
    12b4:	9080400c 	andi	r2,r18,256
    12b8:	1001181e 	bne	r2,zero,171c <___vfprintf_internal_r+0xe08>
    12bc:	d9402e17 	ldw	r5,184(sp)
    12c0:	d8801f17 	ldw	r2,124(sp)
    12c4:	44000015 	stw	r16,0(r8)
    12c8:	1947883a 	add	r3,r3,r5
    12cc:	10800044 	addi	r2,r2,1
    12d0:	41400115 	stw	r5,4(r8)
    12d4:	d8c02015 	stw	r3,128(sp)
    12d8:	d8801f15 	stw	r2,124(sp)
    12dc:	010001c4 	movi	r4,7
    12e0:	2081d316 	blt	r4,r2,1a30 <___vfprintf_internal_r+0x111c>
    12e4:	42000204 	addi	r8,r8,8
    12e8:	9480010c 	andi	r18,r18,4
    12ec:	90003226 	beq	r18,zero,13b8 <___vfprintf_internal_r+0xaa4>
    12f0:	d9403117 	ldw	r5,196(sp)
    12f4:	d8802a17 	ldw	r2,168(sp)
    12f8:	28a1c83a 	sub	r16,r5,r2
    12fc:	04002e0e 	bge	zero,r16,13b8 <___vfprintf_internal_r+0xaa4>
    1300:	04400404 	movi	r17,16
    1304:	d8801f17 	ldw	r2,124(sp)
    1308:	8c04a20e 	bge	r17,r16,2594 <___vfprintf_internal_r+0x1c80>
    130c:	01400074 	movhi	r5,1
    1310:	297dc884 	addi	r5,r5,-2270
    1314:	d9403515 	stw	r5,212(sp)
    1318:	048001c4 	movi	r18,7
    131c:	dcc02c17 	ldw	r19,176(sp)
    1320:	00000306 	br	1330 <___vfprintf_internal_r+0xa1c>
    1324:	843ffc04 	addi	r16,r16,-16
    1328:	42000204 	addi	r8,r8,8
    132c:	8c00130e 	bge	r17,r16,137c <___vfprintf_internal_r+0xa68>
    1330:	01000074 	movhi	r4,1
    1334:	18c00404 	addi	r3,r3,16
    1338:	10800044 	addi	r2,r2,1
    133c:	213dc884 	addi	r4,r4,-2270
    1340:	41000015 	stw	r4,0(r8)
    1344:	44400115 	stw	r17,4(r8)
    1348:	d8c02015 	stw	r3,128(sp)
    134c:	d8801f15 	stw	r2,124(sp)
    1350:	90bff40e 	bge	r18,r2,1324 <__alt_data_end+0xfffe1324>
    1354:	d9801e04 	addi	r6,sp,120
    1358:	b80b883a 	mov	r5,r23
    135c:	9809883a 	mov	r4,r19
    1360:	0007f100 	call	7f10 <__sprint_r>
    1364:	103e6d1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1368:	843ffc04 	addi	r16,r16,-16
    136c:	d8c02017 	ldw	r3,128(sp)
    1370:	d8801f17 	ldw	r2,124(sp)
    1374:	da000404 	addi	r8,sp,16
    1378:	8c3fed16 	blt	r17,r16,1330 <__alt_data_end+0xfffe1330>
    137c:	d9403517 	ldw	r5,212(sp)
    1380:	1c07883a 	add	r3,r3,r16
    1384:	10800044 	addi	r2,r2,1
    1388:	41400015 	stw	r5,0(r8)
    138c:	44000115 	stw	r16,4(r8)
    1390:	d8c02015 	stw	r3,128(sp)
    1394:	d8801f15 	stw	r2,124(sp)
    1398:	010001c4 	movi	r4,7
    139c:	2080060e 	bge	r4,r2,13b8 <___vfprintf_internal_r+0xaa4>
    13a0:	d9002c17 	ldw	r4,176(sp)
    13a4:	d9801e04 	addi	r6,sp,120
    13a8:	b80b883a 	mov	r5,r23
    13ac:	0007f100 	call	7f10 <__sprint_r>
    13b0:	103e5a1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    13b4:	d8c02017 	ldw	r3,128(sp)
    13b8:	d8803117 	ldw	r2,196(sp)
    13bc:	d9002a17 	ldw	r4,168(sp)
    13c0:	1100010e 	bge	r2,r4,13c8 <___vfprintf_internal_r+0xab4>
    13c4:	2005883a 	mov	r2,r4
    13c8:	d9402f17 	ldw	r5,188(sp)
    13cc:	288b883a 	add	r5,r5,r2
    13d0:	d9402f15 	stw	r5,188(sp)
    13d4:	18019e1e 	bne	r3,zero,1a50 <___vfprintf_internal_r+0x113c>
    13d8:	a8800007 	ldb	r2,0(r21)
    13dc:	d8001f15 	stw	zero,124(sp)
    13e0:	da000404 	addi	r8,sp,16
    13e4:	103d851e 	bne	r2,zero,9fc <__alt_data_end+0xfffe09fc>
    13e8:	a821883a 	mov	r16,r21
    13ec:	003d9b06 	br	a5c <__alt_data_end+0xfffe0a5c>
    13f0:	18c03fcc 	andi	r3,r3,255
    13f4:	1805c11e 	bne	r3,zero,2afc <___vfprintf_internal_r+0x21e8>
    13f8:	94800414 	ori	r18,r18,16
    13fc:	9080080c 	andi	r2,r18,32
    1400:	10020c26 	beq	r2,zero,1c34 <___vfprintf_internal_r+0x1320>
    1404:	d8802d17 	ldw	r2,180(sp)
    1408:	d9002917 	ldw	r4,164(sp)
    140c:	d8002785 	stb	zero,158(sp)
    1410:	10c00204 	addi	r3,r2,8
    1414:	14c00017 	ldw	r19,0(r2)
    1418:	15800117 	ldw	r22,4(r2)
    141c:	20040f16 	blt	r4,zero,245c <___vfprintf_internal_r+0x1b48>
    1420:	013fdfc4 	movi	r4,-129
    1424:	9d84b03a 	or	r2,r19,r22
    1428:	d8c02d15 	stw	r3,180(sp)
    142c:	9124703a 	and	r18,r18,r4
    1430:	0039883a 	mov	fp,zero
    1434:	103e891e 	bne	r2,zero,e5c <__alt_data_end+0xfffe0e5c>
    1438:	d9002917 	ldw	r4,164(sp)
    143c:	2002c11e 	bne	r4,zero,1f44 <___vfprintf_internal_r+0x1630>
    1440:	d8002915 	stw	zero,164(sp)
    1444:	d8002e15 	stw	zero,184(sp)
    1448:	dc001e04 	addi	r16,sp,120
    144c:	003ef806 	br	1030 <__alt_data_end+0xfffe1030>
    1450:	18c03fcc 	andi	r3,r3,255
    1454:	18059d1e 	bne	r3,zero,2acc <___vfprintf_internal_r+0x21b8>
    1458:	01400074 	movhi	r5,1
    145c:	297db804 	addi	r5,r5,-2336
    1460:	d9403915 	stw	r5,228(sp)
    1464:	9080080c 	andi	r2,r18,32
    1468:	10005226 	beq	r2,zero,15b4 <___vfprintf_internal_r+0xca0>
    146c:	d8802d17 	ldw	r2,180(sp)
    1470:	14c00017 	ldw	r19,0(r2)
    1474:	15800117 	ldw	r22,4(r2)
    1478:	10800204 	addi	r2,r2,8
    147c:	d8802d15 	stw	r2,180(sp)
    1480:	9080004c 	andi	r2,r18,1
    1484:	10019026 	beq	r2,zero,1ac8 <___vfprintf_internal_r+0x11b4>
    1488:	9d84b03a 	or	r2,r19,r22
    148c:	10036926 	beq	r2,zero,2234 <___vfprintf_internal_r+0x1920>
    1490:	d8c02917 	ldw	r3,164(sp)
    1494:	00800c04 	movi	r2,48
    1498:	d8802705 	stb	r2,156(sp)
    149c:	dc402745 	stb	r17,157(sp)
    14a0:	d8002785 	stb	zero,158(sp)
    14a4:	90800094 	ori	r2,r18,2
    14a8:	18045d16 	blt	r3,zero,2620 <___vfprintf_internal_r+0x1d0c>
    14ac:	00bfdfc4 	movi	r2,-129
    14b0:	90a4703a 	and	r18,r18,r2
    14b4:	94800094 	ori	r18,r18,2
    14b8:	0039883a 	mov	fp,zero
    14bc:	d9003917 	ldw	r4,228(sp)
    14c0:	dc001e04 	addi	r16,sp,120
    14c4:	988003cc 	andi	r2,r19,15
    14c8:	b006973a 	slli	r3,r22,28
    14cc:	2085883a 	add	r2,r4,r2
    14d0:	9826d13a 	srli	r19,r19,4
    14d4:	10800003 	ldbu	r2,0(r2)
    14d8:	b02cd13a 	srli	r22,r22,4
    14dc:	843fffc4 	addi	r16,r16,-1
    14e0:	1ce6b03a 	or	r19,r3,r19
    14e4:	80800005 	stb	r2,0(r16)
    14e8:	9d84b03a 	or	r2,r19,r22
    14ec:	103ff51e 	bne	r2,zero,14c4 <__alt_data_end+0xfffe14c4>
    14f0:	d8c02817 	ldw	r3,160(sp)
    14f4:	1c07c83a 	sub	r3,r3,r16
    14f8:	d8c02e15 	stw	r3,184(sp)
    14fc:	003ecc06 	br	1030 <__alt_data_end+0xfffe1030>
    1500:	18c03fcc 	andi	r3,r3,255
    1504:	183e9f26 	beq	r3,zero,f84 <__alt_data_end+0xfffe0f84>
    1508:	d9c02785 	stb	r7,158(sp)
    150c:	003e9d06 	br	f84 <__alt_data_end+0xfffe0f84>
    1510:	00c00044 	movi	r3,1
    1514:	01c00ac4 	movi	r7,43
    1518:	ac400007 	ldb	r17,0(r21)
    151c:	003d5e06 	br	a98 <__alt_data_end+0xfffe0a98>
    1520:	94800814 	ori	r18,r18,32
    1524:	ac400007 	ldb	r17,0(r21)
    1528:	003d5b06 	br	a98 <__alt_data_end+0xfffe0a98>
    152c:	d8c02d17 	ldw	r3,180(sp)
    1530:	d8002785 	stb	zero,158(sp)
    1534:	1c000017 	ldw	r16,0(r3)
    1538:	1cc00104 	addi	r19,r3,4
    153c:	80041926 	beq	r16,zero,25a4 <___vfprintf_internal_r+0x1c90>
    1540:	d9002917 	ldw	r4,164(sp)
    1544:	2003d016 	blt	r4,zero,2488 <___vfprintf_internal_r+0x1b74>
    1548:	200d883a 	mov	r6,r4
    154c:	000b883a 	mov	r5,zero
    1550:	8009883a 	mov	r4,r16
    1554:	da003d15 	stw	r8,244(sp)
    1558:	00061240 	call	6124 <memchr>
    155c:	da003d17 	ldw	r8,244(sp)
    1560:	10045426 	beq	r2,zero,26b4 <___vfprintf_internal_r+0x1da0>
    1564:	1405c83a 	sub	r2,r2,r16
    1568:	d8802e15 	stw	r2,184(sp)
    156c:	1003cc16 	blt	r2,zero,24a0 <___vfprintf_internal_r+0x1b8c>
    1570:	df002783 	ldbu	fp,158(sp)
    1574:	d8802a15 	stw	r2,168(sp)
    1578:	dcc02d15 	stw	r19,180(sp)
    157c:	d8002915 	stw	zero,164(sp)
    1580:	d8003215 	stw	zero,200(sp)
    1584:	003eb006 	br	1048 <__alt_data_end+0xfffe1048>
    1588:	18c03fcc 	andi	r3,r3,255
    158c:	183f9b26 	beq	r3,zero,13fc <__alt_data_end+0xfffe13fc>
    1590:	d9c02785 	stb	r7,158(sp)
    1594:	003f9906 	br	13fc <__alt_data_end+0xfffe13fc>
    1598:	18c03fcc 	andi	r3,r3,255
    159c:	1805551e 	bne	r3,zero,2af4 <___vfprintf_internal_r+0x21e0>
    15a0:	01400074 	movhi	r5,1
    15a4:	297dbd04 	addi	r5,r5,-2316
    15a8:	d9403915 	stw	r5,228(sp)
    15ac:	9080080c 	andi	r2,r18,32
    15b0:	103fae1e 	bne	r2,zero,146c <__alt_data_end+0xfffe146c>
    15b4:	9080040c 	andi	r2,r18,16
    15b8:	1002de26 	beq	r2,zero,2134 <___vfprintf_internal_r+0x1820>
    15bc:	d8c02d17 	ldw	r3,180(sp)
    15c0:	002d883a 	mov	r22,zero
    15c4:	1cc00017 	ldw	r19,0(r3)
    15c8:	18c00104 	addi	r3,r3,4
    15cc:	d8c02d15 	stw	r3,180(sp)
    15d0:	003fab06 	br	1480 <__alt_data_end+0xfffe1480>
    15d4:	38803fcc 	andi	r2,r7,255
    15d8:	1080201c 	xori	r2,r2,128
    15dc:	10bfe004 	addi	r2,r2,-128
    15e0:	1002d21e 	bne	r2,zero,212c <___vfprintf_internal_r+0x1818>
    15e4:	00c00044 	movi	r3,1
    15e8:	01c00804 	movi	r7,32
    15ec:	ac400007 	ldb	r17,0(r21)
    15f0:	003d2906 	br	a98 <__alt_data_end+0xfffe0a98>
    15f4:	94800054 	ori	r18,r18,1
    15f8:	ac400007 	ldb	r17,0(r21)
    15fc:	003d2606 	br	a98 <__alt_data_end+0xfffe0a98>
    1600:	18c03fcc 	andi	r3,r3,255
    1604:	183e0526 	beq	r3,zero,e1c <__alt_data_end+0xfffe0e1c>
    1608:	d9c02785 	stb	r7,158(sp)
    160c:	003e0306 	br	e1c <__alt_data_end+0xfffe0e1c>
    1610:	94801014 	ori	r18,r18,64
    1614:	ac400007 	ldb	r17,0(r21)
    1618:	003d1f06 	br	a98 <__alt_data_end+0xfffe0a98>
    161c:	ac400007 	ldb	r17,0(r21)
    1620:	8a438726 	beq	r17,r9,2440 <___vfprintf_internal_r+0x1b2c>
    1624:	94800414 	ori	r18,r18,16
    1628:	003d1b06 	br	a98 <__alt_data_end+0xfffe0a98>
    162c:	18c03fcc 	andi	r3,r3,255
    1630:	1805341e 	bne	r3,zero,2b04 <___vfprintf_internal_r+0x21f0>
    1634:	9080080c 	andi	r2,r18,32
    1638:	1002cd26 	beq	r2,zero,2170 <___vfprintf_internal_r+0x185c>
    163c:	d9402d17 	ldw	r5,180(sp)
    1640:	d9002f17 	ldw	r4,188(sp)
    1644:	28800017 	ldw	r2,0(r5)
    1648:	2007d7fa 	srai	r3,r4,31
    164c:	29400104 	addi	r5,r5,4
    1650:	d9402d15 	stw	r5,180(sp)
    1654:	11000015 	stw	r4,0(r2)
    1658:	10c00115 	stw	r3,4(r2)
    165c:	003ce506 	br	9f4 <__alt_data_end+0xfffe09f4>
    1660:	d8c02d17 	ldw	r3,180(sp)
    1664:	d9002d17 	ldw	r4,180(sp)
    1668:	d8002785 	stb	zero,158(sp)
    166c:	18800017 	ldw	r2,0(r3)
    1670:	21000104 	addi	r4,r4,4
    1674:	00c00044 	movi	r3,1
    1678:	d8c02a15 	stw	r3,168(sp)
    167c:	d8801405 	stb	r2,80(sp)
    1680:	d9002d15 	stw	r4,180(sp)
    1684:	d8c02e15 	stw	r3,184(sp)
    1688:	d8002915 	stw	zero,164(sp)
    168c:	d8003215 	stw	zero,200(sp)
    1690:	dc001404 	addi	r16,sp,80
    1694:	0039883a 	mov	fp,zero
    1698:	003e7206 	br	1064 <__alt_data_end+0xfffe1064>
    169c:	01000074 	movhi	r4,1
    16a0:	213dbd04 	addi	r4,r4,-2316
    16a4:	0039883a 	mov	fp,zero
    16a8:	d9003915 	stw	r4,228(sp)
    16ac:	04401e04 	movi	r17,120
    16b0:	003f8206 	br	14bc <__alt_data_end+0xfffe14bc>
    16b4:	18c03fcc 	andi	r3,r3,255
    16b8:	1805061e 	bne	r3,zero,2ad4 <___vfprintf_internal_r+0x21c0>
    16bc:	883d9126 	beq	r17,zero,d04 <__alt_data_end+0xfffe0d04>
    16c0:	00c00044 	movi	r3,1
    16c4:	d8c02a15 	stw	r3,168(sp)
    16c8:	dc401405 	stb	r17,80(sp)
    16cc:	d8002785 	stb	zero,158(sp)
    16d0:	003fec06 	br	1684 <__alt_data_end+0xfffe1684>
    16d4:	01400074 	movhi	r5,1
    16d8:	297dbd04 	addi	r5,r5,-2316
    16dc:	d9403915 	stw	r5,228(sp)
    16e0:	d8c02d15 	stw	r3,180(sp)
    16e4:	1025883a 	mov	r18,r2
    16e8:	04401e04 	movi	r17,120
    16ec:	9d84b03a 	or	r2,r19,r22
    16f0:	1000fc1e 	bne	r2,zero,1ae4 <___vfprintf_internal_r+0x11d0>
    16f4:	0039883a 	mov	fp,zero
    16f8:	00800084 	movi	r2,2
    16fc:	10803fcc 	andi	r2,r2,255
    1700:	00c00044 	movi	r3,1
    1704:	10c20f26 	beq	r2,r3,1f44 <___vfprintf_internal_r+0x1630>
    1708:	00c00084 	movi	r3,2
    170c:	10fd6326 	beq	r2,r3,c9c <__alt_data_end+0xfffe0c9c>
    1710:	003e2d06 	br	fc8 <__alt_data_end+0xfffe0fc8>
    1714:	d8c02017 	ldw	r3,128(sp)
    1718:	003e9306 	br	1168 <__alt_data_end+0xfffe1168>
    171c:	00801944 	movi	r2,101
    1720:	14407e0e 	bge	r2,r17,191c <___vfprintf_internal_r+0x1008>
    1724:	d9003617 	ldw	r4,216(sp)
    1728:	d9403817 	ldw	r5,224(sp)
    172c:	000d883a 	mov	r6,zero
    1730:	000f883a 	mov	r7,zero
    1734:	d8c03c15 	stw	r3,240(sp)
    1738:	da003d15 	stw	r8,244(sp)
    173c:	000b9d40 	call	b9d4 <__eqdf2>
    1740:	d8c03c17 	ldw	r3,240(sp)
    1744:	da003d17 	ldw	r8,244(sp)
    1748:	1000f71e 	bne	r2,zero,1b28 <___vfprintf_internal_r+0x1214>
    174c:	d8801f17 	ldw	r2,124(sp)
    1750:	01000074 	movhi	r4,1
    1754:	213dc404 	addi	r4,r4,-2288
    1758:	18c00044 	addi	r3,r3,1
    175c:	10800044 	addi	r2,r2,1
    1760:	41000015 	stw	r4,0(r8)
    1764:	01000044 	movi	r4,1
    1768:	41000115 	stw	r4,4(r8)
    176c:	d8c02015 	stw	r3,128(sp)
    1770:	d8801f15 	stw	r2,124(sp)
    1774:	010001c4 	movi	r4,7
    1778:	2082b816 	blt	r4,r2,225c <___vfprintf_internal_r+0x1948>
    177c:	42000204 	addi	r8,r8,8
    1780:	d8802617 	ldw	r2,152(sp)
    1784:	d9403317 	ldw	r5,204(sp)
    1788:	11400216 	blt	r2,r5,1794 <___vfprintf_internal_r+0xe80>
    178c:	9080004c 	andi	r2,r18,1
    1790:	103ed526 	beq	r2,zero,12e8 <__alt_data_end+0xfffe12e8>
    1794:	d8803717 	ldw	r2,220(sp)
    1798:	d9003417 	ldw	r4,208(sp)
    179c:	d9403717 	ldw	r5,220(sp)
    17a0:	1887883a 	add	r3,r3,r2
    17a4:	d8801f17 	ldw	r2,124(sp)
    17a8:	41000015 	stw	r4,0(r8)
    17ac:	41400115 	stw	r5,4(r8)
    17b0:	10800044 	addi	r2,r2,1
    17b4:	d8c02015 	stw	r3,128(sp)
    17b8:	d8801f15 	stw	r2,124(sp)
    17bc:	010001c4 	movi	r4,7
    17c0:	20832916 	blt	r4,r2,2468 <___vfprintf_internal_r+0x1b54>
    17c4:	42000204 	addi	r8,r8,8
    17c8:	d8803317 	ldw	r2,204(sp)
    17cc:	143fffc4 	addi	r16,r2,-1
    17d0:	043ec50e 	bge	zero,r16,12e8 <__alt_data_end+0xfffe12e8>
    17d4:	04400404 	movi	r17,16
    17d8:	d8801f17 	ldw	r2,124(sp)
    17dc:	8c00880e 	bge	r17,r16,1a00 <___vfprintf_internal_r+0x10ec>
    17e0:	01400074 	movhi	r5,1
    17e4:	297dc484 	addi	r5,r5,-2286
    17e8:	d9402b15 	stw	r5,172(sp)
    17ec:	058001c4 	movi	r22,7
    17f0:	dcc02c17 	ldw	r19,176(sp)
    17f4:	00000306 	br	1804 <___vfprintf_internal_r+0xef0>
    17f8:	42000204 	addi	r8,r8,8
    17fc:	843ffc04 	addi	r16,r16,-16
    1800:	8c00820e 	bge	r17,r16,1a0c <___vfprintf_internal_r+0x10f8>
    1804:	18c00404 	addi	r3,r3,16
    1808:	10800044 	addi	r2,r2,1
    180c:	45000015 	stw	r20,0(r8)
    1810:	44400115 	stw	r17,4(r8)
    1814:	d8c02015 	stw	r3,128(sp)
    1818:	d8801f15 	stw	r2,124(sp)
    181c:	b0bff60e 	bge	r22,r2,17f8 <__alt_data_end+0xfffe17f8>
    1820:	d9801e04 	addi	r6,sp,120
    1824:	b80b883a 	mov	r5,r23
    1828:	9809883a 	mov	r4,r19
    182c:	0007f100 	call	7f10 <__sprint_r>
    1830:	103d3a1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1834:	d8c02017 	ldw	r3,128(sp)
    1838:	d8801f17 	ldw	r2,124(sp)
    183c:	da000404 	addi	r8,sp,16
    1840:	003fee06 	br	17fc <__alt_data_end+0xfffe17fc>
    1844:	d9403117 	ldw	r5,196(sp)
    1848:	d8802a17 	ldw	r2,168(sp)
    184c:	28adc83a 	sub	r22,r5,r2
    1850:	05be630e 	bge	zero,r22,11e0 <__alt_data_end+0xfffe11e0>
    1854:	07000404 	movi	fp,16
    1858:	d8801f17 	ldw	r2,124(sp)
    185c:	e5838f0e 	bge	fp,r22,269c <___vfprintf_internal_r+0x1d88>
    1860:	01400074 	movhi	r5,1
    1864:	297dc484 	addi	r5,r5,-2286
    1868:	dc403015 	stw	r17,192(sp)
    186c:	d9402b15 	stw	r5,172(sp)
    1870:	b023883a 	mov	r17,r22
    1874:	04c001c4 	movi	r19,7
    1878:	a82d883a 	mov	r22,r21
    187c:	902b883a 	mov	r21,r18
    1880:	8025883a 	mov	r18,r16
    1884:	dc002c17 	ldw	r16,176(sp)
    1888:	00000306 	br	1898 <___vfprintf_internal_r+0xf84>
    188c:	8c7ffc04 	addi	r17,r17,-16
    1890:	42000204 	addi	r8,r8,8
    1894:	e440110e 	bge	fp,r17,18dc <___vfprintf_internal_r+0xfc8>
    1898:	18c00404 	addi	r3,r3,16
    189c:	10800044 	addi	r2,r2,1
    18a0:	45000015 	stw	r20,0(r8)
    18a4:	47000115 	stw	fp,4(r8)
    18a8:	d8c02015 	stw	r3,128(sp)
    18ac:	d8801f15 	stw	r2,124(sp)
    18b0:	98bff60e 	bge	r19,r2,188c <__alt_data_end+0xfffe188c>
    18b4:	d9801e04 	addi	r6,sp,120
    18b8:	b80b883a 	mov	r5,r23
    18bc:	8009883a 	mov	r4,r16
    18c0:	0007f100 	call	7f10 <__sprint_r>
    18c4:	103d151e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    18c8:	8c7ffc04 	addi	r17,r17,-16
    18cc:	d8c02017 	ldw	r3,128(sp)
    18d0:	d8801f17 	ldw	r2,124(sp)
    18d4:	da000404 	addi	r8,sp,16
    18d8:	e47fef16 	blt	fp,r17,1898 <__alt_data_end+0xfffe1898>
    18dc:	9021883a 	mov	r16,r18
    18e0:	a825883a 	mov	r18,r21
    18e4:	b02b883a 	mov	r21,r22
    18e8:	882d883a 	mov	r22,r17
    18ec:	dc403017 	ldw	r17,192(sp)
    18f0:	d9002b17 	ldw	r4,172(sp)
    18f4:	1d87883a 	add	r3,r3,r22
    18f8:	10800044 	addi	r2,r2,1
    18fc:	41000015 	stw	r4,0(r8)
    1900:	45800115 	stw	r22,4(r8)
    1904:	d8c02015 	stw	r3,128(sp)
    1908:	d8801f15 	stw	r2,124(sp)
    190c:	010001c4 	movi	r4,7
    1910:	20818e16 	blt	r4,r2,1f4c <___vfprintf_internal_r+0x1638>
    1914:	42000204 	addi	r8,r8,8
    1918:	003e3106 	br	11e0 <__alt_data_end+0xfffe11e0>
    191c:	d9403317 	ldw	r5,204(sp)
    1920:	00800044 	movi	r2,1
    1924:	18c00044 	addi	r3,r3,1
    1928:	1141530e 	bge	r2,r5,1e78 <___vfprintf_internal_r+0x1564>
    192c:	dc401f17 	ldw	r17,124(sp)
    1930:	00800044 	movi	r2,1
    1934:	40800115 	stw	r2,4(r8)
    1938:	8c400044 	addi	r17,r17,1
    193c:	44000015 	stw	r16,0(r8)
    1940:	d8c02015 	stw	r3,128(sp)
    1944:	dc401f15 	stw	r17,124(sp)
    1948:	008001c4 	movi	r2,7
    194c:	14416b16 	blt	r2,r17,1efc <___vfprintf_internal_r+0x15e8>
    1950:	42000204 	addi	r8,r8,8
    1954:	d8803717 	ldw	r2,220(sp)
    1958:	d9003417 	ldw	r4,208(sp)
    195c:	8c400044 	addi	r17,r17,1
    1960:	10c7883a 	add	r3,r2,r3
    1964:	40800115 	stw	r2,4(r8)
    1968:	41000015 	stw	r4,0(r8)
    196c:	d8c02015 	stw	r3,128(sp)
    1970:	dc401f15 	stw	r17,124(sp)
    1974:	008001c4 	movi	r2,7
    1978:	14416916 	blt	r2,r17,1f20 <___vfprintf_internal_r+0x160c>
    197c:	45800204 	addi	r22,r8,8
    1980:	d9003617 	ldw	r4,216(sp)
    1984:	d9403817 	ldw	r5,224(sp)
    1988:	000d883a 	mov	r6,zero
    198c:	000f883a 	mov	r7,zero
    1990:	d8c03c15 	stw	r3,240(sp)
    1994:	000b9d40 	call	b9d4 <__eqdf2>
    1998:	d8c03c17 	ldw	r3,240(sp)
    199c:	1000bc26 	beq	r2,zero,1c90 <___vfprintf_internal_r+0x137c>
    19a0:	d9403317 	ldw	r5,204(sp)
    19a4:	84000044 	addi	r16,r16,1
    19a8:	8c400044 	addi	r17,r17,1
    19ac:	28bfffc4 	addi	r2,r5,-1
    19b0:	1887883a 	add	r3,r3,r2
    19b4:	b0800115 	stw	r2,4(r22)
    19b8:	b4000015 	stw	r16,0(r22)
    19bc:	d8c02015 	stw	r3,128(sp)
    19c0:	dc401f15 	stw	r17,124(sp)
    19c4:	008001c4 	movi	r2,7
    19c8:	14414316 	blt	r2,r17,1ed8 <___vfprintf_internal_r+0x15c4>
    19cc:	b5800204 	addi	r22,r22,8
    19d0:	d9003a17 	ldw	r4,232(sp)
    19d4:	df0022c4 	addi	fp,sp,139
    19d8:	8c400044 	addi	r17,r17,1
    19dc:	20c7883a 	add	r3,r4,r3
    19e0:	b7000015 	stw	fp,0(r22)
    19e4:	b1000115 	stw	r4,4(r22)
    19e8:	d8c02015 	stw	r3,128(sp)
    19ec:	dc401f15 	stw	r17,124(sp)
    19f0:	008001c4 	movi	r2,7
    19f4:	14400e16 	blt	r2,r17,1a30 <___vfprintf_internal_r+0x111c>
    19f8:	b2000204 	addi	r8,r22,8
    19fc:	003e3a06 	br	12e8 <__alt_data_end+0xfffe12e8>
    1a00:	01000074 	movhi	r4,1
    1a04:	213dc484 	addi	r4,r4,-2286
    1a08:	d9002b15 	stw	r4,172(sp)
    1a0c:	d9002b17 	ldw	r4,172(sp)
    1a10:	1c07883a 	add	r3,r3,r16
    1a14:	44000115 	stw	r16,4(r8)
    1a18:	41000015 	stw	r4,0(r8)
    1a1c:	10800044 	addi	r2,r2,1
    1a20:	d8c02015 	stw	r3,128(sp)
    1a24:	d8801f15 	stw	r2,124(sp)
    1a28:	010001c4 	movi	r4,7
    1a2c:	20be2d0e 	bge	r4,r2,12e4 <__alt_data_end+0xfffe12e4>
    1a30:	d9002c17 	ldw	r4,176(sp)
    1a34:	d9801e04 	addi	r6,sp,120
    1a38:	b80b883a 	mov	r5,r23
    1a3c:	0007f100 	call	7f10 <__sprint_r>
    1a40:	103cb61e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1a44:	d8c02017 	ldw	r3,128(sp)
    1a48:	da000404 	addi	r8,sp,16
    1a4c:	003e2606 	br	12e8 <__alt_data_end+0xfffe12e8>
    1a50:	d9002c17 	ldw	r4,176(sp)
    1a54:	d9801e04 	addi	r6,sp,120
    1a58:	b80b883a 	mov	r5,r23
    1a5c:	0007f100 	call	7f10 <__sprint_r>
    1a60:	103e5d26 	beq	r2,zero,13d8 <__alt_data_end+0xfffe13d8>
    1a64:	003cad06 	br	d1c <__alt_data_end+0xfffe0d1c>
    1a68:	d9002c17 	ldw	r4,176(sp)
    1a6c:	d9801e04 	addi	r6,sp,120
    1a70:	b80b883a 	mov	r5,r23
    1a74:	0007f100 	call	7f10 <__sprint_r>
    1a78:	103ca81e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1a7c:	d8c02017 	ldw	r3,128(sp)
    1a80:	da000404 	addi	r8,sp,16
    1a84:	003e0b06 	br	12b4 <__alt_data_end+0xfffe12b4>
    1a88:	d9002c17 	ldw	r4,176(sp)
    1a8c:	d9801e04 	addi	r6,sp,120
    1a90:	b80b883a 	mov	r5,r23
    1a94:	0007f100 	call	7f10 <__sprint_r>
    1a98:	103ca01e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1a9c:	d8c02017 	ldw	r3,128(sp)
    1aa0:	da000404 	addi	r8,sp,16
    1aa4:	003dbd06 	br	119c <__alt_data_end+0xfffe119c>
    1aa8:	d9002c17 	ldw	r4,176(sp)
    1aac:	d9801e04 	addi	r6,sp,120
    1ab0:	b80b883a 	mov	r5,r23
    1ab4:	0007f100 	call	7f10 <__sprint_r>
    1ab8:	103c981e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1abc:	d8c02017 	ldw	r3,128(sp)
    1ac0:	da000404 	addi	r8,sp,16
    1ac4:	003dc306 	br	11d4 <__alt_data_end+0xfffe11d4>
    1ac8:	d8802917 	ldw	r2,164(sp)
    1acc:	d8002785 	stb	zero,158(sp)
    1ad0:	103f0616 	blt	r2,zero,16ec <__alt_data_end+0xfffe16ec>
    1ad4:	00ffdfc4 	movi	r3,-129
    1ad8:	9d84b03a 	or	r2,r19,r22
    1adc:	90e4703a 	and	r18,r18,r3
    1ae0:	103c6b26 	beq	r2,zero,c90 <__alt_data_end+0xfffe0c90>
    1ae4:	0039883a 	mov	fp,zero
    1ae8:	003e7406 	br	14bc <__alt_data_end+0xfffe14bc>
    1aec:	9080040c 	andi	r2,r18,16
    1af0:	1001b326 	beq	r2,zero,21c0 <___vfprintf_internal_r+0x18ac>
    1af4:	d9002d17 	ldw	r4,180(sp)
    1af8:	d9402917 	ldw	r5,164(sp)
    1afc:	d8002785 	stb	zero,158(sp)
    1b00:	20800104 	addi	r2,r4,4
    1b04:	24c00017 	ldw	r19,0(r4)
    1b08:	002d883a 	mov	r22,zero
    1b0c:	2801b516 	blt	r5,zero,21e4 <___vfprintf_internal_r+0x18d0>
    1b10:	00ffdfc4 	movi	r3,-129
    1b14:	d8802d15 	stw	r2,180(sp)
    1b18:	90e4703a 	and	r18,r18,r3
    1b1c:	983d2726 	beq	r19,zero,fbc <__alt_data_end+0xfffe0fbc>
    1b20:	0039883a 	mov	fp,zero
    1b24:	003d2a06 	br	fd0 <__alt_data_end+0xfffe0fd0>
    1b28:	dc402617 	ldw	r17,152(sp)
    1b2c:	0441d30e 	bge	zero,r17,227c <___vfprintf_internal_r+0x1968>
    1b30:	dc403217 	ldw	r17,200(sp)
    1b34:	d8803317 	ldw	r2,204(sp)
    1b38:	1440010e 	bge	r2,r17,1b40 <___vfprintf_internal_r+0x122c>
    1b3c:	1023883a 	mov	r17,r2
    1b40:	04400a0e 	bge	zero,r17,1b6c <___vfprintf_internal_r+0x1258>
    1b44:	d8801f17 	ldw	r2,124(sp)
    1b48:	1c47883a 	add	r3,r3,r17
    1b4c:	44000015 	stw	r16,0(r8)
    1b50:	10800044 	addi	r2,r2,1
    1b54:	44400115 	stw	r17,4(r8)
    1b58:	d8c02015 	stw	r3,128(sp)
    1b5c:	d8801f15 	stw	r2,124(sp)
    1b60:	010001c4 	movi	r4,7
    1b64:	20826516 	blt	r4,r2,24fc <___vfprintf_internal_r+0x1be8>
    1b68:	42000204 	addi	r8,r8,8
    1b6c:	88026116 	blt	r17,zero,24f4 <___vfprintf_internal_r+0x1be0>
    1b70:	d9003217 	ldw	r4,200(sp)
    1b74:	2463c83a 	sub	r17,r4,r17
    1b78:	04407b0e 	bge	zero,r17,1d68 <___vfprintf_internal_r+0x1454>
    1b7c:	05800404 	movi	r22,16
    1b80:	d8801f17 	ldw	r2,124(sp)
    1b84:	b4419d0e 	bge	r22,r17,21fc <___vfprintf_internal_r+0x18e8>
    1b88:	01000074 	movhi	r4,1
    1b8c:	213dc484 	addi	r4,r4,-2286
    1b90:	d9002b15 	stw	r4,172(sp)
    1b94:	070001c4 	movi	fp,7
    1b98:	dcc02c17 	ldw	r19,176(sp)
    1b9c:	00000306 	br	1bac <___vfprintf_internal_r+0x1298>
    1ba0:	42000204 	addi	r8,r8,8
    1ba4:	8c7ffc04 	addi	r17,r17,-16
    1ba8:	b441970e 	bge	r22,r17,2208 <___vfprintf_internal_r+0x18f4>
    1bac:	18c00404 	addi	r3,r3,16
    1bb0:	10800044 	addi	r2,r2,1
    1bb4:	45000015 	stw	r20,0(r8)
    1bb8:	45800115 	stw	r22,4(r8)
    1bbc:	d8c02015 	stw	r3,128(sp)
    1bc0:	d8801f15 	stw	r2,124(sp)
    1bc4:	e0bff60e 	bge	fp,r2,1ba0 <__alt_data_end+0xfffe1ba0>
    1bc8:	d9801e04 	addi	r6,sp,120
    1bcc:	b80b883a 	mov	r5,r23
    1bd0:	9809883a 	mov	r4,r19
    1bd4:	0007f100 	call	7f10 <__sprint_r>
    1bd8:	103c501e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1bdc:	d8c02017 	ldw	r3,128(sp)
    1be0:	d8801f17 	ldw	r2,124(sp)
    1be4:	da000404 	addi	r8,sp,16
    1be8:	003fee06 	br	1ba4 <__alt_data_end+0xfffe1ba4>
    1bec:	d9002c17 	ldw	r4,176(sp)
    1bf0:	d9801e04 	addi	r6,sp,120
    1bf4:	b80b883a 	mov	r5,r23
    1bf8:	0007f100 	call	7f10 <__sprint_r>
    1bfc:	103c471e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1c00:	d8c02017 	ldw	r3,128(sp)
    1c04:	df002787 	ldb	fp,158(sp)
    1c08:	da000404 	addi	r8,sp,16
    1c0c:	003d5606 	br	1168 <__alt_data_end+0xfffe1168>
    1c10:	9080040c 	andi	r2,r18,16
    1c14:	10016126 	beq	r2,zero,219c <___vfprintf_internal_r+0x1888>
    1c18:	d8802d17 	ldw	r2,180(sp)
    1c1c:	14c00017 	ldw	r19,0(r2)
    1c20:	10800104 	addi	r2,r2,4
    1c24:	d8802d15 	stw	r2,180(sp)
    1c28:	982dd7fa 	srai	r22,r19,31
    1c2c:	b005883a 	mov	r2,r22
    1c30:	003c8206 	br	e3c <__alt_data_end+0xfffe0e3c>
    1c34:	9080040c 	andi	r2,r18,16
    1c38:	10003526 	beq	r2,zero,1d10 <___vfprintf_internal_r+0x13fc>
    1c3c:	d9402d17 	ldw	r5,180(sp)
    1c40:	d8c02917 	ldw	r3,164(sp)
    1c44:	d8002785 	stb	zero,158(sp)
    1c48:	28800104 	addi	r2,r5,4
    1c4c:	2cc00017 	ldw	r19,0(r5)
    1c50:	002d883a 	mov	r22,zero
    1c54:	18003716 	blt	r3,zero,1d34 <___vfprintf_internal_r+0x1420>
    1c58:	00ffdfc4 	movi	r3,-129
    1c5c:	d8802d15 	stw	r2,180(sp)
    1c60:	90e4703a 	and	r18,r18,r3
    1c64:	0039883a 	mov	fp,zero
    1c68:	983df326 	beq	r19,zero,1438 <__alt_data_end+0xfffe1438>
    1c6c:	00800244 	movi	r2,9
    1c70:	14fc7b36 	bltu	r2,r19,e60 <__alt_data_end+0xfffe0e60>
    1c74:	d8c02817 	ldw	r3,160(sp)
    1c78:	dc001dc4 	addi	r16,sp,119
    1c7c:	9cc00c04 	addi	r19,r19,48
    1c80:	1c07c83a 	sub	r3,r3,r16
    1c84:	dcc01dc5 	stb	r19,119(sp)
    1c88:	d8c02e15 	stw	r3,184(sp)
    1c8c:	003ce806 	br	1030 <__alt_data_end+0xfffe1030>
    1c90:	d8803317 	ldw	r2,204(sp)
    1c94:	143fffc4 	addi	r16,r2,-1
    1c98:	043f4d0e 	bge	zero,r16,19d0 <__alt_data_end+0xfffe19d0>
    1c9c:	07000404 	movi	fp,16
    1ca0:	e400810e 	bge	fp,r16,1ea8 <___vfprintf_internal_r+0x1594>
    1ca4:	01400074 	movhi	r5,1
    1ca8:	297dc484 	addi	r5,r5,-2286
    1cac:	d9402b15 	stw	r5,172(sp)
    1cb0:	01c001c4 	movi	r7,7
    1cb4:	dcc02c17 	ldw	r19,176(sp)
    1cb8:	00000306 	br	1cc8 <___vfprintf_internal_r+0x13b4>
    1cbc:	b5800204 	addi	r22,r22,8
    1cc0:	843ffc04 	addi	r16,r16,-16
    1cc4:	e4007b0e 	bge	fp,r16,1eb4 <___vfprintf_internal_r+0x15a0>
    1cc8:	18c00404 	addi	r3,r3,16
    1ccc:	8c400044 	addi	r17,r17,1
    1cd0:	b5000015 	stw	r20,0(r22)
    1cd4:	b7000115 	stw	fp,4(r22)
    1cd8:	d8c02015 	stw	r3,128(sp)
    1cdc:	dc401f15 	stw	r17,124(sp)
    1ce0:	3c7ff60e 	bge	r7,r17,1cbc <__alt_data_end+0xfffe1cbc>
    1ce4:	d9801e04 	addi	r6,sp,120
    1ce8:	b80b883a 	mov	r5,r23
    1cec:	9809883a 	mov	r4,r19
    1cf0:	d9c03c15 	stw	r7,240(sp)
    1cf4:	0007f100 	call	7f10 <__sprint_r>
    1cf8:	d9c03c17 	ldw	r7,240(sp)
    1cfc:	103c071e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1d00:	d8c02017 	ldw	r3,128(sp)
    1d04:	dc401f17 	ldw	r17,124(sp)
    1d08:	dd800404 	addi	r22,sp,16
    1d0c:	003fec06 	br	1cc0 <__alt_data_end+0xfffe1cc0>
    1d10:	9080100c 	andi	r2,r18,64
    1d14:	d8002785 	stb	zero,158(sp)
    1d18:	10010e26 	beq	r2,zero,2154 <___vfprintf_internal_r+0x1840>
    1d1c:	d9002d17 	ldw	r4,180(sp)
    1d20:	d9402917 	ldw	r5,164(sp)
    1d24:	002d883a 	mov	r22,zero
    1d28:	20800104 	addi	r2,r4,4
    1d2c:	24c0000b 	ldhu	r19,0(r4)
    1d30:	283fc90e 	bge	r5,zero,1c58 <__alt_data_end+0xfffe1c58>
    1d34:	d8802d15 	stw	r2,180(sp)
    1d38:	0039883a 	mov	fp,zero
    1d3c:	9d84b03a 	or	r2,r19,r22
    1d40:	103c461e 	bne	r2,zero,e5c <__alt_data_end+0xfffe0e5c>
    1d44:	00800044 	movi	r2,1
    1d48:	003e6c06 	br	16fc <__alt_data_end+0xfffe16fc>
    1d4c:	d9002c17 	ldw	r4,176(sp)
    1d50:	d9801e04 	addi	r6,sp,120
    1d54:	b80b883a 	mov	r5,r23
    1d58:	0007f100 	call	7f10 <__sprint_r>
    1d5c:	103bef1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1d60:	d8c02017 	ldw	r3,128(sp)
    1d64:	da000404 	addi	r8,sp,16
    1d68:	d9003217 	ldw	r4,200(sp)
    1d6c:	d8802617 	ldw	r2,152(sp)
    1d70:	d9403317 	ldw	r5,204(sp)
    1d74:	8123883a 	add	r17,r16,r4
    1d78:	11400216 	blt	r2,r5,1d84 <___vfprintf_internal_r+0x1470>
    1d7c:	9100004c 	andi	r4,r18,1
    1d80:	20000d26 	beq	r4,zero,1db8 <___vfprintf_internal_r+0x14a4>
    1d84:	d9003717 	ldw	r4,220(sp)
    1d88:	d9403417 	ldw	r5,208(sp)
    1d8c:	1907883a 	add	r3,r3,r4
    1d90:	d9001f17 	ldw	r4,124(sp)
    1d94:	41400015 	stw	r5,0(r8)
    1d98:	d9403717 	ldw	r5,220(sp)
    1d9c:	21000044 	addi	r4,r4,1
    1da0:	d8c02015 	stw	r3,128(sp)
    1da4:	41400115 	stw	r5,4(r8)
    1da8:	d9001f15 	stw	r4,124(sp)
    1dac:	014001c4 	movi	r5,7
    1db0:	2901e816 	blt	r5,r4,2554 <___vfprintf_internal_r+0x1c40>
    1db4:	42000204 	addi	r8,r8,8
    1db8:	d9003317 	ldw	r4,204(sp)
    1dbc:	8121883a 	add	r16,r16,r4
    1dc0:	2085c83a 	sub	r2,r4,r2
    1dc4:	8461c83a 	sub	r16,r16,r17
    1dc8:	1400010e 	bge	r2,r16,1dd0 <___vfprintf_internal_r+0x14bc>
    1dcc:	1021883a 	mov	r16,r2
    1dd0:	04000a0e 	bge	zero,r16,1dfc <___vfprintf_internal_r+0x14e8>
    1dd4:	d9001f17 	ldw	r4,124(sp)
    1dd8:	1c07883a 	add	r3,r3,r16
    1ddc:	44400015 	stw	r17,0(r8)
    1de0:	21000044 	addi	r4,r4,1
    1de4:	44000115 	stw	r16,4(r8)
    1de8:	d8c02015 	stw	r3,128(sp)
    1dec:	d9001f15 	stw	r4,124(sp)
    1df0:	014001c4 	movi	r5,7
    1df4:	2901fb16 	blt	r5,r4,25e4 <___vfprintf_internal_r+0x1cd0>
    1df8:	42000204 	addi	r8,r8,8
    1dfc:	8001f716 	blt	r16,zero,25dc <___vfprintf_internal_r+0x1cc8>
    1e00:	1421c83a 	sub	r16,r2,r16
    1e04:	043d380e 	bge	zero,r16,12e8 <__alt_data_end+0xfffe12e8>
    1e08:	04400404 	movi	r17,16
    1e0c:	d8801f17 	ldw	r2,124(sp)
    1e10:	8c3efb0e 	bge	r17,r16,1a00 <__alt_data_end+0xfffe1a00>
    1e14:	01400074 	movhi	r5,1
    1e18:	297dc484 	addi	r5,r5,-2286
    1e1c:	d9402b15 	stw	r5,172(sp)
    1e20:	058001c4 	movi	r22,7
    1e24:	dcc02c17 	ldw	r19,176(sp)
    1e28:	00000306 	br	1e38 <___vfprintf_internal_r+0x1524>
    1e2c:	42000204 	addi	r8,r8,8
    1e30:	843ffc04 	addi	r16,r16,-16
    1e34:	8c3ef50e 	bge	r17,r16,1a0c <__alt_data_end+0xfffe1a0c>
    1e38:	18c00404 	addi	r3,r3,16
    1e3c:	10800044 	addi	r2,r2,1
    1e40:	45000015 	stw	r20,0(r8)
    1e44:	44400115 	stw	r17,4(r8)
    1e48:	d8c02015 	stw	r3,128(sp)
    1e4c:	d8801f15 	stw	r2,124(sp)
    1e50:	b0bff60e 	bge	r22,r2,1e2c <__alt_data_end+0xfffe1e2c>
    1e54:	d9801e04 	addi	r6,sp,120
    1e58:	b80b883a 	mov	r5,r23
    1e5c:	9809883a 	mov	r4,r19
    1e60:	0007f100 	call	7f10 <__sprint_r>
    1e64:	103bad1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1e68:	d8c02017 	ldw	r3,128(sp)
    1e6c:	d8801f17 	ldw	r2,124(sp)
    1e70:	da000404 	addi	r8,sp,16
    1e74:	003fee06 	br	1e30 <__alt_data_end+0xfffe1e30>
    1e78:	9088703a 	and	r4,r18,r2
    1e7c:	203eab1e 	bne	r4,zero,192c <__alt_data_end+0xfffe192c>
    1e80:	dc401f17 	ldw	r17,124(sp)
    1e84:	40800115 	stw	r2,4(r8)
    1e88:	44000015 	stw	r16,0(r8)
    1e8c:	8c400044 	addi	r17,r17,1
    1e90:	d8c02015 	stw	r3,128(sp)
    1e94:	dc401f15 	stw	r17,124(sp)
    1e98:	008001c4 	movi	r2,7
    1e9c:	14400e16 	blt	r2,r17,1ed8 <___vfprintf_internal_r+0x15c4>
    1ea0:	45800204 	addi	r22,r8,8
    1ea4:	003eca06 	br	19d0 <__alt_data_end+0xfffe19d0>
    1ea8:	01000074 	movhi	r4,1
    1eac:	213dc484 	addi	r4,r4,-2286
    1eb0:	d9002b15 	stw	r4,172(sp)
    1eb4:	d8802b17 	ldw	r2,172(sp)
    1eb8:	1c07883a 	add	r3,r3,r16
    1ebc:	8c400044 	addi	r17,r17,1
    1ec0:	b0800015 	stw	r2,0(r22)
    1ec4:	b4000115 	stw	r16,4(r22)
    1ec8:	d8c02015 	stw	r3,128(sp)
    1ecc:	dc401f15 	stw	r17,124(sp)
    1ed0:	008001c4 	movi	r2,7
    1ed4:	147ebd0e 	bge	r2,r17,19cc <__alt_data_end+0xfffe19cc>
    1ed8:	d9002c17 	ldw	r4,176(sp)
    1edc:	d9801e04 	addi	r6,sp,120
    1ee0:	b80b883a 	mov	r5,r23
    1ee4:	0007f100 	call	7f10 <__sprint_r>
    1ee8:	103b8c1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1eec:	d8c02017 	ldw	r3,128(sp)
    1ef0:	dc401f17 	ldw	r17,124(sp)
    1ef4:	dd800404 	addi	r22,sp,16
    1ef8:	003eb506 	br	19d0 <__alt_data_end+0xfffe19d0>
    1efc:	d9002c17 	ldw	r4,176(sp)
    1f00:	d9801e04 	addi	r6,sp,120
    1f04:	b80b883a 	mov	r5,r23
    1f08:	0007f100 	call	7f10 <__sprint_r>
    1f0c:	103b831e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1f10:	d8c02017 	ldw	r3,128(sp)
    1f14:	dc401f17 	ldw	r17,124(sp)
    1f18:	da000404 	addi	r8,sp,16
    1f1c:	003e8d06 	br	1954 <__alt_data_end+0xfffe1954>
    1f20:	d9002c17 	ldw	r4,176(sp)
    1f24:	d9801e04 	addi	r6,sp,120
    1f28:	b80b883a 	mov	r5,r23
    1f2c:	0007f100 	call	7f10 <__sprint_r>
    1f30:	103b7a1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1f34:	d8c02017 	ldw	r3,128(sp)
    1f38:	dc401f17 	ldw	r17,124(sp)
    1f3c:	dd800404 	addi	r22,sp,16
    1f40:	003e8f06 	br	1980 <__alt_data_end+0xfffe1980>
    1f44:	0027883a 	mov	r19,zero
    1f48:	003f4a06 	br	1c74 <__alt_data_end+0xfffe1c74>
    1f4c:	d9002c17 	ldw	r4,176(sp)
    1f50:	d9801e04 	addi	r6,sp,120
    1f54:	b80b883a 	mov	r5,r23
    1f58:	0007f100 	call	7f10 <__sprint_r>
    1f5c:	103b6f1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    1f60:	d8c02017 	ldw	r3,128(sp)
    1f64:	da000404 	addi	r8,sp,16
    1f68:	003c9d06 	br	11e0 <__alt_data_end+0xfffe11e0>
    1f6c:	04e7c83a 	sub	r19,zero,r19
    1f70:	9804c03a 	cmpne	r2,r19,zero
    1f74:	05adc83a 	sub	r22,zero,r22
    1f78:	b0adc83a 	sub	r22,r22,r2
    1f7c:	d8802917 	ldw	r2,164(sp)
    1f80:	07000b44 	movi	fp,45
    1f84:	df002785 	stb	fp,158(sp)
    1f88:	10017b16 	blt	r2,zero,2578 <___vfprintf_internal_r+0x1c64>
    1f8c:	00bfdfc4 	movi	r2,-129
    1f90:	90a4703a 	and	r18,r18,r2
    1f94:	003bb106 	br	e5c <__alt_data_end+0xfffe0e5c>
    1f98:	d9003617 	ldw	r4,216(sp)
    1f9c:	d9403817 	ldw	r5,224(sp)
    1fa0:	da003d15 	stw	r8,244(sp)
    1fa4:	0007b340 	call	7b34 <__fpclassifyd>
    1fa8:	da003d17 	ldw	r8,244(sp)
    1fac:	1000f026 	beq	r2,zero,2370 <___vfprintf_internal_r+0x1a5c>
    1fb0:	d9002917 	ldw	r4,164(sp)
    1fb4:	05bff7c4 	movi	r22,-33
    1fb8:	00bfffc4 	movi	r2,-1
    1fbc:	8dac703a 	and	r22,r17,r22
    1fc0:	20820026 	beq	r4,r2,27c4 <___vfprintf_internal_r+0x1eb0>
    1fc4:	008011c4 	movi	r2,71
    1fc8:	b081f726 	beq	r22,r2,27a8 <___vfprintf_internal_r+0x1e94>
    1fcc:	d9003817 	ldw	r4,224(sp)
    1fd0:	90c04014 	ori	r3,r18,256
    1fd4:	d8c02b15 	stw	r3,172(sp)
    1fd8:	20021516 	blt	r4,zero,2830 <___vfprintf_internal_r+0x1f1c>
    1fdc:	dcc03817 	ldw	r19,224(sp)
    1fe0:	d8002a05 	stb	zero,168(sp)
    1fe4:	00801984 	movi	r2,102
    1fe8:	8881f926 	beq	r17,r2,27d0 <___vfprintf_internal_r+0x1ebc>
    1fec:	00801184 	movi	r2,70
    1ff0:	88821c26 	beq	r17,r2,2864 <___vfprintf_internal_r+0x1f50>
    1ff4:	00801144 	movi	r2,69
    1ff8:	b081ef26 	beq	r22,r2,27b8 <___vfprintf_internal_r+0x1ea4>
    1ffc:	d8c02917 	ldw	r3,164(sp)
    2000:	d8802104 	addi	r2,sp,132
    2004:	d8800315 	stw	r2,12(sp)
    2008:	d9403617 	ldw	r5,216(sp)
    200c:	d8802504 	addi	r2,sp,148
    2010:	d9002c17 	ldw	r4,176(sp)
    2014:	d8800215 	stw	r2,8(sp)
    2018:	d8802604 	addi	r2,sp,152
    201c:	d8c00015 	stw	r3,0(sp)
    2020:	d8800115 	stw	r2,4(sp)
    2024:	01c00084 	movi	r7,2
    2028:	980d883a 	mov	r6,r19
    202c:	d8c03c15 	stw	r3,240(sp)
    2030:	da003d15 	stw	r8,244(sp)
    2034:	0002f380 	call	2f38 <_dtoa_r>
    2038:	1021883a 	mov	r16,r2
    203c:	008019c4 	movi	r2,103
    2040:	d8c03c17 	ldw	r3,240(sp)
    2044:	da003d17 	ldw	r8,244(sp)
    2048:	88817126 	beq	r17,r2,2610 <___vfprintf_internal_r+0x1cfc>
    204c:	008011c4 	movi	r2,71
    2050:	88829226 	beq	r17,r2,2a9c <___vfprintf_internal_r+0x2188>
    2054:	80f9883a 	add	fp,r16,r3
    2058:	d9003617 	ldw	r4,216(sp)
    205c:	000d883a 	mov	r6,zero
    2060:	000f883a 	mov	r7,zero
    2064:	980b883a 	mov	r5,r19
    2068:	da003d15 	stw	r8,244(sp)
    206c:	000b9d40 	call	b9d4 <__eqdf2>
    2070:	da003d17 	ldw	r8,244(sp)
    2074:	10018d26 	beq	r2,zero,26ac <___vfprintf_internal_r+0x1d98>
    2078:	d8802117 	ldw	r2,132(sp)
    207c:	1700062e 	bgeu	r2,fp,2098 <___vfprintf_internal_r+0x1784>
    2080:	01000c04 	movi	r4,48
    2084:	10c00044 	addi	r3,r2,1
    2088:	d8c02115 	stw	r3,132(sp)
    208c:	11000005 	stb	r4,0(r2)
    2090:	d8802117 	ldw	r2,132(sp)
    2094:	173ffb36 	bltu	r2,fp,2084 <__alt_data_end+0xfffe2084>
    2098:	1405c83a 	sub	r2,r2,r16
    209c:	d8803315 	stw	r2,204(sp)
    20a0:	008011c4 	movi	r2,71
    20a4:	b0817626 	beq	r22,r2,2680 <___vfprintf_internal_r+0x1d6c>
    20a8:	00801944 	movi	r2,101
    20ac:	1442810e 	bge	r2,r17,2ab4 <___vfprintf_internal_r+0x21a0>
    20b0:	d8c02617 	ldw	r3,152(sp)
    20b4:	00801984 	movi	r2,102
    20b8:	d8c03215 	stw	r3,200(sp)
    20bc:	8881fe26 	beq	r17,r2,28b8 <___vfprintf_internal_r+0x1fa4>
    20c0:	d8c03217 	ldw	r3,200(sp)
    20c4:	d9003317 	ldw	r4,204(sp)
    20c8:	1901dd16 	blt	r3,r4,2840 <___vfprintf_internal_r+0x1f2c>
    20cc:	9480004c 	andi	r18,r18,1
    20d0:	90022b1e 	bne	r18,zero,2980 <___vfprintf_internal_r+0x206c>
    20d4:	1805883a 	mov	r2,r3
    20d8:	18028016 	blt	r3,zero,2adc <___vfprintf_internal_r+0x21c8>
    20dc:	d8c03217 	ldw	r3,200(sp)
    20e0:	044019c4 	movi	r17,103
    20e4:	d8c02e15 	stw	r3,184(sp)
    20e8:	df002a07 	ldb	fp,168(sp)
    20ec:	e001531e 	bne	fp,zero,263c <___vfprintf_internal_r+0x1d28>
    20f0:	df002783 	ldbu	fp,158(sp)
    20f4:	d8802a15 	stw	r2,168(sp)
    20f8:	dc802b17 	ldw	r18,172(sp)
    20fc:	d8002915 	stw	zero,164(sp)
    2100:	003bd106 	br	1048 <__alt_data_end+0xfffe1048>
    2104:	d8802d17 	ldw	r2,180(sp)
    2108:	d8c02d17 	ldw	r3,180(sp)
    210c:	d9002d17 	ldw	r4,180(sp)
    2110:	10800017 	ldw	r2,0(r2)
    2114:	18c00117 	ldw	r3,4(r3)
    2118:	21000204 	addi	r4,r4,8
    211c:	d8803615 	stw	r2,216(sp)
    2120:	d8c03815 	stw	r3,224(sp)
    2124:	d9002d15 	stw	r4,180(sp)
    2128:	003b7506 	br	f00 <__alt_data_end+0xfffe0f00>
    212c:	ac400007 	ldb	r17,0(r21)
    2130:	003a5906 	br	a98 <__alt_data_end+0xfffe0a98>
    2134:	9080100c 	andi	r2,r18,64
    2138:	1000a826 	beq	r2,zero,23dc <___vfprintf_internal_r+0x1ac8>
    213c:	d9002d17 	ldw	r4,180(sp)
    2140:	002d883a 	mov	r22,zero
    2144:	24c0000b 	ldhu	r19,0(r4)
    2148:	21000104 	addi	r4,r4,4
    214c:	d9002d15 	stw	r4,180(sp)
    2150:	003ccb06 	br	1480 <__alt_data_end+0xfffe1480>
    2154:	d8c02d17 	ldw	r3,180(sp)
    2158:	d9002917 	ldw	r4,164(sp)
    215c:	002d883a 	mov	r22,zero
    2160:	18800104 	addi	r2,r3,4
    2164:	1cc00017 	ldw	r19,0(r3)
    2168:	203ebb0e 	bge	r4,zero,1c58 <__alt_data_end+0xfffe1c58>
    216c:	003ef106 	br	1d34 <__alt_data_end+0xfffe1d34>
    2170:	9080040c 	andi	r2,r18,16
    2174:	1000921e 	bne	r2,zero,23c0 <___vfprintf_internal_r+0x1aac>
    2178:	9480100c 	andi	r18,r18,64
    217c:	90013926 	beq	r18,zero,2664 <___vfprintf_internal_r+0x1d50>
    2180:	d9002d17 	ldw	r4,180(sp)
    2184:	d9402f17 	ldw	r5,188(sp)
    2188:	20800017 	ldw	r2,0(r4)
    218c:	21000104 	addi	r4,r4,4
    2190:	d9002d15 	stw	r4,180(sp)
    2194:	1140000d 	sth	r5,0(r2)
    2198:	003a1606 	br	9f4 <__alt_data_end+0xfffe09f4>
    219c:	9080100c 	andi	r2,r18,64
    21a0:	10008026 	beq	r2,zero,23a4 <___vfprintf_internal_r+0x1a90>
    21a4:	d8c02d17 	ldw	r3,180(sp)
    21a8:	1cc0000f 	ldh	r19,0(r3)
    21ac:	18c00104 	addi	r3,r3,4
    21b0:	d8c02d15 	stw	r3,180(sp)
    21b4:	982dd7fa 	srai	r22,r19,31
    21b8:	b005883a 	mov	r2,r22
    21bc:	003b1f06 	br	e3c <__alt_data_end+0xfffe0e3c>
    21c0:	9080100c 	andi	r2,r18,64
    21c4:	d8002785 	stb	zero,158(sp)
    21c8:	10008a1e 	bne	r2,zero,23f4 <___vfprintf_internal_r+0x1ae0>
    21cc:	d9402d17 	ldw	r5,180(sp)
    21d0:	d8c02917 	ldw	r3,164(sp)
    21d4:	002d883a 	mov	r22,zero
    21d8:	28800104 	addi	r2,r5,4
    21dc:	2cc00017 	ldw	r19,0(r5)
    21e0:	183e4b0e 	bge	r3,zero,1b10 <__alt_data_end+0xfffe1b10>
    21e4:	9d86b03a 	or	r3,r19,r22
    21e8:	d8802d15 	stw	r2,180(sp)
    21ec:	183e4c1e 	bne	r3,zero,1b20 <__alt_data_end+0xfffe1b20>
    21f0:	0039883a 	mov	fp,zero
    21f4:	0005883a 	mov	r2,zero
    21f8:	003d4006 	br	16fc <__alt_data_end+0xfffe16fc>
    21fc:	01400074 	movhi	r5,1
    2200:	297dc484 	addi	r5,r5,-2286
    2204:	d9402b15 	stw	r5,172(sp)
    2208:	d9402b17 	ldw	r5,172(sp)
    220c:	1c47883a 	add	r3,r3,r17
    2210:	10800044 	addi	r2,r2,1
    2214:	41400015 	stw	r5,0(r8)
    2218:	44400115 	stw	r17,4(r8)
    221c:	d8c02015 	stw	r3,128(sp)
    2220:	d8801f15 	stw	r2,124(sp)
    2224:	010001c4 	movi	r4,7
    2228:	20bec816 	blt	r4,r2,1d4c <__alt_data_end+0xfffe1d4c>
    222c:	42000204 	addi	r8,r8,8
    2230:	003ecd06 	br	1d68 <__alt_data_end+0xfffe1d68>
    2234:	d9002917 	ldw	r4,164(sp)
    2238:	d8002785 	stb	zero,158(sp)
    223c:	203d2d16 	blt	r4,zero,16f4 <__alt_data_end+0xfffe16f4>
    2240:	00bfdfc4 	movi	r2,-129
    2244:	90a4703a 	and	r18,r18,r2
    2248:	003a9106 	br	c90 <__alt_data_end+0xfffe0c90>
    224c:	01000074 	movhi	r4,1
    2250:	213dc484 	addi	r4,r4,-2286
    2254:	d9002b15 	stw	r4,172(sp)
    2258:	003c0c06 	br	128c <__alt_data_end+0xfffe128c>
    225c:	d9002c17 	ldw	r4,176(sp)
    2260:	d9801e04 	addi	r6,sp,120
    2264:	b80b883a 	mov	r5,r23
    2268:	0007f100 	call	7f10 <__sprint_r>
    226c:	103aab1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    2270:	d8c02017 	ldw	r3,128(sp)
    2274:	da000404 	addi	r8,sp,16
    2278:	003d4106 	br	1780 <__alt_data_end+0xfffe1780>
    227c:	d8801f17 	ldw	r2,124(sp)
    2280:	01400074 	movhi	r5,1
    2284:	01000044 	movi	r4,1
    2288:	18c00044 	addi	r3,r3,1
    228c:	10800044 	addi	r2,r2,1
    2290:	297dc404 	addi	r5,r5,-2288
    2294:	41000115 	stw	r4,4(r8)
    2298:	41400015 	stw	r5,0(r8)
    229c:	d8c02015 	stw	r3,128(sp)
    22a0:	d8801f15 	stw	r2,124(sp)
    22a4:	010001c4 	movi	r4,7
    22a8:	20805c16 	blt	r4,r2,241c <___vfprintf_internal_r+0x1b08>
    22ac:	42000204 	addi	r8,r8,8
    22b0:	8800041e 	bne	r17,zero,22c4 <___vfprintf_internal_r+0x19b0>
    22b4:	d8803317 	ldw	r2,204(sp)
    22b8:	1000021e 	bne	r2,zero,22c4 <___vfprintf_internal_r+0x19b0>
    22bc:	9080004c 	andi	r2,r18,1
    22c0:	103c0926 	beq	r2,zero,12e8 <__alt_data_end+0xfffe12e8>
    22c4:	d9003717 	ldw	r4,220(sp)
    22c8:	d8801f17 	ldw	r2,124(sp)
    22cc:	d9403417 	ldw	r5,208(sp)
    22d0:	20c7883a 	add	r3,r4,r3
    22d4:	10800044 	addi	r2,r2,1
    22d8:	41000115 	stw	r4,4(r8)
    22dc:	41400015 	stw	r5,0(r8)
    22e0:	d8c02015 	stw	r3,128(sp)
    22e4:	d8801f15 	stw	r2,124(sp)
    22e8:	010001c4 	movi	r4,7
    22ec:	20812116 	blt	r4,r2,2774 <___vfprintf_internal_r+0x1e60>
    22f0:	42000204 	addi	r8,r8,8
    22f4:	0463c83a 	sub	r17,zero,r17
    22f8:	0440730e 	bge	zero,r17,24c8 <___vfprintf_internal_r+0x1bb4>
    22fc:	05800404 	movi	r22,16
    2300:	b440860e 	bge	r22,r17,251c <___vfprintf_internal_r+0x1c08>
    2304:	01400074 	movhi	r5,1
    2308:	297dc484 	addi	r5,r5,-2286
    230c:	d9402b15 	stw	r5,172(sp)
    2310:	070001c4 	movi	fp,7
    2314:	dcc02c17 	ldw	r19,176(sp)
    2318:	00000306 	br	2328 <___vfprintf_internal_r+0x1a14>
    231c:	42000204 	addi	r8,r8,8
    2320:	8c7ffc04 	addi	r17,r17,-16
    2324:	b440800e 	bge	r22,r17,2528 <___vfprintf_internal_r+0x1c14>
    2328:	18c00404 	addi	r3,r3,16
    232c:	10800044 	addi	r2,r2,1
    2330:	45000015 	stw	r20,0(r8)
    2334:	45800115 	stw	r22,4(r8)
    2338:	d8c02015 	stw	r3,128(sp)
    233c:	d8801f15 	stw	r2,124(sp)
    2340:	e0bff60e 	bge	fp,r2,231c <__alt_data_end+0xfffe231c>
    2344:	d9801e04 	addi	r6,sp,120
    2348:	b80b883a 	mov	r5,r23
    234c:	9809883a 	mov	r4,r19
    2350:	0007f100 	call	7f10 <__sprint_r>
    2354:	103a711e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    2358:	d8c02017 	ldw	r3,128(sp)
    235c:	d8801f17 	ldw	r2,124(sp)
    2360:	da000404 	addi	r8,sp,16
    2364:	003fee06 	br	2320 <__alt_data_end+0xfffe2320>
    2368:	00bfffc4 	movi	r2,-1
    236c:	003a6f06 	br	d2c <__alt_data_end+0xfffe0d2c>
    2370:	008011c4 	movi	r2,71
    2374:	1440b816 	blt	r2,r17,2658 <___vfprintf_internal_r+0x1d44>
    2378:	04000074 	movhi	r16,1
    237c:	843db604 	addi	r16,r16,-2344
    2380:	00c000c4 	movi	r3,3
    2384:	00bfdfc4 	movi	r2,-129
    2388:	d8c02a15 	stw	r3,168(sp)
    238c:	90a4703a 	and	r18,r18,r2
    2390:	df002783 	ldbu	fp,158(sp)
    2394:	d8c02e15 	stw	r3,184(sp)
    2398:	d8002915 	stw	zero,164(sp)
    239c:	d8003215 	stw	zero,200(sp)
    23a0:	003b2906 	br	1048 <__alt_data_end+0xfffe1048>
    23a4:	d9002d17 	ldw	r4,180(sp)
    23a8:	24c00017 	ldw	r19,0(r4)
    23ac:	21000104 	addi	r4,r4,4
    23b0:	d9002d15 	stw	r4,180(sp)
    23b4:	982dd7fa 	srai	r22,r19,31
    23b8:	b005883a 	mov	r2,r22
    23bc:	003a9f06 	br	e3c <__alt_data_end+0xfffe0e3c>
    23c0:	d9402d17 	ldw	r5,180(sp)
    23c4:	d8c02f17 	ldw	r3,188(sp)
    23c8:	28800017 	ldw	r2,0(r5)
    23cc:	29400104 	addi	r5,r5,4
    23d0:	d9402d15 	stw	r5,180(sp)
    23d4:	10c00015 	stw	r3,0(r2)
    23d8:	00398606 	br	9f4 <__alt_data_end+0xfffe09f4>
    23dc:	d9402d17 	ldw	r5,180(sp)
    23e0:	002d883a 	mov	r22,zero
    23e4:	2cc00017 	ldw	r19,0(r5)
    23e8:	29400104 	addi	r5,r5,4
    23ec:	d9402d15 	stw	r5,180(sp)
    23f0:	003c2306 	br	1480 <__alt_data_end+0xfffe1480>
    23f4:	d8c02d17 	ldw	r3,180(sp)
    23f8:	d9002917 	ldw	r4,164(sp)
    23fc:	002d883a 	mov	r22,zero
    2400:	18800104 	addi	r2,r3,4
    2404:	1cc0000b 	ldhu	r19,0(r3)
    2408:	203dc10e 	bge	r4,zero,1b10 <__alt_data_end+0xfffe1b10>
    240c:	003f7506 	br	21e4 <__alt_data_end+0xfffe21e4>
    2410:	04000074 	movhi	r16,1
    2414:	843db404 	addi	r16,r16,-2352
    2418:	003acc06 	br	f4c <__alt_data_end+0xfffe0f4c>
    241c:	d9002c17 	ldw	r4,176(sp)
    2420:	d9801e04 	addi	r6,sp,120
    2424:	b80b883a 	mov	r5,r23
    2428:	0007f100 	call	7f10 <__sprint_r>
    242c:	103a3b1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    2430:	dc402617 	ldw	r17,152(sp)
    2434:	d8c02017 	ldw	r3,128(sp)
    2438:	da000404 	addi	r8,sp,16
    243c:	003f9c06 	br	22b0 <__alt_data_end+0xfffe22b0>
    2440:	ac400043 	ldbu	r17,1(r21)
    2444:	94800814 	ori	r18,r18,32
    2448:	ad400044 	addi	r21,r21,1
    244c:	8c403fcc 	andi	r17,r17,255
    2450:	8c40201c 	xori	r17,r17,128
    2454:	8c7fe004 	addi	r17,r17,-128
    2458:	00398f06 	br	a98 <__alt_data_end+0xfffe0a98>
    245c:	d8c02d15 	stw	r3,180(sp)
    2460:	0039883a 	mov	fp,zero
    2464:	003e3506 	br	1d3c <__alt_data_end+0xfffe1d3c>
    2468:	d9002c17 	ldw	r4,176(sp)
    246c:	d9801e04 	addi	r6,sp,120
    2470:	b80b883a 	mov	r5,r23
    2474:	0007f100 	call	7f10 <__sprint_r>
    2478:	103a281e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    247c:	d8c02017 	ldw	r3,128(sp)
    2480:	da000404 	addi	r8,sp,16
    2484:	003cd006 	br	17c8 <__alt_data_end+0xfffe17c8>
    2488:	8009883a 	mov	r4,r16
    248c:	da003d15 	stw	r8,244(sp)
    2490:	000087c0 	call	87c <strlen>
    2494:	d8802e15 	stw	r2,184(sp)
    2498:	da003d17 	ldw	r8,244(sp)
    249c:	103c340e 	bge	r2,zero,1570 <__alt_data_end+0xfffe1570>
    24a0:	0005883a 	mov	r2,zero
    24a4:	003c3206 	br	1570 <__alt_data_end+0xfffe1570>
    24a8:	d9002c17 	ldw	r4,176(sp)
    24ac:	d9801e04 	addi	r6,sp,120
    24b0:	b80b883a 	mov	r5,r23
    24b4:	0007f100 	call	7f10 <__sprint_r>
    24b8:	103a181e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    24bc:	d8c02017 	ldw	r3,128(sp)
    24c0:	d8801f17 	ldw	r2,124(sp)
    24c4:	da000404 	addi	r8,sp,16
    24c8:	d9403317 	ldw	r5,204(sp)
    24cc:	10800044 	addi	r2,r2,1
    24d0:	44000015 	stw	r16,0(r8)
    24d4:	28c7883a 	add	r3,r5,r3
    24d8:	003b7d06 	br	12d0 <__alt_data_end+0xfffe12d0>
    24dc:	01000074 	movhi	r4,1
    24e0:	213dc884 	addi	r4,r4,-2270
    24e4:	d9003515 	stw	r4,212(sp)
    24e8:	003b1406 	br	113c <__alt_data_end+0xfffe113c>
    24ec:	013fffc4 	movi	r4,-1
    24f0:	003a3506 	br	dc8 <__alt_data_end+0xfffe0dc8>
    24f4:	0023883a 	mov	r17,zero
    24f8:	003d9d06 	br	1b70 <__alt_data_end+0xfffe1b70>
    24fc:	d9002c17 	ldw	r4,176(sp)
    2500:	d9801e04 	addi	r6,sp,120
    2504:	b80b883a 	mov	r5,r23
    2508:	0007f100 	call	7f10 <__sprint_r>
    250c:	103a031e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    2510:	d8c02017 	ldw	r3,128(sp)
    2514:	da000404 	addi	r8,sp,16
    2518:	003d9406 	br	1b6c <__alt_data_end+0xfffe1b6c>
    251c:	01000074 	movhi	r4,1
    2520:	213dc484 	addi	r4,r4,-2286
    2524:	d9002b15 	stw	r4,172(sp)
    2528:	d9002b17 	ldw	r4,172(sp)
    252c:	1c47883a 	add	r3,r3,r17
    2530:	10800044 	addi	r2,r2,1
    2534:	41000015 	stw	r4,0(r8)
    2538:	44400115 	stw	r17,4(r8)
    253c:	d8c02015 	stw	r3,128(sp)
    2540:	d8801f15 	stw	r2,124(sp)
    2544:	010001c4 	movi	r4,7
    2548:	20bfd716 	blt	r4,r2,24a8 <__alt_data_end+0xfffe24a8>
    254c:	42000204 	addi	r8,r8,8
    2550:	003fdd06 	br	24c8 <__alt_data_end+0xfffe24c8>
    2554:	d9002c17 	ldw	r4,176(sp)
    2558:	d9801e04 	addi	r6,sp,120
    255c:	b80b883a 	mov	r5,r23
    2560:	0007f100 	call	7f10 <__sprint_r>
    2564:	1039ed1e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    2568:	d8802617 	ldw	r2,152(sp)
    256c:	d8c02017 	ldw	r3,128(sp)
    2570:	da000404 	addi	r8,sp,16
    2574:	003e1006 	br	1db8 <__alt_data_end+0xfffe1db8>
    2578:	00800044 	movi	r2,1
    257c:	10803fcc 	andi	r2,r2,255
    2580:	00c00044 	movi	r3,1
    2584:	10fa3526 	beq	r2,r3,e5c <__alt_data_end+0xfffe0e5c>
    2588:	00c00084 	movi	r3,2
    258c:	10fbcb26 	beq	r2,r3,14bc <__alt_data_end+0xfffe14bc>
    2590:	003a8f06 	br	fd0 <__alt_data_end+0xfffe0fd0>
    2594:	01000074 	movhi	r4,1
    2598:	213dc884 	addi	r4,r4,-2270
    259c:	d9003515 	stw	r4,212(sp)
    25a0:	003b7606 	br	137c <__alt_data_end+0xfffe137c>
    25a4:	d8802917 	ldw	r2,164(sp)
    25a8:	00c00184 	movi	r3,6
    25ac:	1880012e 	bgeu	r3,r2,25b4 <___vfprintf_internal_r+0x1ca0>
    25b0:	1805883a 	mov	r2,r3
    25b4:	d8802e15 	stw	r2,184(sp)
    25b8:	1000ef16 	blt	r2,zero,2978 <___vfprintf_internal_r+0x2064>
    25bc:	04000074 	movhi	r16,1
    25c0:	d8802a15 	stw	r2,168(sp)
    25c4:	dcc02d15 	stw	r19,180(sp)
    25c8:	d8002915 	stw	zero,164(sp)
    25cc:	d8003215 	stw	zero,200(sp)
    25d0:	843dc204 	addi	r16,r16,-2296
    25d4:	0039883a 	mov	fp,zero
    25d8:	003aa206 	br	1064 <__alt_data_end+0xfffe1064>
    25dc:	0021883a 	mov	r16,zero
    25e0:	003e0706 	br	1e00 <__alt_data_end+0xfffe1e00>
    25e4:	d9002c17 	ldw	r4,176(sp)
    25e8:	d9801e04 	addi	r6,sp,120
    25ec:	b80b883a 	mov	r5,r23
    25f0:	0007f100 	call	7f10 <__sprint_r>
    25f4:	1039c91e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    25f8:	d8802617 	ldw	r2,152(sp)
    25fc:	d9403317 	ldw	r5,204(sp)
    2600:	d8c02017 	ldw	r3,128(sp)
    2604:	da000404 	addi	r8,sp,16
    2608:	2885c83a 	sub	r2,r5,r2
    260c:	003dfb06 	br	1dfc <__alt_data_end+0xfffe1dfc>
    2610:	9080004c 	andi	r2,r18,1
    2614:	103e8f1e 	bne	r2,zero,2054 <__alt_data_end+0xfffe2054>
    2618:	d8802117 	ldw	r2,132(sp)
    261c:	003e9e06 	br	2098 <__alt_data_end+0xfffe2098>
    2620:	1025883a 	mov	r18,r2
    2624:	0039883a 	mov	fp,zero
    2628:	00800084 	movi	r2,2
    262c:	003fd306 	br	257c <__alt_data_end+0xfffe257c>
    2630:	07000b44 	movi	fp,45
    2634:	df002785 	stb	fp,158(sp)
    2638:	003a4006 	br	f3c <__alt_data_end+0xfffe0f3c>
    263c:	00c00b44 	movi	r3,45
    2640:	d8c02785 	stb	r3,158(sp)
    2644:	d8802a15 	stw	r2,168(sp)
    2648:	dc802b17 	ldw	r18,172(sp)
    264c:	d8002915 	stw	zero,164(sp)
    2650:	07000b44 	movi	fp,45
    2654:	003a8006 	br	1058 <__alt_data_end+0xfffe1058>
    2658:	04000074 	movhi	r16,1
    265c:	843db704 	addi	r16,r16,-2340
    2660:	003f4706 	br	2380 <__alt_data_end+0xfffe2380>
    2664:	d8c02d17 	ldw	r3,180(sp)
    2668:	d9002f17 	ldw	r4,188(sp)
    266c:	18800017 	ldw	r2,0(r3)
    2670:	18c00104 	addi	r3,r3,4
    2674:	d8c02d15 	stw	r3,180(sp)
    2678:	11000015 	stw	r4,0(r2)
    267c:	0038dd06 	br	9f4 <__alt_data_end+0xfffe09f4>
    2680:	dd802617 	ldw	r22,152(sp)
    2684:	00bfff44 	movi	r2,-3
    2688:	b0801c16 	blt	r22,r2,26fc <___vfprintf_internal_r+0x1de8>
    268c:	d9402917 	ldw	r5,164(sp)
    2690:	2d801a16 	blt	r5,r22,26fc <___vfprintf_internal_r+0x1de8>
    2694:	dd803215 	stw	r22,200(sp)
    2698:	003e8906 	br	20c0 <__alt_data_end+0xfffe20c0>
    269c:	01000074 	movhi	r4,1
    26a0:	213dc484 	addi	r4,r4,-2286
    26a4:	d9002b15 	stw	r4,172(sp)
    26a8:	003c9106 	br	18f0 <__alt_data_end+0xfffe18f0>
    26ac:	e005883a 	mov	r2,fp
    26b0:	003e7906 	br	2098 <__alt_data_end+0xfffe2098>
    26b4:	d9402917 	ldw	r5,164(sp)
    26b8:	df002783 	ldbu	fp,158(sp)
    26bc:	dcc02d15 	stw	r19,180(sp)
    26c0:	d9402a15 	stw	r5,168(sp)
    26c4:	d9402e15 	stw	r5,184(sp)
    26c8:	d8002915 	stw	zero,164(sp)
    26cc:	d8003215 	stw	zero,200(sp)
    26d0:	003a5d06 	br	1048 <__alt_data_end+0xfffe1048>
    26d4:	9080004c 	andi	r2,r18,1
    26d8:	0039883a 	mov	fp,zero
    26dc:	10000426 	beq	r2,zero,26f0 <___vfprintf_internal_r+0x1ddc>
    26e0:	00800c04 	movi	r2,48
    26e4:	dc001dc4 	addi	r16,sp,119
    26e8:	d8801dc5 	stb	r2,119(sp)
    26ec:	003b8006 	br	14f0 <__alt_data_end+0xfffe14f0>
    26f0:	d8002e15 	stw	zero,184(sp)
    26f4:	dc001e04 	addi	r16,sp,120
    26f8:	003a4d06 	br	1030 <__alt_data_end+0xfffe1030>
    26fc:	8c7fff84 	addi	r17,r17,-2
    2700:	b5bfffc4 	addi	r22,r22,-1
    2704:	dd802615 	stw	r22,152(sp)
    2708:	dc4022c5 	stb	r17,139(sp)
    270c:	b000bf16 	blt	r22,zero,2a0c <___vfprintf_internal_r+0x20f8>
    2710:	00800ac4 	movi	r2,43
    2714:	d8802305 	stb	r2,140(sp)
    2718:	00800244 	movi	r2,9
    271c:	15807016 	blt	r2,r22,28e0 <___vfprintf_internal_r+0x1fcc>
    2720:	00800c04 	movi	r2,48
    2724:	b5800c04 	addi	r22,r22,48
    2728:	d8802345 	stb	r2,141(sp)
    272c:	dd802385 	stb	r22,142(sp)
    2730:	d88023c4 	addi	r2,sp,143
    2734:	df0022c4 	addi	fp,sp,139
    2738:	d8c03317 	ldw	r3,204(sp)
    273c:	1739c83a 	sub	fp,r2,fp
    2740:	d9003317 	ldw	r4,204(sp)
    2744:	e0c7883a 	add	r3,fp,r3
    2748:	df003a15 	stw	fp,232(sp)
    274c:	d8c02e15 	stw	r3,184(sp)
    2750:	00800044 	movi	r2,1
    2754:	1100b30e 	bge	r2,r4,2a24 <___vfprintf_internal_r+0x2110>
    2758:	d8c02e17 	ldw	r3,184(sp)
    275c:	18c00044 	addi	r3,r3,1
    2760:	d8c02e15 	stw	r3,184(sp)
    2764:	1805883a 	mov	r2,r3
    2768:	1800ac16 	blt	r3,zero,2a1c <___vfprintf_internal_r+0x2108>
    276c:	d8003215 	stw	zero,200(sp)
    2770:	003e5d06 	br	20e8 <__alt_data_end+0xfffe20e8>
    2774:	d9002c17 	ldw	r4,176(sp)
    2778:	d9801e04 	addi	r6,sp,120
    277c:	b80b883a 	mov	r5,r23
    2780:	0007f100 	call	7f10 <__sprint_r>
    2784:	1039651e 	bne	r2,zero,d1c <__alt_data_end+0xfffe0d1c>
    2788:	dc402617 	ldw	r17,152(sp)
    278c:	d8c02017 	ldw	r3,128(sp)
    2790:	d8801f17 	ldw	r2,124(sp)
    2794:	da000404 	addi	r8,sp,16
    2798:	003ed606 	br	22f4 <__alt_data_end+0xfffe22f4>
    279c:	582b883a 	mov	r21,r11
    27a0:	d8002915 	stw	zero,164(sp)
    27a4:	0038bd06 	br	a9c <__alt_data_end+0xfffe0a9c>
    27a8:	d8802917 	ldw	r2,164(sp)
    27ac:	103e071e 	bne	r2,zero,1fcc <__alt_data_end+0xfffe1fcc>
    27b0:	dc002915 	stw	r16,164(sp)
    27b4:	003e0506 	br	1fcc <__alt_data_end+0xfffe1fcc>
    27b8:	d9002917 	ldw	r4,164(sp)
    27bc:	20c00044 	addi	r3,r4,1
    27c0:	003e0f06 	br	2000 <__alt_data_end+0xfffe2000>
    27c4:	01400184 	movi	r5,6
    27c8:	d9402915 	stw	r5,164(sp)
    27cc:	003dff06 	br	1fcc <__alt_data_end+0xfffe1fcc>
    27d0:	d8802104 	addi	r2,sp,132
    27d4:	d8800315 	stw	r2,12(sp)
    27d8:	d8802504 	addi	r2,sp,148
    27dc:	d8800215 	stw	r2,8(sp)
    27e0:	d8802604 	addi	r2,sp,152
    27e4:	d8800115 	stw	r2,4(sp)
    27e8:	d8802917 	ldw	r2,164(sp)
    27ec:	d9403617 	ldw	r5,216(sp)
    27f0:	d9002c17 	ldw	r4,176(sp)
    27f4:	d8800015 	stw	r2,0(sp)
    27f8:	01c000c4 	movi	r7,3
    27fc:	980d883a 	mov	r6,r19
    2800:	da003d15 	stw	r8,244(sp)
    2804:	0002f380 	call	2f38 <_dtoa_r>
    2808:	d8c02917 	ldw	r3,164(sp)
    280c:	da003d17 	ldw	r8,244(sp)
    2810:	1021883a 	mov	r16,r2
    2814:	10f9883a 	add	fp,r2,r3
    2818:	81000007 	ldb	r4,0(r16)
    281c:	00800c04 	movi	r2,48
    2820:	20805e26 	beq	r4,r2,299c <___vfprintf_internal_r+0x2088>
    2824:	d8c02617 	ldw	r3,152(sp)
    2828:	e0f9883a 	add	fp,fp,r3
    282c:	003e0a06 	br	2058 <__alt_data_end+0xfffe2058>
    2830:	00c00b44 	movi	r3,45
    2834:	24e0003c 	xorhi	r19,r4,32768
    2838:	d8c02a05 	stb	r3,168(sp)
    283c:	003de906 	br	1fe4 <__alt_data_end+0xfffe1fe4>
    2840:	d8c03217 	ldw	r3,200(sp)
    2844:	00c07a0e 	bge	zero,r3,2a30 <___vfprintf_internal_r+0x211c>
    2848:	00800044 	movi	r2,1
    284c:	d9003317 	ldw	r4,204(sp)
    2850:	1105883a 	add	r2,r2,r4
    2854:	d8802e15 	stw	r2,184(sp)
    2858:	10004e16 	blt	r2,zero,2994 <___vfprintf_internal_r+0x2080>
    285c:	044019c4 	movi	r17,103
    2860:	003e2106 	br	20e8 <__alt_data_end+0xfffe20e8>
    2864:	d9002917 	ldw	r4,164(sp)
    2868:	d8802104 	addi	r2,sp,132
    286c:	d8800315 	stw	r2,12(sp)
    2870:	d9000015 	stw	r4,0(sp)
    2874:	d8802504 	addi	r2,sp,148
    2878:	d9403617 	ldw	r5,216(sp)
    287c:	d9002c17 	ldw	r4,176(sp)
    2880:	d8800215 	stw	r2,8(sp)
    2884:	d8802604 	addi	r2,sp,152
    2888:	d8800115 	stw	r2,4(sp)
    288c:	01c000c4 	movi	r7,3
    2890:	980d883a 	mov	r6,r19
    2894:	da003d15 	stw	r8,244(sp)
    2898:	0002f380 	call	2f38 <_dtoa_r>
    289c:	d8c02917 	ldw	r3,164(sp)
    28a0:	da003d17 	ldw	r8,244(sp)
    28a4:	1021883a 	mov	r16,r2
    28a8:	00801184 	movi	r2,70
    28ac:	80f9883a 	add	fp,r16,r3
    28b0:	88bfd926 	beq	r17,r2,2818 <__alt_data_end+0xfffe2818>
    28b4:	003de806 	br	2058 <__alt_data_end+0xfffe2058>
    28b8:	d9002917 	ldw	r4,164(sp)
    28bc:	00c04d0e 	bge	zero,r3,29f4 <___vfprintf_internal_r+0x20e0>
    28c0:	2000441e 	bne	r4,zero,29d4 <___vfprintf_internal_r+0x20c0>
    28c4:	9480004c 	andi	r18,r18,1
    28c8:	9000421e 	bne	r18,zero,29d4 <___vfprintf_internal_r+0x20c0>
    28cc:	1805883a 	mov	r2,r3
    28d0:	18007016 	blt	r3,zero,2a94 <___vfprintf_internal_r+0x2180>
    28d4:	d8c03217 	ldw	r3,200(sp)
    28d8:	d8c02e15 	stw	r3,184(sp)
    28dc:	003e0206 	br	20e8 <__alt_data_end+0xfffe20e8>
    28e0:	df0022c4 	addi	fp,sp,139
    28e4:	dc002915 	stw	r16,164(sp)
    28e8:	4027883a 	mov	r19,r8
    28ec:	e021883a 	mov	r16,fp
    28f0:	b009883a 	mov	r4,r22
    28f4:	01400284 	movi	r5,10
    28f8:	000060c0 	call	60c <__modsi3>
    28fc:	10800c04 	addi	r2,r2,48
    2900:	843fffc4 	addi	r16,r16,-1
    2904:	b009883a 	mov	r4,r22
    2908:	01400284 	movi	r5,10
    290c:	80800005 	stb	r2,0(r16)
    2910:	00005880 	call	588 <__divsi3>
    2914:	102d883a 	mov	r22,r2
    2918:	00800244 	movi	r2,9
    291c:	15bff416 	blt	r2,r22,28f0 <__alt_data_end+0xfffe28f0>
    2920:	9811883a 	mov	r8,r19
    2924:	b0800c04 	addi	r2,r22,48
    2928:	8027883a 	mov	r19,r16
    292c:	997fffc4 	addi	r5,r19,-1
    2930:	98bfffc5 	stb	r2,-1(r19)
    2934:	dc002917 	ldw	r16,164(sp)
    2938:	2f006a2e 	bgeu	r5,fp,2ae4 <___vfprintf_internal_r+0x21d0>
    293c:	d9c02384 	addi	r7,sp,142
    2940:	3ccfc83a 	sub	r7,r7,r19
    2944:	d9002344 	addi	r4,sp,141
    2948:	e1cf883a 	add	r7,fp,r7
    294c:	00000106 	br	2954 <___vfprintf_internal_r+0x2040>
    2950:	28800003 	ldbu	r2,0(r5)
    2954:	20800005 	stb	r2,0(r4)
    2958:	21000044 	addi	r4,r4,1
    295c:	29400044 	addi	r5,r5,1
    2960:	393ffb1e 	bne	r7,r4,2950 <__alt_data_end+0xfffe2950>
    2964:	d8802304 	addi	r2,sp,140
    2968:	14c5c83a 	sub	r2,r2,r19
    296c:	d8c02344 	addi	r3,sp,141
    2970:	1885883a 	add	r2,r3,r2
    2974:	003f7006 	br	2738 <__alt_data_end+0xfffe2738>
    2978:	0005883a 	mov	r2,zero
    297c:	003f0f06 	br	25bc <__alt_data_end+0xfffe25bc>
    2980:	d8c03217 	ldw	r3,200(sp)
    2984:	18c00044 	addi	r3,r3,1
    2988:	d8c02e15 	stw	r3,184(sp)
    298c:	1805883a 	mov	r2,r3
    2990:	183fb20e 	bge	r3,zero,285c <__alt_data_end+0xfffe285c>
    2994:	0005883a 	mov	r2,zero
    2998:	003fb006 	br	285c <__alt_data_end+0xfffe285c>
    299c:	d9003617 	ldw	r4,216(sp)
    29a0:	000d883a 	mov	r6,zero
    29a4:	000f883a 	mov	r7,zero
    29a8:	980b883a 	mov	r5,r19
    29ac:	d8c03c15 	stw	r3,240(sp)
    29b0:	da003d15 	stw	r8,244(sp)
    29b4:	000b9d40 	call	b9d4 <__eqdf2>
    29b8:	d8c03c17 	ldw	r3,240(sp)
    29bc:	da003d17 	ldw	r8,244(sp)
    29c0:	103f9826 	beq	r2,zero,2824 <__alt_data_end+0xfffe2824>
    29c4:	00800044 	movi	r2,1
    29c8:	10c7c83a 	sub	r3,r2,r3
    29cc:	d8c02615 	stw	r3,152(sp)
    29d0:	003f9506 	br	2828 <__alt_data_end+0xfffe2828>
    29d4:	d9002917 	ldw	r4,164(sp)
    29d8:	d8c03217 	ldw	r3,200(sp)
    29dc:	20800044 	addi	r2,r4,1
    29e0:	1885883a 	add	r2,r3,r2
    29e4:	d8802e15 	stw	r2,184(sp)
    29e8:	103dbf0e 	bge	r2,zero,20e8 <__alt_data_end+0xfffe20e8>
    29ec:	0005883a 	mov	r2,zero
    29f0:	003dbd06 	br	20e8 <__alt_data_end+0xfffe20e8>
    29f4:	2000211e 	bne	r4,zero,2a7c <___vfprintf_internal_r+0x2168>
    29f8:	9480004c 	andi	r18,r18,1
    29fc:	90001f1e 	bne	r18,zero,2a7c <___vfprintf_internal_r+0x2168>
    2a00:	00800044 	movi	r2,1
    2a04:	d8802e15 	stw	r2,184(sp)
    2a08:	003db706 	br	20e8 <__alt_data_end+0xfffe20e8>
    2a0c:	00800b44 	movi	r2,45
    2a10:	05adc83a 	sub	r22,zero,r22
    2a14:	d8802305 	stb	r2,140(sp)
    2a18:	003f3f06 	br	2718 <__alt_data_end+0xfffe2718>
    2a1c:	0005883a 	mov	r2,zero
    2a20:	003f5206 	br	276c <__alt_data_end+0xfffe276c>
    2a24:	90a4703a 	and	r18,r18,r2
    2a28:	903f4e26 	beq	r18,zero,2764 <__alt_data_end+0xfffe2764>
    2a2c:	003f4a06 	br	2758 <__alt_data_end+0xfffe2758>
    2a30:	00800084 	movi	r2,2
    2a34:	10c5c83a 	sub	r2,r2,r3
    2a38:	003f8406 	br	284c <__alt_data_end+0xfffe284c>
    2a3c:	d8802d17 	ldw	r2,180(sp)
    2a40:	d9002d17 	ldw	r4,180(sp)
    2a44:	ac400043 	ldbu	r17,1(r21)
    2a48:	10800017 	ldw	r2,0(r2)
    2a4c:	582b883a 	mov	r21,r11
    2a50:	d8802915 	stw	r2,164(sp)
    2a54:	20800104 	addi	r2,r4,4
    2a58:	d9002917 	ldw	r4,164(sp)
    2a5c:	d8802d15 	stw	r2,180(sp)
    2a60:	203e7a0e 	bge	r4,zero,244c <__alt_data_end+0xfffe244c>
    2a64:	8c403fcc 	andi	r17,r17,255
    2a68:	00bfffc4 	movi	r2,-1
    2a6c:	8c40201c 	xori	r17,r17,128
    2a70:	d8802915 	stw	r2,164(sp)
    2a74:	8c7fe004 	addi	r17,r17,-128
    2a78:	00380706 	br	a98 <__alt_data_end+0xfffe0a98>
    2a7c:	d8c02917 	ldw	r3,164(sp)
    2a80:	18c00084 	addi	r3,r3,2
    2a84:	d8c02e15 	stw	r3,184(sp)
    2a88:	1805883a 	mov	r2,r3
    2a8c:	183d960e 	bge	r3,zero,20e8 <__alt_data_end+0xfffe20e8>
    2a90:	003fd606 	br	29ec <__alt_data_end+0xfffe29ec>
    2a94:	0005883a 	mov	r2,zero
    2a98:	003f8e06 	br	28d4 <__alt_data_end+0xfffe28d4>
    2a9c:	9080004c 	andi	r2,r18,1
    2aa0:	103f811e 	bne	r2,zero,28a8 <__alt_data_end+0xfffe28a8>
    2aa4:	d8802117 	ldw	r2,132(sp)
    2aa8:	1405c83a 	sub	r2,r2,r16
    2aac:	d8803315 	stw	r2,204(sp)
    2ab0:	b47ef326 	beq	r22,r17,2680 <__alt_data_end+0xfffe2680>
    2ab4:	dd802617 	ldw	r22,152(sp)
    2ab8:	003f1106 	br	2700 <__alt_data_end+0xfffe2700>
    2abc:	d9c02785 	stb	r7,158(sp)
    2ac0:	00390406 	br	ed4 <__alt_data_end+0xfffe0ed4>
    2ac4:	d9c02785 	stb	r7,158(sp)
    2ac8:	0038d306 	br	e18 <__alt_data_end+0xfffe0e18>
    2acc:	d9c02785 	stb	r7,158(sp)
    2ad0:	003a6106 	br	1458 <__alt_data_end+0xfffe1458>
    2ad4:	d9c02785 	stb	r7,158(sp)
    2ad8:	003af806 	br	16bc <__alt_data_end+0xfffe16bc>
    2adc:	0005883a 	mov	r2,zero
    2ae0:	003d7e06 	br	20dc <__alt_data_end+0xfffe20dc>
    2ae4:	d8802344 	addi	r2,sp,141
    2ae8:	003f1306 	br	2738 <__alt_data_end+0xfffe2738>
    2aec:	d9c02785 	stb	r7,158(sp)
    2af0:	00392306 	br	f80 <__alt_data_end+0xfffe0f80>
    2af4:	d9c02785 	stb	r7,158(sp)
    2af8:	003aa906 	br	15a0 <__alt_data_end+0xfffe15a0>
    2afc:	d9c02785 	stb	r7,158(sp)
    2b00:	003a3d06 	br	13f8 <__alt_data_end+0xfffe13f8>
    2b04:	d9c02785 	stb	r7,158(sp)
    2b08:	003aca06 	br	1634 <__alt_data_end+0xfffe1634>

00002b0c <__vfprintf_internal>:
    2b0c:	00800074 	movhi	r2,1
    2b10:	10851f04 	addi	r2,r2,5244
    2b14:	300f883a 	mov	r7,r6
    2b18:	280d883a 	mov	r6,r5
    2b1c:	200b883a 	mov	r5,r4
    2b20:	11000017 	ldw	r4,0(r2)
    2b24:	00009141 	jmpi	914 <___vfprintf_internal_r>

00002b28 <__sbprintf>:
    2b28:	2880030b 	ldhu	r2,12(r5)
    2b2c:	2ac01917 	ldw	r11,100(r5)
    2b30:	2a80038b 	ldhu	r10,14(r5)
    2b34:	2a400717 	ldw	r9,28(r5)
    2b38:	2a000917 	ldw	r8,36(r5)
    2b3c:	defee204 	addi	sp,sp,-1144
    2b40:	00c10004 	movi	r3,1024
    2b44:	dc011a15 	stw	r16,1128(sp)
    2b48:	10bfff4c 	andi	r2,r2,65533
    2b4c:	2821883a 	mov	r16,r5
    2b50:	d8cb883a 	add	r5,sp,r3
    2b54:	dc811c15 	stw	r18,1136(sp)
    2b58:	dc411b15 	stw	r17,1132(sp)
    2b5c:	dfc11d15 	stw	ra,1140(sp)
    2b60:	2025883a 	mov	r18,r4
    2b64:	d881030d 	sth	r2,1036(sp)
    2b68:	dac11915 	stw	r11,1124(sp)
    2b6c:	da81038d 	sth	r10,1038(sp)
    2b70:	da410715 	stw	r9,1052(sp)
    2b74:	da010915 	stw	r8,1060(sp)
    2b78:	dec10015 	stw	sp,1024(sp)
    2b7c:	dec10415 	stw	sp,1040(sp)
    2b80:	d8c10215 	stw	r3,1032(sp)
    2b84:	d8c10515 	stw	r3,1044(sp)
    2b88:	d8010615 	stw	zero,1048(sp)
    2b8c:	00009140 	call	914 <___vfprintf_internal_r>
    2b90:	1023883a 	mov	r17,r2
    2b94:	10000416 	blt	r2,zero,2ba8 <__sbprintf+0x80>
    2b98:	d9410004 	addi	r5,sp,1024
    2b9c:	9009883a 	mov	r4,r18
    2ba0:	00047dc0 	call	47dc <_fflush_r>
    2ba4:	10000d1e 	bne	r2,zero,2bdc <__sbprintf+0xb4>
    2ba8:	d881030b 	ldhu	r2,1036(sp)
    2bac:	1080100c 	andi	r2,r2,64
    2bb0:	10000326 	beq	r2,zero,2bc0 <__sbprintf+0x98>
    2bb4:	8080030b 	ldhu	r2,12(r16)
    2bb8:	10801014 	ori	r2,r2,64
    2bbc:	8080030d 	sth	r2,12(r16)
    2bc0:	8805883a 	mov	r2,r17
    2bc4:	dfc11d17 	ldw	ra,1140(sp)
    2bc8:	dc811c17 	ldw	r18,1136(sp)
    2bcc:	dc411b17 	ldw	r17,1132(sp)
    2bd0:	dc011a17 	ldw	r16,1128(sp)
    2bd4:	dec11e04 	addi	sp,sp,1144
    2bd8:	f800283a 	ret
    2bdc:	047fffc4 	movi	r17,-1
    2be0:	003ff106 	br	2ba8 <__alt_data_end+0xfffe2ba8>

00002be4 <__swsetup_r>:
    2be4:	00800074 	movhi	r2,1
    2be8:	defffd04 	addi	sp,sp,-12
    2bec:	10851f04 	addi	r2,r2,5244
    2bf0:	dc400115 	stw	r17,4(sp)
    2bf4:	2023883a 	mov	r17,r4
    2bf8:	11000017 	ldw	r4,0(r2)
    2bfc:	dc000015 	stw	r16,0(sp)
    2c00:	dfc00215 	stw	ra,8(sp)
    2c04:	2821883a 	mov	r16,r5
    2c08:	20000226 	beq	r4,zero,2c14 <__swsetup_r+0x30>
    2c0c:	20800e17 	ldw	r2,56(r4)
    2c10:	10003126 	beq	r2,zero,2cd8 <__swsetup_r+0xf4>
    2c14:	8080030b 	ldhu	r2,12(r16)
    2c18:	10c0020c 	andi	r3,r2,8
    2c1c:	1009883a 	mov	r4,r2
    2c20:	18000f26 	beq	r3,zero,2c60 <__swsetup_r+0x7c>
    2c24:	80c00417 	ldw	r3,16(r16)
    2c28:	18001526 	beq	r3,zero,2c80 <__swsetup_r+0x9c>
    2c2c:	1100004c 	andi	r4,r2,1
    2c30:	20001c1e 	bne	r4,zero,2ca4 <__swsetup_r+0xc0>
    2c34:	1080008c 	andi	r2,r2,2
    2c38:	1000291e 	bne	r2,zero,2ce0 <__swsetup_r+0xfc>
    2c3c:	80800517 	ldw	r2,20(r16)
    2c40:	80800215 	stw	r2,8(r16)
    2c44:	18001c26 	beq	r3,zero,2cb8 <__swsetup_r+0xd4>
    2c48:	0005883a 	mov	r2,zero
    2c4c:	dfc00217 	ldw	ra,8(sp)
    2c50:	dc400117 	ldw	r17,4(sp)
    2c54:	dc000017 	ldw	r16,0(sp)
    2c58:	dec00304 	addi	sp,sp,12
    2c5c:	f800283a 	ret
    2c60:	2080040c 	andi	r2,r4,16
    2c64:	10002e26 	beq	r2,zero,2d20 <__swsetup_r+0x13c>
    2c68:	2080010c 	andi	r2,r4,4
    2c6c:	10001e1e 	bne	r2,zero,2ce8 <__swsetup_r+0x104>
    2c70:	80c00417 	ldw	r3,16(r16)
    2c74:	20800214 	ori	r2,r4,8
    2c78:	8080030d 	sth	r2,12(r16)
    2c7c:	183feb1e 	bne	r3,zero,2c2c <__alt_data_end+0xfffe2c2c>
    2c80:	1100a00c 	andi	r4,r2,640
    2c84:	01408004 	movi	r5,512
    2c88:	217fe826 	beq	r4,r5,2c2c <__alt_data_end+0xfffe2c2c>
    2c8c:	800b883a 	mov	r5,r16
    2c90:	8809883a 	mov	r4,r17
    2c94:	000575c0 	call	575c <__smakebuf_r>
    2c98:	8080030b 	ldhu	r2,12(r16)
    2c9c:	80c00417 	ldw	r3,16(r16)
    2ca0:	003fe206 	br	2c2c <__alt_data_end+0xfffe2c2c>
    2ca4:	80800517 	ldw	r2,20(r16)
    2ca8:	80000215 	stw	zero,8(r16)
    2cac:	0085c83a 	sub	r2,zero,r2
    2cb0:	80800615 	stw	r2,24(r16)
    2cb4:	183fe41e 	bne	r3,zero,2c48 <__alt_data_end+0xfffe2c48>
    2cb8:	80c0030b 	ldhu	r3,12(r16)
    2cbc:	0005883a 	mov	r2,zero
    2cc0:	1900200c 	andi	r4,r3,128
    2cc4:	203fe126 	beq	r4,zero,2c4c <__alt_data_end+0xfffe2c4c>
    2cc8:	18c01014 	ori	r3,r3,64
    2ccc:	80c0030d 	sth	r3,12(r16)
    2cd0:	00bfffc4 	movi	r2,-1
    2cd4:	003fdd06 	br	2c4c <__alt_data_end+0xfffe2c4c>
    2cd8:	0004bb80 	call	4bb8 <__sinit>
    2cdc:	003fcd06 	br	2c14 <__alt_data_end+0xfffe2c14>
    2ce0:	0005883a 	mov	r2,zero
    2ce4:	003fd606 	br	2c40 <__alt_data_end+0xfffe2c40>
    2ce8:	81400c17 	ldw	r5,48(r16)
    2cec:	28000626 	beq	r5,zero,2d08 <__swsetup_r+0x124>
    2cf0:	80801004 	addi	r2,r16,64
    2cf4:	28800326 	beq	r5,r2,2d04 <__swsetup_r+0x120>
    2cf8:	8809883a 	mov	r4,r17
    2cfc:	0004d2c0 	call	4d2c <_free_r>
    2d00:	8100030b 	ldhu	r4,12(r16)
    2d04:	80000c15 	stw	zero,48(r16)
    2d08:	80c00417 	ldw	r3,16(r16)
    2d0c:	00bff6c4 	movi	r2,-37
    2d10:	1108703a 	and	r4,r2,r4
    2d14:	80000115 	stw	zero,4(r16)
    2d18:	80c00015 	stw	r3,0(r16)
    2d1c:	003fd506 	br	2c74 <__alt_data_end+0xfffe2c74>
    2d20:	00800244 	movi	r2,9
    2d24:	88800015 	stw	r2,0(r17)
    2d28:	20801014 	ori	r2,r4,64
    2d2c:	8080030d 	sth	r2,12(r16)
    2d30:	00bfffc4 	movi	r2,-1
    2d34:	003fc506 	br	2c4c <__alt_data_end+0xfffe2c4c>

00002d38 <quorem>:
    2d38:	defff704 	addi	sp,sp,-36
    2d3c:	dc800215 	stw	r18,8(sp)
    2d40:	20800417 	ldw	r2,16(r4)
    2d44:	2c800417 	ldw	r18,16(r5)
    2d48:	dfc00815 	stw	ra,32(sp)
    2d4c:	ddc00715 	stw	r23,28(sp)
    2d50:	dd800615 	stw	r22,24(sp)
    2d54:	dd400515 	stw	r21,20(sp)
    2d58:	dd000415 	stw	r20,16(sp)
    2d5c:	dcc00315 	stw	r19,12(sp)
    2d60:	dc400115 	stw	r17,4(sp)
    2d64:	dc000015 	stw	r16,0(sp)
    2d68:	14807116 	blt	r2,r18,2f30 <quorem+0x1f8>
    2d6c:	94bfffc4 	addi	r18,r18,-1
    2d70:	94ad883a 	add	r22,r18,r18
    2d74:	b5ad883a 	add	r22,r22,r22
    2d78:	2c400504 	addi	r17,r5,20
    2d7c:	8da9883a 	add	r20,r17,r22
    2d80:	25400504 	addi	r21,r4,20
    2d84:	282f883a 	mov	r23,r5
    2d88:	adad883a 	add	r22,r21,r22
    2d8c:	a1400017 	ldw	r5,0(r20)
    2d90:	2021883a 	mov	r16,r4
    2d94:	b1000017 	ldw	r4,0(r22)
    2d98:	29400044 	addi	r5,r5,1
    2d9c:	00006800 	call	680 <__udivsi3>
    2da0:	1027883a 	mov	r19,r2
    2da4:	10002c26 	beq	r2,zero,2e58 <quorem+0x120>
    2da8:	a813883a 	mov	r9,r21
    2dac:	880b883a 	mov	r5,r17
    2db0:	0009883a 	mov	r4,zero
    2db4:	000d883a 	mov	r6,zero
    2db8:	2a000017 	ldw	r8,0(r5)
    2dbc:	49c00017 	ldw	r7,0(r9)
    2dc0:	29400104 	addi	r5,r5,4
    2dc4:	40bfffcc 	andi	r2,r8,65535
    2dc8:	14c5383a 	mul	r2,r2,r19
    2dcc:	4010d43a 	srli	r8,r8,16
    2dd0:	38ffffcc 	andi	r3,r7,65535
    2dd4:	1105883a 	add	r2,r2,r4
    2dd8:	1008d43a 	srli	r4,r2,16
    2ddc:	44d1383a 	mul	r8,r8,r19
    2de0:	198d883a 	add	r6,r3,r6
    2de4:	10ffffcc 	andi	r3,r2,65535
    2de8:	30c7c83a 	sub	r3,r6,r3
    2dec:	380ed43a 	srli	r7,r7,16
    2df0:	4105883a 	add	r2,r8,r4
    2df4:	180dd43a 	srai	r6,r3,16
    2df8:	113fffcc 	andi	r4,r2,65535
    2dfc:	390fc83a 	sub	r7,r7,r4
    2e00:	398d883a 	add	r6,r7,r6
    2e04:	300e943a 	slli	r7,r6,16
    2e08:	18ffffcc 	andi	r3,r3,65535
    2e0c:	1008d43a 	srli	r4,r2,16
    2e10:	38ceb03a 	or	r7,r7,r3
    2e14:	49c00015 	stw	r7,0(r9)
    2e18:	300dd43a 	srai	r6,r6,16
    2e1c:	4a400104 	addi	r9,r9,4
    2e20:	a17fe52e 	bgeu	r20,r5,2db8 <__alt_data_end+0xfffe2db8>
    2e24:	b0800017 	ldw	r2,0(r22)
    2e28:	10000b1e 	bne	r2,zero,2e58 <quorem+0x120>
    2e2c:	b0bfff04 	addi	r2,r22,-4
    2e30:	a880082e 	bgeu	r21,r2,2e54 <quorem+0x11c>
    2e34:	b0ffff17 	ldw	r3,-4(r22)
    2e38:	18000326 	beq	r3,zero,2e48 <quorem+0x110>
    2e3c:	00000506 	br	2e54 <quorem+0x11c>
    2e40:	10c00017 	ldw	r3,0(r2)
    2e44:	1800031e 	bne	r3,zero,2e54 <quorem+0x11c>
    2e48:	10bfff04 	addi	r2,r2,-4
    2e4c:	94bfffc4 	addi	r18,r18,-1
    2e50:	a8bffb36 	bltu	r21,r2,2e40 <__alt_data_end+0xfffe2e40>
    2e54:	84800415 	stw	r18,16(r16)
    2e58:	b80b883a 	mov	r5,r23
    2e5c:	8009883a 	mov	r4,r16
    2e60:	0006e9c0 	call	6e9c <__mcmp>
    2e64:	10002616 	blt	r2,zero,2f00 <quorem+0x1c8>
    2e68:	9cc00044 	addi	r19,r19,1
    2e6c:	a805883a 	mov	r2,r21
    2e70:	000b883a 	mov	r5,zero
    2e74:	11000017 	ldw	r4,0(r2)
    2e78:	89800017 	ldw	r6,0(r17)
    2e7c:	10800104 	addi	r2,r2,4
    2e80:	20ffffcc 	andi	r3,r4,65535
    2e84:	194b883a 	add	r5,r3,r5
    2e88:	30ffffcc 	andi	r3,r6,65535
    2e8c:	28c7c83a 	sub	r3,r5,r3
    2e90:	300cd43a 	srli	r6,r6,16
    2e94:	2008d43a 	srli	r4,r4,16
    2e98:	180bd43a 	srai	r5,r3,16
    2e9c:	18ffffcc 	andi	r3,r3,65535
    2ea0:	2189c83a 	sub	r4,r4,r6
    2ea4:	2149883a 	add	r4,r4,r5
    2ea8:	200c943a 	slli	r6,r4,16
    2eac:	8c400104 	addi	r17,r17,4
    2eb0:	200bd43a 	srai	r5,r4,16
    2eb4:	30c6b03a 	or	r3,r6,r3
    2eb8:	10ffff15 	stw	r3,-4(r2)
    2ebc:	a47fed2e 	bgeu	r20,r17,2e74 <__alt_data_end+0xfffe2e74>
    2ec0:	9485883a 	add	r2,r18,r18
    2ec4:	1085883a 	add	r2,r2,r2
    2ec8:	a887883a 	add	r3,r21,r2
    2ecc:	18800017 	ldw	r2,0(r3)
    2ed0:	10000b1e 	bne	r2,zero,2f00 <quorem+0x1c8>
    2ed4:	18bfff04 	addi	r2,r3,-4
    2ed8:	a880082e 	bgeu	r21,r2,2efc <quorem+0x1c4>
    2edc:	18ffff17 	ldw	r3,-4(r3)
    2ee0:	18000326 	beq	r3,zero,2ef0 <quorem+0x1b8>
    2ee4:	00000506 	br	2efc <quorem+0x1c4>
    2ee8:	10c00017 	ldw	r3,0(r2)
    2eec:	1800031e 	bne	r3,zero,2efc <quorem+0x1c4>
    2ef0:	10bfff04 	addi	r2,r2,-4
    2ef4:	94bfffc4 	addi	r18,r18,-1
    2ef8:	a8bffb36 	bltu	r21,r2,2ee8 <__alt_data_end+0xfffe2ee8>
    2efc:	84800415 	stw	r18,16(r16)
    2f00:	9805883a 	mov	r2,r19
    2f04:	dfc00817 	ldw	ra,32(sp)
    2f08:	ddc00717 	ldw	r23,28(sp)
    2f0c:	dd800617 	ldw	r22,24(sp)
    2f10:	dd400517 	ldw	r21,20(sp)
    2f14:	dd000417 	ldw	r20,16(sp)
    2f18:	dcc00317 	ldw	r19,12(sp)
    2f1c:	dc800217 	ldw	r18,8(sp)
    2f20:	dc400117 	ldw	r17,4(sp)
    2f24:	dc000017 	ldw	r16,0(sp)
    2f28:	dec00904 	addi	sp,sp,36
    2f2c:	f800283a 	ret
    2f30:	0005883a 	mov	r2,zero
    2f34:	003ff306 	br	2f04 <__alt_data_end+0xfffe2f04>

00002f38 <_dtoa_r>:
    2f38:	20801017 	ldw	r2,64(r4)
    2f3c:	deffde04 	addi	sp,sp,-136
    2f40:	df002015 	stw	fp,128(sp)
    2f44:	dcc01b15 	stw	r19,108(sp)
    2f48:	dc801a15 	stw	r18,104(sp)
    2f4c:	dc401915 	stw	r17,100(sp)
    2f50:	dc001815 	stw	r16,96(sp)
    2f54:	dfc02115 	stw	ra,132(sp)
    2f58:	ddc01f15 	stw	r23,124(sp)
    2f5c:	dd801e15 	stw	r22,120(sp)
    2f60:	dd401d15 	stw	r21,116(sp)
    2f64:	dd001c15 	stw	r20,112(sp)
    2f68:	d9c00315 	stw	r7,12(sp)
    2f6c:	2039883a 	mov	fp,r4
    2f70:	3023883a 	mov	r17,r6
    2f74:	2825883a 	mov	r18,r5
    2f78:	dc002417 	ldw	r16,144(sp)
    2f7c:	3027883a 	mov	r19,r6
    2f80:	10000826 	beq	r2,zero,2fa4 <_dtoa_r+0x6c>
    2f84:	21801117 	ldw	r6,68(r4)
    2f88:	00c00044 	movi	r3,1
    2f8c:	100b883a 	mov	r5,r2
    2f90:	1986983a 	sll	r3,r3,r6
    2f94:	11800115 	stw	r6,4(r2)
    2f98:	10c00215 	stw	r3,8(r2)
    2f9c:	000667c0 	call	667c <_Bfree>
    2fa0:	e0001015 	stw	zero,64(fp)
    2fa4:	88002e16 	blt	r17,zero,3060 <_dtoa_r+0x128>
    2fa8:	80000015 	stw	zero,0(r16)
    2fac:	889ffc2c 	andhi	r2,r17,32752
    2fb0:	00dffc34 	movhi	r3,32752
    2fb4:	10c01c26 	beq	r2,r3,3028 <_dtoa_r+0xf0>
    2fb8:	000d883a 	mov	r6,zero
    2fbc:	000f883a 	mov	r7,zero
    2fc0:	9009883a 	mov	r4,r18
    2fc4:	980b883a 	mov	r5,r19
    2fc8:	000b9d40 	call	b9d4 <__eqdf2>
    2fcc:	10002b1e 	bne	r2,zero,307c <_dtoa_r+0x144>
    2fd0:	d9c02317 	ldw	r7,140(sp)
    2fd4:	00800044 	movi	r2,1
    2fd8:	38800015 	stw	r2,0(r7)
    2fdc:	d8802517 	ldw	r2,148(sp)
    2fe0:	10019e26 	beq	r2,zero,365c <_dtoa_r+0x724>
    2fe4:	d8c02517 	ldw	r3,148(sp)
    2fe8:	00800074 	movhi	r2,1
    2fec:	10bdc444 	addi	r2,r2,-2287
    2ff0:	18800015 	stw	r2,0(r3)
    2ff4:	10bfffc4 	addi	r2,r2,-1
    2ff8:	dfc02117 	ldw	ra,132(sp)
    2ffc:	df002017 	ldw	fp,128(sp)
    3000:	ddc01f17 	ldw	r23,124(sp)
    3004:	dd801e17 	ldw	r22,120(sp)
    3008:	dd401d17 	ldw	r21,116(sp)
    300c:	dd001c17 	ldw	r20,112(sp)
    3010:	dcc01b17 	ldw	r19,108(sp)
    3014:	dc801a17 	ldw	r18,104(sp)
    3018:	dc401917 	ldw	r17,100(sp)
    301c:	dc001817 	ldw	r16,96(sp)
    3020:	dec02204 	addi	sp,sp,136
    3024:	f800283a 	ret
    3028:	d8c02317 	ldw	r3,140(sp)
    302c:	0089c3c4 	movi	r2,9999
    3030:	18800015 	stw	r2,0(r3)
    3034:	90017726 	beq	r18,zero,3614 <_dtoa_r+0x6dc>
    3038:	00800074 	movhi	r2,1
    303c:	10bdd004 	addi	r2,r2,-2240
    3040:	d9002517 	ldw	r4,148(sp)
    3044:	203fec26 	beq	r4,zero,2ff8 <__alt_data_end+0xfffe2ff8>
    3048:	10c000c7 	ldb	r3,3(r2)
    304c:	1801781e 	bne	r3,zero,3630 <_dtoa_r+0x6f8>
    3050:	10c000c4 	addi	r3,r2,3
    3054:	d9802517 	ldw	r6,148(sp)
    3058:	30c00015 	stw	r3,0(r6)
    305c:	003fe606 	br	2ff8 <__alt_data_end+0xfffe2ff8>
    3060:	04e00034 	movhi	r19,32768
    3064:	9cffffc4 	addi	r19,r19,-1
    3068:	00800044 	movi	r2,1
    306c:	8ce6703a 	and	r19,r17,r19
    3070:	80800015 	stw	r2,0(r16)
    3074:	9823883a 	mov	r17,r19
    3078:	003fcc06 	br	2fac <__alt_data_end+0xfffe2fac>
    307c:	d8800204 	addi	r2,sp,8
    3080:	d8800015 	stw	r2,0(sp)
    3084:	d9c00104 	addi	r7,sp,4
    3088:	900b883a 	mov	r5,r18
    308c:	980d883a 	mov	r6,r19
    3090:	e009883a 	mov	r4,fp
    3094:	8820d53a 	srli	r16,r17,20
    3098:	00072680 	call	7268 <__d2b>
    309c:	d8800915 	stw	r2,36(sp)
    30a0:	8001651e 	bne	r16,zero,3638 <_dtoa_r+0x700>
    30a4:	dd800217 	ldw	r22,8(sp)
    30a8:	dc000117 	ldw	r16,4(sp)
    30ac:	00800804 	movi	r2,32
    30b0:	b421883a 	add	r16,r22,r16
    30b4:	80c10c84 	addi	r3,r16,1074
    30b8:	10c2d10e 	bge	r2,r3,3c00 <_dtoa_r+0xcc8>
    30bc:	00801004 	movi	r2,64
    30c0:	81010484 	addi	r4,r16,1042
    30c4:	10c7c83a 	sub	r3,r2,r3
    30c8:	9108d83a 	srl	r4,r18,r4
    30cc:	88e2983a 	sll	r17,r17,r3
    30d0:	2448b03a 	or	r4,r4,r17
    30d4:	000cd9c0 	call	cd9c <__floatunsidf>
    30d8:	017f8434 	movhi	r5,65040
    30dc:	01800044 	movi	r6,1
    30e0:	1009883a 	mov	r4,r2
    30e4:	194b883a 	add	r5,r3,r5
    30e8:	843fffc4 	addi	r16,r16,-1
    30ec:	d9801115 	stw	r6,68(sp)
    30f0:	000d883a 	mov	r6,zero
    30f4:	01cffe34 	movhi	r7,16376
    30f8:	000c3440 	call	c344 <__subdf3>
    30fc:	0198dbf4 	movhi	r6,25455
    3100:	01cff4f4 	movhi	r7,16339
    3104:	3190d844 	addi	r6,r6,17249
    3108:	39e1e9c4 	addi	r7,r7,-30809
    310c:	1009883a 	mov	r4,r2
    3110:	180b883a 	mov	r5,r3
    3114:	000bc2c0 	call	bc2c <__muldf3>
    3118:	01a2d874 	movhi	r6,35681
    311c:	01cff1f4 	movhi	r7,16327
    3120:	31b22cc4 	addi	r6,r6,-14157
    3124:	39e28a04 	addi	r7,r7,-30168
    3128:	180b883a 	mov	r5,r3
    312c:	1009883a 	mov	r4,r2
    3130:	000a8400 	call	a840 <__adddf3>
    3134:	8009883a 	mov	r4,r16
    3138:	1029883a 	mov	r20,r2
    313c:	1823883a 	mov	r17,r3
    3140:	000ccc00 	call	ccc0 <__floatsidf>
    3144:	019427f4 	movhi	r6,20639
    3148:	01cff4f4 	movhi	r7,16339
    314c:	319e7ec4 	addi	r6,r6,31227
    3150:	39d104c4 	addi	r7,r7,17427
    3154:	1009883a 	mov	r4,r2
    3158:	180b883a 	mov	r5,r3
    315c:	000bc2c0 	call	bc2c <__muldf3>
    3160:	100d883a 	mov	r6,r2
    3164:	180f883a 	mov	r7,r3
    3168:	a009883a 	mov	r4,r20
    316c:	880b883a 	mov	r5,r17
    3170:	000a8400 	call	a840 <__adddf3>
    3174:	1009883a 	mov	r4,r2
    3178:	180b883a 	mov	r5,r3
    317c:	1029883a 	mov	r20,r2
    3180:	1823883a 	mov	r17,r3
    3184:	000cc400 	call	cc40 <__fixdfsi>
    3188:	000d883a 	mov	r6,zero
    318c:	000f883a 	mov	r7,zero
    3190:	a009883a 	mov	r4,r20
    3194:	880b883a 	mov	r5,r17
    3198:	d8800515 	stw	r2,20(sp)
    319c:	000bb380 	call	bb38 <__ledf2>
    31a0:	10028716 	blt	r2,zero,3bc0 <_dtoa_r+0xc88>
    31a4:	d8c00517 	ldw	r3,20(sp)
    31a8:	00800584 	movi	r2,22
    31ac:	10c27536 	bltu	r2,r3,3b84 <_dtoa_r+0xc4c>
    31b0:	180490fa 	slli	r2,r3,3
    31b4:	00c00074 	movhi	r3,1
    31b8:	18fdec04 	addi	r3,r3,-2128
    31bc:	1885883a 	add	r2,r3,r2
    31c0:	11000017 	ldw	r4,0(r2)
    31c4:	11400117 	ldw	r5,4(r2)
    31c8:	900d883a 	mov	r6,r18
    31cc:	980f883a 	mov	r7,r19
    31d0:	000ba5c0 	call	ba5c <__gedf2>
    31d4:	00828d0e 	bge	zero,r2,3c0c <_dtoa_r+0xcd4>
    31d8:	d9000517 	ldw	r4,20(sp)
    31dc:	d8000e15 	stw	zero,56(sp)
    31e0:	213fffc4 	addi	r4,r4,-1
    31e4:	d9000515 	stw	r4,20(sp)
    31e8:	b42dc83a 	sub	r22,r22,r16
    31ec:	b5bfffc4 	addi	r22,r22,-1
    31f0:	b0026f16 	blt	r22,zero,3bb0 <_dtoa_r+0xc78>
    31f4:	d8000815 	stw	zero,32(sp)
    31f8:	d9c00517 	ldw	r7,20(sp)
    31fc:	38026416 	blt	r7,zero,3b90 <_dtoa_r+0xc58>
    3200:	b1ed883a 	add	r22,r22,r7
    3204:	d9c00d15 	stw	r7,52(sp)
    3208:	d8000a15 	stw	zero,40(sp)
    320c:	d9800317 	ldw	r6,12(sp)
    3210:	00800244 	movi	r2,9
    3214:	11811436 	bltu	r2,r6,3668 <_dtoa_r+0x730>
    3218:	00800144 	movi	r2,5
    321c:	1184e10e 	bge	r2,r6,45a4 <_dtoa_r+0x166c>
    3220:	31bfff04 	addi	r6,r6,-4
    3224:	d9800315 	stw	r6,12(sp)
    3228:	0023883a 	mov	r17,zero
    322c:	d9800317 	ldw	r6,12(sp)
    3230:	008000c4 	movi	r2,3
    3234:	30836726 	beq	r6,r2,3fd4 <_dtoa_r+0x109c>
    3238:	1183410e 	bge	r2,r6,3f40 <_dtoa_r+0x1008>
    323c:	d9c00317 	ldw	r7,12(sp)
    3240:	00800104 	movi	r2,4
    3244:	38827c26 	beq	r7,r2,3c38 <_dtoa_r+0xd00>
    3248:	00800144 	movi	r2,5
    324c:	3884c41e 	bne	r7,r2,4560 <_dtoa_r+0x1628>
    3250:	00800044 	movi	r2,1
    3254:	d8800b15 	stw	r2,44(sp)
    3258:	d8c00517 	ldw	r3,20(sp)
    325c:	d9002217 	ldw	r4,136(sp)
    3260:	1907883a 	add	r3,r3,r4
    3264:	19800044 	addi	r6,r3,1
    3268:	d8c00c15 	stw	r3,48(sp)
    326c:	d9800615 	stw	r6,24(sp)
    3270:	0183a40e 	bge	zero,r6,4104 <_dtoa_r+0x11cc>
    3274:	d9800617 	ldw	r6,24(sp)
    3278:	3021883a 	mov	r16,r6
    327c:	e0001115 	stw	zero,68(fp)
    3280:	008005c4 	movi	r2,23
    3284:	1184c92e 	bgeu	r2,r6,45ac <_dtoa_r+0x1674>
    3288:	00c00044 	movi	r3,1
    328c:	00800104 	movi	r2,4
    3290:	1085883a 	add	r2,r2,r2
    3294:	11000504 	addi	r4,r2,20
    3298:	180b883a 	mov	r5,r3
    329c:	18c00044 	addi	r3,r3,1
    32a0:	313ffb2e 	bgeu	r6,r4,3290 <__alt_data_end+0xfffe3290>
    32a4:	e1401115 	stw	r5,68(fp)
    32a8:	e009883a 	mov	r4,fp
    32ac:	00065d40 	call	65d4 <_Balloc>
    32b0:	d8800715 	stw	r2,28(sp)
    32b4:	e0801015 	stw	r2,64(fp)
    32b8:	00800384 	movi	r2,14
    32bc:	1400f736 	bltu	r2,r16,369c <_dtoa_r+0x764>
    32c0:	8800f626 	beq	r17,zero,369c <_dtoa_r+0x764>
    32c4:	d9c00517 	ldw	r7,20(sp)
    32c8:	01c39a0e 	bge	zero,r7,4134 <_dtoa_r+0x11fc>
    32cc:	388003cc 	andi	r2,r7,15
    32d0:	100490fa 	slli	r2,r2,3
    32d4:	382bd13a 	srai	r21,r7,4
    32d8:	00c00074 	movhi	r3,1
    32dc:	18fdec04 	addi	r3,r3,-2128
    32e0:	1885883a 	add	r2,r3,r2
    32e4:	a8c0040c 	andi	r3,r21,16
    32e8:	12400017 	ldw	r9,0(r2)
    32ec:	12000117 	ldw	r8,4(r2)
    32f0:	18037926 	beq	r3,zero,40d8 <_dtoa_r+0x11a0>
    32f4:	00800074 	movhi	r2,1
    32f8:	10bde204 	addi	r2,r2,-2168
    32fc:	11800817 	ldw	r6,32(r2)
    3300:	11c00917 	ldw	r7,36(r2)
    3304:	9009883a 	mov	r4,r18
    3308:	980b883a 	mov	r5,r19
    330c:	da001715 	stw	r8,92(sp)
    3310:	da401615 	stw	r9,88(sp)
    3314:	000b0ec0 	call	b0ec <__divdf3>
    3318:	da001717 	ldw	r8,92(sp)
    331c:	da401617 	ldw	r9,88(sp)
    3320:	ad4003cc 	andi	r21,r21,15
    3324:	040000c4 	movi	r16,3
    3328:	1023883a 	mov	r17,r2
    332c:	1829883a 	mov	r20,r3
    3330:	a8001126 	beq	r21,zero,3378 <_dtoa_r+0x440>
    3334:	05c00074 	movhi	r23,1
    3338:	bdfde204 	addi	r23,r23,-2168
    333c:	4805883a 	mov	r2,r9
    3340:	4007883a 	mov	r3,r8
    3344:	a980004c 	andi	r6,r21,1
    3348:	1009883a 	mov	r4,r2
    334c:	a82bd07a 	srai	r21,r21,1
    3350:	180b883a 	mov	r5,r3
    3354:	30000426 	beq	r6,zero,3368 <_dtoa_r+0x430>
    3358:	b9800017 	ldw	r6,0(r23)
    335c:	b9c00117 	ldw	r7,4(r23)
    3360:	84000044 	addi	r16,r16,1
    3364:	000bc2c0 	call	bc2c <__muldf3>
    3368:	bdc00204 	addi	r23,r23,8
    336c:	a83ff51e 	bne	r21,zero,3344 <__alt_data_end+0xfffe3344>
    3370:	1013883a 	mov	r9,r2
    3374:	1811883a 	mov	r8,r3
    3378:	480d883a 	mov	r6,r9
    337c:	400f883a 	mov	r7,r8
    3380:	8809883a 	mov	r4,r17
    3384:	a00b883a 	mov	r5,r20
    3388:	000b0ec0 	call	b0ec <__divdf3>
    338c:	d8800f15 	stw	r2,60(sp)
    3390:	d8c01015 	stw	r3,64(sp)
    3394:	d8c00e17 	ldw	r3,56(sp)
    3398:	18000626 	beq	r3,zero,33b4 <_dtoa_r+0x47c>
    339c:	d9000f17 	ldw	r4,60(sp)
    33a0:	d9401017 	ldw	r5,64(sp)
    33a4:	000d883a 	mov	r6,zero
    33a8:	01cffc34 	movhi	r7,16368
    33ac:	000bb380 	call	bb38 <__ledf2>
    33b0:	10040b16 	blt	r2,zero,43e0 <_dtoa_r+0x14a8>
    33b4:	8009883a 	mov	r4,r16
    33b8:	000ccc00 	call	ccc0 <__floatsidf>
    33bc:	d9800f17 	ldw	r6,60(sp)
    33c0:	d9c01017 	ldw	r7,64(sp)
    33c4:	1009883a 	mov	r4,r2
    33c8:	180b883a 	mov	r5,r3
    33cc:	000bc2c0 	call	bc2c <__muldf3>
    33d0:	000d883a 	mov	r6,zero
    33d4:	01d00734 	movhi	r7,16412
    33d8:	1009883a 	mov	r4,r2
    33dc:	180b883a 	mov	r5,r3
    33e0:	000a8400 	call	a840 <__adddf3>
    33e4:	1021883a 	mov	r16,r2
    33e8:	d8800617 	ldw	r2,24(sp)
    33ec:	047f3034 	movhi	r17,64704
    33f0:	1c63883a 	add	r17,r3,r17
    33f4:	10031826 	beq	r2,zero,4058 <_dtoa_r+0x1120>
    33f8:	d8c00517 	ldw	r3,20(sp)
    33fc:	db000617 	ldw	r12,24(sp)
    3400:	d8c01315 	stw	r3,76(sp)
    3404:	d9000b17 	ldw	r4,44(sp)
    3408:	20038f26 	beq	r4,zero,4248 <_dtoa_r+0x1310>
    340c:	60bfffc4 	addi	r2,r12,-1
    3410:	100490fa 	slli	r2,r2,3
    3414:	00c00074 	movhi	r3,1
    3418:	18fdec04 	addi	r3,r3,-2128
    341c:	1885883a 	add	r2,r3,r2
    3420:	11800017 	ldw	r6,0(r2)
    3424:	11c00117 	ldw	r7,4(r2)
    3428:	d8800717 	ldw	r2,28(sp)
    342c:	0009883a 	mov	r4,zero
    3430:	014ff834 	movhi	r5,16352
    3434:	db001615 	stw	r12,88(sp)
    3438:	15c00044 	addi	r23,r2,1
    343c:	000b0ec0 	call	b0ec <__divdf3>
    3440:	800d883a 	mov	r6,r16
    3444:	880f883a 	mov	r7,r17
    3448:	1009883a 	mov	r4,r2
    344c:	180b883a 	mov	r5,r3
    3450:	000c3440 	call	c344 <__subdf3>
    3454:	d9401017 	ldw	r5,64(sp)
    3458:	d9000f17 	ldw	r4,60(sp)
    345c:	102b883a 	mov	r21,r2
    3460:	d8c01215 	stw	r3,72(sp)
    3464:	000cc400 	call	cc40 <__fixdfsi>
    3468:	1009883a 	mov	r4,r2
    346c:	1029883a 	mov	r20,r2
    3470:	000ccc00 	call	ccc0 <__floatsidf>
    3474:	d9000f17 	ldw	r4,60(sp)
    3478:	d9401017 	ldw	r5,64(sp)
    347c:	100d883a 	mov	r6,r2
    3480:	180f883a 	mov	r7,r3
    3484:	000c3440 	call	c344 <__subdf3>
    3488:	1823883a 	mov	r17,r3
    348c:	d8c00717 	ldw	r3,28(sp)
    3490:	d9401217 	ldw	r5,72(sp)
    3494:	a2000c04 	addi	r8,r20,48
    3498:	1021883a 	mov	r16,r2
    349c:	1a000005 	stb	r8,0(r3)
    34a0:	800d883a 	mov	r6,r16
    34a4:	880f883a 	mov	r7,r17
    34a8:	a809883a 	mov	r4,r21
    34ac:	4029883a 	mov	r20,r8
    34b0:	000ba5c0 	call	ba5c <__gedf2>
    34b4:	00841d16 	blt	zero,r2,452c <_dtoa_r+0x15f4>
    34b8:	800d883a 	mov	r6,r16
    34bc:	880f883a 	mov	r7,r17
    34c0:	0009883a 	mov	r4,zero
    34c4:	014ffc34 	movhi	r5,16368
    34c8:	000c3440 	call	c344 <__subdf3>
    34cc:	d9401217 	ldw	r5,72(sp)
    34d0:	100d883a 	mov	r6,r2
    34d4:	180f883a 	mov	r7,r3
    34d8:	a809883a 	mov	r4,r21
    34dc:	000ba5c0 	call	ba5c <__gedf2>
    34e0:	db001617 	ldw	r12,88(sp)
    34e4:	00840e16 	blt	zero,r2,4520 <_dtoa_r+0x15e8>
    34e8:	00800044 	movi	r2,1
    34ec:	13006b0e 	bge	r2,r12,369c <_dtoa_r+0x764>
    34f0:	d9000717 	ldw	r4,28(sp)
    34f4:	dd800f15 	stw	r22,60(sp)
    34f8:	dcc01015 	stw	r19,64(sp)
    34fc:	2319883a 	add	r12,r4,r12
    3500:	dcc01217 	ldw	r19,72(sp)
    3504:	602d883a 	mov	r22,r12
    3508:	dc801215 	stw	r18,72(sp)
    350c:	b825883a 	mov	r18,r23
    3510:	00000906 	br	3538 <_dtoa_r+0x600>
    3514:	000c3440 	call	c344 <__subdf3>
    3518:	a80d883a 	mov	r6,r21
    351c:	980f883a 	mov	r7,r19
    3520:	1009883a 	mov	r4,r2
    3524:	180b883a 	mov	r5,r3
    3528:	000bb380 	call	bb38 <__ledf2>
    352c:	1003e816 	blt	r2,zero,44d0 <_dtoa_r+0x1598>
    3530:	b825883a 	mov	r18,r23
    3534:	bd83e926 	beq	r23,r22,44dc <_dtoa_r+0x15a4>
    3538:	a809883a 	mov	r4,r21
    353c:	980b883a 	mov	r5,r19
    3540:	000d883a 	mov	r6,zero
    3544:	01d00934 	movhi	r7,16420
    3548:	000bc2c0 	call	bc2c <__muldf3>
    354c:	000d883a 	mov	r6,zero
    3550:	01d00934 	movhi	r7,16420
    3554:	8009883a 	mov	r4,r16
    3558:	880b883a 	mov	r5,r17
    355c:	102b883a 	mov	r21,r2
    3560:	1827883a 	mov	r19,r3
    3564:	000bc2c0 	call	bc2c <__muldf3>
    3568:	180b883a 	mov	r5,r3
    356c:	1009883a 	mov	r4,r2
    3570:	1821883a 	mov	r16,r3
    3574:	1023883a 	mov	r17,r2
    3578:	000cc400 	call	cc40 <__fixdfsi>
    357c:	1009883a 	mov	r4,r2
    3580:	1029883a 	mov	r20,r2
    3584:	000ccc00 	call	ccc0 <__floatsidf>
    3588:	8809883a 	mov	r4,r17
    358c:	800b883a 	mov	r5,r16
    3590:	100d883a 	mov	r6,r2
    3594:	180f883a 	mov	r7,r3
    3598:	000c3440 	call	c344 <__subdf3>
    359c:	a5000c04 	addi	r20,r20,48
    35a0:	a80d883a 	mov	r6,r21
    35a4:	980f883a 	mov	r7,r19
    35a8:	1009883a 	mov	r4,r2
    35ac:	180b883a 	mov	r5,r3
    35b0:	95000005 	stb	r20,0(r18)
    35b4:	1021883a 	mov	r16,r2
    35b8:	1823883a 	mov	r17,r3
    35bc:	000bb380 	call	bb38 <__ledf2>
    35c0:	bdc00044 	addi	r23,r23,1
    35c4:	800d883a 	mov	r6,r16
    35c8:	880f883a 	mov	r7,r17
    35cc:	0009883a 	mov	r4,zero
    35d0:	014ffc34 	movhi	r5,16368
    35d4:	103fcf0e 	bge	r2,zero,3514 <__alt_data_end+0xfffe3514>
    35d8:	d8c01317 	ldw	r3,76(sp)
    35dc:	d8c00515 	stw	r3,20(sp)
    35e0:	d9400917 	ldw	r5,36(sp)
    35e4:	e009883a 	mov	r4,fp
    35e8:	000667c0 	call	667c <_Bfree>
    35ec:	d9000517 	ldw	r4,20(sp)
    35f0:	d9802317 	ldw	r6,140(sp)
    35f4:	d9c02517 	ldw	r7,148(sp)
    35f8:	b8000005 	stb	zero,0(r23)
    35fc:	20800044 	addi	r2,r4,1
    3600:	30800015 	stw	r2,0(r6)
    3604:	3802aa26 	beq	r7,zero,40b0 <_dtoa_r+0x1178>
    3608:	3dc00015 	stw	r23,0(r7)
    360c:	d8800717 	ldw	r2,28(sp)
    3610:	003e7906 	br	2ff8 <__alt_data_end+0xfffe2ff8>
    3614:	00800434 	movhi	r2,16
    3618:	10bfffc4 	addi	r2,r2,-1
    361c:	88a2703a 	and	r17,r17,r2
    3620:	883e851e 	bne	r17,zero,3038 <__alt_data_end+0xfffe3038>
    3624:	00800074 	movhi	r2,1
    3628:	10bdcd04 	addi	r2,r2,-2252
    362c:	003e8406 	br	3040 <__alt_data_end+0xfffe3040>
    3630:	10c00204 	addi	r3,r2,8
    3634:	003e8706 	br	3054 <__alt_data_end+0xfffe3054>
    3638:	01400434 	movhi	r5,16
    363c:	297fffc4 	addi	r5,r5,-1
    3640:	994a703a 	and	r5,r19,r5
    3644:	9009883a 	mov	r4,r18
    3648:	843f0044 	addi	r16,r16,-1023
    364c:	294ffc34 	orhi	r5,r5,16368
    3650:	dd800217 	ldw	r22,8(sp)
    3654:	d8001115 	stw	zero,68(sp)
    3658:	003ea506 	br	30f0 <__alt_data_end+0xfffe30f0>
    365c:	00800074 	movhi	r2,1
    3660:	10bdc404 	addi	r2,r2,-2288
    3664:	003e6406 	br	2ff8 <__alt_data_end+0xfffe2ff8>
    3668:	e0001115 	stw	zero,68(fp)
    366c:	000b883a 	mov	r5,zero
    3670:	e009883a 	mov	r4,fp
    3674:	00065d40 	call	65d4 <_Balloc>
    3678:	01bfffc4 	movi	r6,-1
    367c:	01c00044 	movi	r7,1
    3680:	d8800715 	stw	r2,28(sp)
    3684:	d9800c15 	stw	r6,48(sp)
    3688:	e0801015 	stw	r2,64(fp)
    368c:	d8000315 	stw	zero,12(sp)
    3690:	d9c00b15 	stw	r7,44(sp)
    3694:	d9800615 	stw	r6,24(sp)
    3698:	d8002215 	stw	zero,136(sp)
    369c:	d8800117 	ldw	r2,4(sp)
    36a0:	10008916 	blt	r2,zero,38c8 <_dtoa_r+0x990>
    36a4:	d9000517 	ldw	r4,20(sp)
    36a8:	00c00384 	movi	r3,14
    36ac:	19008616 	blt	r3,r4,38c8 <_dtoa_r+0x990>
    36b0:	200490fa 	slli	r2,r4,3
    36b4:	00c00074 	movhi	r3,1
    36b8:	d9802217 	ldw	r6,136(sp)
    36bc:	18fdec04 	addi	r3,r3,-2128
    36c0:	1885883a 	add	r2,r3,r2
    36c4:	14000017 	ldw	r16,0(r2)
    36c8:	14400117 	ldw	r17,4(r2)
    36cc:	30016316 	blt	r6,zero,3c5c <_dtoa_r+0xd24>
    36d0:	800d883a 	mov	r6,r16
    36d4:	880f883a 	mov	r7,r17
    36d8:	9009883a 	mov	r4,r18
    36dc:	980b883a 	mov	r5,r19
    36e0:	000b0ec0 	call	b0ec <__divdf3>
    36e4:	180b883a 	mov	r5,r3
    36e8:	1009883a 	mov	r4,r2
    36ec:	000cc400 	call	cc40 <__fixdfsi>
    36f0:	1009883a 	mov	r4,r2
    36f4:	102b883a 	mov	r21,r2
    36f8:	000ccc00 	call	ccc0 <__floatsidf>
    36fc:	800d883a 	mov	r6,r16
    3700:	880f883a 	mov	r7,r17
    3704:	1009883a 	mov	r4,r2
    3708:	180b883a 	mov	r5,r3
    370c:	000bc2c0 	call	bc2c <__muldf3>
    3710:	100d883a 	mov	r6,r2
    3714:	180f883a 	mov	r7,r3
    3718:	9009883a 	mov	r4,r18
    371c:	980b883a 	mov	r5,r19
    3720:	000c3440 	call	c344 <__subdf3>
    3724:	d9c00717 	ldw	r7,28(sp)
    3728:	1009883a 	mov	r4,r2
    372c:	a8800c04 	addi	r2,r21,48
    3730:	38800005 	stb	r2,0(r7)
    3734:	3dc00044 	addi	r23,r7,1
    3738:	d9c00617 	ldw	r7,24(sp)
    373c:	01800044 	movi	r6,1
    3740:	180b883a 	mov	r5,r3
    3744:	2005883a 	mov	r2,r4
    3748:	39803826 	beq	r7,r6,382c <_dtoa_r+0x8f4>
    374c:	000d883a 	mov	r6,zero
    3750:	01d00934 	movhi	r7,16420
    3754:	000bc2c0 	call	bc2c <__muldf3>
    3758:	000d883a 	mov	r6,zero
    375c:	000f883a 	mov	r7,zero
    3760:	1009883a 	mov	r4,r2
    3764:	180b883a 	mov	r5,r3
    3768:	1025883a 	mov	r18,r2
    376c:	1827883a 	mov	r19,r3
    3770:	000b9d40 	call	b9d4 <__eqdf2>
    3774:	103f9a26 	beq	r2,zero,35e0 <__alt_data_end+0xfffe35e0>
    3778:	d9c00617 	ldw	r7,24(sp)
    377c:	d8c00717 	ldw	r3,28(sp)
    3780:	b829883a 	mov	r20,r23
    3784:	38bfffc4 	addi	r2,r7,-1
    3788:	18ad883a 	add	r22,r3,r2
    378c:	00000a06 	br	37b8 <_dtoa_r+0x880>
    3790:	000bc2c0 	call	bc2c <__muldf3>
    3794:	000d883a 	mov	r6,zero
    3798:	000f883a 	mov	r7,zero
    379c:	1009883a 	mov	r4,r2
    37a0:	180b883a 	mov	r5,r3
    37a4:	1025883a 	mov	r18,r2
    37a8:	1827883a 	mov	r19,r3
    37ac:	b829883a 	mov	r20,r23
    37b0:	000b9d40 	call	b9d4 <__eqdf2>
    37b4:	103f8a26 	beq	r2,zero,35e0 <__alt_data_end+0xfffe35e0>
    37b8:	800d883a 	mov	r6,r16
    37bc:	880f883a 	mov	r7,r17
    37c0:	9009883a 	mov	r4,r18
    37c4:	980b883a 	mov	r5,r19
    37c8:	000b0ec0 	call	b0ec <__divdf3>
    37cc:	180b883a 	mov	r5,r3
    37d0:	1009883a 	mov	r4,r2
    37d4:	000cc400 	call	cc40 <__fixdfsi>
    37d8:	1009883a 	mov	r4,r2
    37dc:	102b883a 	mov	r21,r2
    37e0:	000ccc00 	call	ccc0 <__floatsidf>
    37e4:	800d883a 	mov	r6,r16
    37e8:	880f883a 	mov	r7,r17
    37ec:	1009883a 	mov	r4,r2
    37f0:	180b883a 	mov	r5,r3
    37f4:	000bc2c0 	call	bc2c <__muldf3>
    37f8:	100d883a 	mov	r6,r2
    37fc:	180f883a 	mov	r7,r3
    3800:	9009883a 	mov	r4,r18
    3804:	980b883a 	mov	r5,r19
    3808:	000c3440 	call	c344 <__subdf3>
    380c:	aa000c04 	addi	r8,r21,48
    3810:	a2000005 	stb	r8,0(r20)
    3814:	000d883a 	mov	r6,zero
    3818:	01d00934 	movhi	r7,16420
    381c:	1009883a 	mov	r4,r2
    3820:	180b883a 	mov	r5,r3
    3824:	a5c00044 	addi	r23,r20,1
    3828:	b53fd91e 	bne	r22,r20,3790 <__alt_data_end+0xfffe3790>
    382c:	100d883a 	mov	r6,r2
    3830:	180f883a 	mov	r7,r3
    3834:	1009883a 	mov	r4,r2
    3838:	180b883a 	mov	r5,r3
    383c:	000a8400 	call	a840 <__adddf3>
    3840:	100d883a 	mov	r6,r2
    3844:	180f883a 	mov	r7,r3
    3848:	8009883a 	mov	r4,r16
    384c:	880b883a 	mov	r5,r17
    3850:	1027883a 	mov	r19,r2
    3854:	1825883a 	mov	r18,r3
    3858:	000bb380 	call	bb38 <__ledf2>
    385c:	10000816 	blt	r2,zero,3880 <_dtoa_r+0x948>
    3860:	980d883a 	mov	r6,r19
    3864:	900f883a 	mov	r7,r18
    3868:	8009883a 	mov	r4,r16
    386c:	880b883a 	mov	r5,r17
    3870:	000b9d40 	call	b9d4 <__eqdf2>
    3874:	103f5a1e 	bne	r2,zero,35e0 <__alt_data_end+0xfffe35e0>
    3878:	ad40004c 	andi	r21,r21,1
    387c:	a83f5826 	beq	r21,zero,35e0 <__alt_data_end+0xfffe35e0>
    3880:	bd3fffc3 	ldbu	r20,-1(r23)
    3884:	b8bfffc4 	addi	r2,r23,-1
    3888:	1007883a 	mov	r3,r2
    388c:	01400e44 	movi	r5,57
    3890:	d9800717 	ldw	r6,28(sp)
    3894:	00000506 	br	38ac <_dtoa_r+0x974>
    3898:	18ffffc4 	addi	r3,r3,-1
    389c:	11824726 	beq	r2,r6,41bc <_dtoa_r+0x1284>
    38a0:	1d000003 	ldbu	r20,0(r3)
    38a4:	102f883a 	mov	r23,r2
    38a8:	10bfffc4 	addi	r2,r2,-1
    38ac:	a1003fcc 	andi	r4,r20,255
    38b0:	2100201c 	xori	r4,r4,128
    38b4:	213fe004 	addi	r4,r4,-128
    38b8:	217ff726 	beq	r4,r5,3898 <__alt_data_end+0xfffe3898>
    38bc:	a2000044 	addi	r8,r20,1
    38c0:	12000005 	stb	r8,0(r2)
    38c4:	003f4606 	br	35e0 <__alt_data_end+0xfffe35e0>
    38c8:	d9000b17 	ldw	r4,44(sp)
    38cc:	2000c826 	beq	r4,zero,3bf0 <_dtoa_r+0xcb8>
    38d0:	d9800317 	ldw	r6,12(sp)
    38d4:	00c00044 	movi	r3,1
    38d8:	1980f90e 	bge	r3,r6,3cc0 <_dtoa_r+0xd88>
    38dc:	d8800617 	ldw	r2,24(sp)
    38e0:	d8c00a17 	ldw	r3,40(sp)
    38e4:	157fffc4 	addi	r21,r2,-1
    38e8:	1d41f316 	blt	r3,r21,40b8 <_dtoa_r+0x1180>
    38ec:	1d6bc83a 	sub	r21,r3,r21
    38f0:	d9c00617 	ldw	r7,24(sp)
    38f4:	3802aa16 	blt	r7,zero,43a0 <_dtoa_r+0x1468>
    38f8:	dd000817 	ldw	r20,32(sp)
    38fc:	d8800617 	ldw	r2,24(sp)
    3900:	d8c00817 	ldw	r3,32(sp)
    3904:	01400044 	movi	r5,1
    3908:	e009883a 	mov	r4,fp
    390c:	1887883a 	add	r3,r3,r2
    3910:	d8c00815 	stw	r3,32(sp)
    3914:	b0ad883a 	add	r22,r22,r2
    3918:	00069e00 	call	69e0 <__i2b>
    391c:	1023883a 	mov	r17,r2
    3920:	a0000826 	beq	r20,zero,3944 <_dtoa_r+0xa0c>
    3924:	0580070e 	bge	zero,r22,3944 <_dtoa_r+0xa0c>
    3928:	a005883a 	mov	r2,r20
    392c:	b500b916 	blt	r22,r20,3c14 <_dtoa_r+0xcdc>
    3930:	d9000817 	ldw	r4,32(sp)
    3934:	a0a9c83a 	sub	r20,r20,r2
    3938:	b0adc83a 	sub	r22,r22,r2
    393c:	2089c83a 	sub	r4,r4,r2
    3940:	d9000815 	stw	r4,32(sp)
    3944:	d9800a17 	ldw	r6,40(sp)
    3948:	0181810e 	bge	zero,r6,3f50 <_dtoa_r+0x1018>
    394c:	d9c00b17 	ldw	r7,44(sp)
    3950:	3800b326 	beq	r7,zero,3c20 <_dtoa_r+0xce8>
    3954:	a800b226 	beq	r21,zero,3c20 <_dtoa_r+0xce8>
    3958:	880b883a 	mov	r5,r17
    395c:	a80d883a 	mov	r6,r21
    3960:	e009883a 	mov	r4,fp
    3964:	0006c140 	call	6c14 <__pow5mult>
    3968:	d9800917 	ldw	r6,36(sp)
    396c:	100b883a 	mov	r5,r2
    3970:	e009883a 	mov	r4,fp
    3974:	1023883a 	mov	r17,r2
    3978:	0006a1c0 	call	6a1c <__multiply>
    397c:	1021883a 	mov	r16,r2
    3980:	d8800a17 	ldw	r2,40(sp)
    3984:	d9400917 	ldw	r5,36(sp)
    3988:	e009883a 	mov	r4,fp
    398c:	1545c83a 	sub	r2,r2,r21
    3990:	d8800a15 	stw	r2,40(sp)
    3994:	000667c0 	call	667c <_Bfree>
    3998:	d8c00a17 	ldw	r3,40(sp)
    399c:	18009f1e 	bne	r3,zero,3c1c <_dtoa_r+0xce4>
    39a0:	05c00044 	movi	r23,1
    39a4:	e009883a 	mov	r4,fp
    39a8:	b80b883a 	mov	r5,r23
    39ac:	00069e00 	call	69e0 <__i2b>
    39b0:	d9000d17 	ldw	r4,52(sp)
    39b4:	102b883a 	mov	r21,r2
    39b8:	2000ce26 	beq	r4,zero,3cf4 <_dtoa_r+0xdbc>
    39bc:	200d883a 	mov	r6,r4
    39c0:	100b883a 	mov	r5,r2
    39c4:	e009883a 	mov	r4,fp
    39c8:	0006c140 	call	6c14 <__pow5mult>
    39cc:	d9800317 	ldw	r6,12(sp)
    39d0:	102b883a 	mov	r21,r2
    39d4:	b981810e 	bge	r23,r6,3fdc <_dtoa_r+0x10a4>
    39d8:	0027883a 	mov	r19,zero
    39dc:	a8800417 	ldw	r2,16(r21)
    39e0:	05c00804 	movi	r23,32
    39e4:	10800104 	addi	r2,r2,4
    39e8:	1085883a 	add	r2,r2,r2
    39ec:	1085883a 	add	r2,r2,r2
    39f0:	a885883a 	add	r2,r21,r2
    39f4:	11000017 	ldw	r4,0(r2)
    39f8:	00068c80 	call	68c8 <__hi0bits>
    39fc:	b885c83a 	sub	r2,r23,r2
    3a00:	1585883a 	add	r2,r2,r22
    3a04:	108007cc 	andi	r2,r2,31
    3a08:	1000b326 	beq	r2,zero,3cd8 <_dtoa_r+0xda0>
    3a0c:	00c00804 	movi	r3,32
    3a10:	1887c83a 	sub	r3,r3,r2
    3a14:	01000104 	movi	r4,4
    3a18:	20c2cd0e 	bge	r4,r3,4550 <_dtoa_r+0x1618>
    3a1c:	00c00704 	movi	r3,28
    3a20:	1885c83a 	sub	r2,r3,r2
    3a24:	d8c00817 	ldw	r3,32(sp)
    3a28:	a0a9883a 	add	r20,r20,r2
    3a2c:	b0ad883a 	add	r22,r22,r2
    3a30:	1887883a 	add	r3,r3,r2
    3a34:	d8c00815 	stw	r3,32(sp)
    3a38:	d9800817 	ldw	r6,32(sp)
    3a3c:	0180040e 	bge	zero,r6,3a50 <_dtoa_r+0xb18>
    3a40:	800b883a 	mov	r5,r16
    3a44:	e009883a 	mov	r4,fp
    3a48:	0006d540 	call	6d54 <__lshift>
    3a4c:	1021883a 	mov	r16,r2
    3a50:	0580050e 	bge	zero,r22,3a68 <_dtoa_r+0xb30>
    3a54:	a80b883a 	mov	r5,r21
    3a58:	b00d883a 	mov	r6,r22
    3a5c:	e009883a 	mov	r4,fp
    3a60:	0006d540 	call	6d54 <__lshift>
    3a64:	102b883a 	mov	r21,r2
    3a68:	d9c00e17 	ldw	r7,56(sp)
    3a6c:	3801211e 	bne	r7,zero,3ef4 <_dtoa_r+0xfbc>
    3a70:	d9800617 	ldw	r6,24(sp)
    3a74:	0181380e 	bge	zero,r6,3f58 <_dtoa_r+0x1020>
    3a78:	d8c00b17 	ldw	r3,44(sp)
    3a7c:	1800ab1e 	bne	r3,zero,3d2c <_dtoa_r+0xdf4>
    3a80:	dc800717 	ldw	r18,28(sp)
    3a84:	dcc00617 	ldw	r19,24(sp)
    3a88:	9029883a 	mov	r20,r18
    3a8c:	00000206 	br	3a98 <_dtoa_r+0xb60>
    3a90:	00066a40 	call	66a4 <__multadd>
    3a94:	1021883a 	mov	r16,r2
    3a98:	a80b883a 	mov	r5,r21
    3a9c:	8009883a 	mov	r4,r16
    3aa0:	0002d380 	call	2d38 <quorem>
    3aa4:	10800c04 	addi	r2,r2,48
    3aa8:	90800005 	stb	r2,0(r18)
    3aac:	94800044 	addi	r18,r18,1
    3ab0:	9507c83a 	sub	r3,r18,r20
    3ab4:	000f883a 	mov	r7,zero
    3ab8:	01800284 	movi	r6,10
    3abc:	800b883a 	mov	r5,r16
    3ac0:	e009883a 	mov	r4,fp
    3ac4:	1cfff216 	blt	r3,r19,3a90 <__alt_data_end+0xfffe3a90>
    3ac8:	1011883a 	mov	r8,r2
    3acc:	d8800617 	ldw	r2,24(sp)
    3ad0:	0082370e 	bge	zero,r2,43b0 <_dtoa_r+0x1478>
    3ad4:	d9000717 	ldw	r4,28(sp)
    3ad8:	0025883a 	mov	r18,zero
    3adc:	20af883a 	add	r23,r4,r2
    3ae0:	01800044 	movi	r6,1
    3ae4:	800b883a 	mov	r5,r16
    3ae8:	e009883a 	mov	r4,fp
    3aec:	da001715 	stw	r8,92(sp)
    3af0:	0006d540 	call	6d54 <__lshift>
    3af4:	a80b883a 	mov	r5,r21
    3af8:	1009883a 	mov	r4,r2
    3afc:	d8800915 	stw	r2,36(sp)
    3b00:	0006e9c0 	call	6e9c <__mcmp>
    3b04:	da001717 	ldw	r8,92(sp)
    3b08:	0081800e 	bge	zero,r2,410c <_dtoa_r+0x11d4>
    3b0c:	b93fffc3 	ldbu	r4,-1(r23)
    3b10:	b8bfffc4 	addi	r2,r23,-1
    3b14:	1007883a 	mov	r3,r2
    3b18:	01800e44 	movi	r6,57
    3b1c:	d9c00717 	ldw	r7,28(sp)
    3b20:	00000506 	br	3b38 <_dtoa_r+0xc00>
    3b24:	18ffffc4 	addi	r3,r3,-1
    3b28:	11c12326 	beq	r2,r7,3fb8 <_dtoa_r+0x1080>
    3b2c:	19000003 	ldbu	r4,0(r3)
    3b30:	102f883a 	mov	r23,r2
    3b34:	10bfffc4 	addi	r2,r2,-1
    3b38:	21403fcc 	andi	r5,r4,255
    3b3c:	2940201c 	xori	r5,r5,128
    3b40:	297fe004 	addi	r5,r5,-128
    3b44:	29bff726 	beq	r5,r6,3b24 <__alt_data_end+0xfffe3b24>
    3b48:	21000044 	addi	r4,r4,1
    3b4c:	11000005 	stb	r4,0(r2)
    3b50:	a80b883a 	mov	r5,r21
    3b54:	e009883a 	mov	r4,fp
    3b58:	000667c0 	call	667c <_Bfree>
    3b5c:	883ea026 	beq	r17,zero,35e0 <__alt_data_end+0xfffe35e0>
    3b60:	90000426 	beq	r18,zero,3b74 <_dtoa_r+0xc3c>
    3b64:	94400326 	beq	r18,r17,3b74 <_dtoa_r+0xc3c>
    3b68:	900b883a 	mov	r5,r18
    3b6c:	e009883a 	mov	r4,fp
    3b70:	000667c0 	call	667c <_Bfree>
    3b74:	880b883a 	mov	r5,r17
    3b78:	e009883a 	mov	r4,fp
    3b7c:	000667c0 	call	667c <_Bfree>
    3b80:	003e9706 	br	35e0 <__alt_data_end+0xfffe35e0>
    3b84:	01800044 	movi	r6,1
    3b88:	d9800e15 	stw	r6,56(sp)
    3b8c:	003d9606 	br	31e8 <__alt_data_end+0xfffe31e8>
    3b90:	d8800817 	ldw	r2,32(sp)
    3b94:	d8c00517 	ldw	r3,20(sp)
    3b98:	d8000d15 	stw	zero,52(sp)
    3b9c:	10c5c83a 	sub	r2,r2,r3
    3ba0:	00c9c83a 	sub	r4,zero,r3
    3ba4:	d8800815 	stw	r2,32(sp)
    3ba8:	d9000a15 	stw	r4,40(sp)
    3bac:	003d9706 	br	320c <__alt_data_end+0xfffe320c>
    3bb0:	05adc83a 	sub	r22,zero,r22
    3bb4:	dd800815 	stw	r22,32(sp)
    3bb8:	002d883a 	mov	r22,zero
    3bbc:	003d8e06 	br	31f8 <__alt_data_end+0xfffe31f8>
    3bc0:	d9000517 	ldw	r4,20(sp)
    3bc4:	000ccc00 	call	ccc0 <__floatsidf>
    3bc8:	100d883a 	mov	r6,r2
    3bcc:	180f883a 	mov	r7,r3
    3bd0:	a009883a 	mov	r4,r20
    3bd4:	880b883a 	mov	r5,r17
    3bd8:	000b9d40 	call	b9d4 <__eqdf2>
    3bdc:	103d7126 	beq	r2,zero,31a4 <__alt_data_end+0xfffe31a4>
    3be0:	d9c00517 	ldw	r7,20(sp)
    3be4:	39ffffc4 	addi	r7,r7,-1
    3be8:	d9c00515 	stw	r7,20(sp)
    3bec:	003d6d06 	br	31a4 <__alt_data_end+0xfffe31a4>
    3bf0:	dd400a17 	ldw	r21,40(sp)
    3bf4:	dd000817 	ldw	r20,32(sp)
    3bf8:	0023883a 	mov	r17,zero
    3bfc:	003f4806 	br	3920 <__alt_data_end+0xfffe3920>
    3c00:	10e3c83a 	sub	r17,r2,r3
    3c04:	9448983a 	sll	r4,r18,r17
    3c08:	003d3206 	br	30d4 <__alt_data_end+0xfffe30d4>
    3c0c:	d8000e15 	stw	zero,56(sp)
    3c10:	003d7506 	br	31e8 <__alt_data_end+0xfffe31e8>
    3c14:	b005883a 	mov	r2,r22
    3c18:	003f4506 	br	3930 <__alt_data_end+0xfffe3930>
    3c1c:	dc000915 	stw	r16,36(sp)
    3c20:	d9800a17 	ldw	r6,40(sp)
    3c24:	d9400917 	ldw	r5,36(sp)
    3c28:	e009883a 	mov	r4,fp
    3c2c:	0006c140 	call	6c14 <__pow5mult>
    3c30:	1021883a 	mov	r16,r2
    3c34:	003f5a06 	br	39a0 <__alt_data_end+0xfffe39a0>
    3c38:	01c00044 	movi	r7,1
    3c3c:	d9c00b15 	stw	r7,44(sp)
    3c40:	d8802217 	ldw	r2,136(sp)
    3c44:	0081280e 	bge	zero,r2,40e8 <_dtoa_r+0x11b0>
    3c48:	100d883a 	mov	r6,r2
    3c4c:	1021883a 	mov	r16,r2
    3c50:	d8800c15 	stw	r2,48(sp)
    3c54:	d8800615 	stw	r2,24(sp)
    3c58:	003d8806 	br	327c <__alt_data_end+0xfffe327c>
    3c5c:	d8800617 	ldw	r2,24(sp)
    3c60:	00be9b16 	blt	zero,r2,36d0 <__alt_data_end+0xfffe36d0>
    3c64:	10010f1e 	bne	r2,zero,40a4 <_dtoa_r+0x116c>
    3c68:	880b883a 	mov	r5,r17
    3c6c:	000d883a 	mov	r6,zero
    3c70:	01d00534 	movhi	r7,16404
    3c74:	8009883a 	mov	r4,r16
    3c78:	000bc2c0 	call	bc2c <__muldf3>
    3c7c:	900d883a 	mov	r6,r18
    3c80:	980f883a 	mov	r7,r19
    3c84:	1009883a 	mov	r4,r2
    3c88:	180b883a 	mov	r5,r3
    3c8c:	000ba5c0 	call	ba5c <__gedf2>
    3c90:	002b883a 	mov	r21,zero
    3c94:	0023883a 	mov	r17,zero
    3c98:	1000bf16 	blt	r2,zero,3f98 <_dtoa_r+0x1060>
    3c9c:	d9802217 	ldw	r6,136(sp)
    3ca0:	ddc00717 	ldw	r23,28(sp)
    3ca4:	018c303a 	nor	r6,zero,r6
    3ca8:	d9800515 	stw	r6,20(sp)
    3cac:	a80b883a 	mov	r5,r21
    3cb0:	e009883a 	mov	r4,fp
    3cb4:	000667c0 	call	667c <_Bfree>
    3cb8:	883e4926 	beq	r17,zero,35e0 <__alt_data_end+0xfffe35e0>
    3cbc:	003fad06 	br	3b74 <__alt_data_end+0xfffe3b74>
    3cc0:	d9c01117 	ldw	r7,68(sp)
    3cc4:	3801bc26 	beq	r7,zero,43b8 <_dtoa_r+0x1480>
    3cc8:	10810cc4 	addi	r2,r2,1075
    3ccc:	dd400a17 	ldw	r21,40(sp)
    3cd0:	dd000817 	ldw	r20,32(sp)
    3cd4:	003f0a06 	br	3900 <__alt_data_end+0xfffe3900>
    3cd8:	00800704 	movi	r2,28
    3cdc:	d9000817 	ldw	r4,32(sp)
    3ce0:	a0a9883a 	add	r20,r20,r2
    3ce4:	b0ad883a 	add	r22,r22,r2
    3ce8:	2089883a 	add	r4,r4,r2
    3cec:	d9000815 	stw	r4,32(sp)
    3cf0:	003f5106 	br	3a38 <__alt_data_end+0xfffe3a38>
    3cf4:	d8c00317 	ldw	r3,12(sp)
    3cf8:	b8c1fc0e 	bge	r23,r3,44ec <_dtoa_r+0x15b4>
    3cfc:	0027883a 	mov	r19,zero
    3d00:	b805883a 	mov	r2,r23
    3d04:	003f3e06 	br	3a00 <__alt_data_end+0xfffe3a00>
    3d08:	880b883a 	mov	r5,r17
    3d0c:	e009883a 	mov	r4,fp
    3d10:	000f883a 	mov	r7,zero
    3d14:	01800284 	movi	r6,10
    3d18:	00066a40 	call	66a4 <__multadd>
    3d1c:	d9000c17 	ldw	r4,48(sp)
    3d20:	1023883a 	mov	r17,r2
    3d24:	0102040e 	bge	zero,r4,4538 <_dtoa_r+0x1600>
    3d28:	d9000615 	stw	r4,24(sp)
    3d2c:	0500050e 	bge	zero,r20,3d44 <_dtoa_r+0xe0c>
    3d30:	880b883a 	mov	r5,r17
    3d34:	a00d883a 	mov	r6,r20
    3d38:	e009883a 	mov	r4,fp
    3d3c:	0006d540 	call	6d54 <__lshift>
    3d40:	1023883a 	mov	r17,r2
    3d44:	9801241e 	bne	r19,zero,41d8 <_dtoa_r+0x12a0>
    3d48:	8829883a 	mov	r20,r17
    3d4c:	d9000617 	ldw	r4,24(sp)
    3d50:	dcc00717 	ldw	r19,28(sp)
    3d54:	9480004c 	andi	r18,r18,1
    3d58:	20bfffc4 	addi	r2,r4,-1
    3d5c:	9885883a 	add	r2,r19,r2
    3d60:	d8800415 	stw	r2,16(sp)
    3d64:	dc800615 	stw	r18,24(sp)
    3d68:	a80b883a 	mov	r5,r21
    3d6c:	8009883a 	mov	r4,r16
    3d70:	0002d380 	call	2d38 <quorem>
    3d74:	880b883a 	mov	r5,r17
    3d78:	8009883a 	mov	r4,r16
    3d7c:	102f883a 	mov	r23,r2
    3d80:	0006e9c0 	call	6e9c <__mcmp>
    3d84:	a80b883a 	mov	r5,r21
    3d88:	a00d883a 	mov	r6,r20
    3d8c:	e009883a 	mov	r4,fp
    3d90:	102d883a 	mov	r22,r2
    3d94:	0006efc0 	call	6efc <__mdiff>
    3d98:	1007883a 	mov	r3,r2
    3d9c:	10800317 	ldw	r2,12(r2)
    3da0:	bc800c04 	addi	r18,r23,48
    3da4:	180b883a 	mov	r5,r3
    3da8:	10004e1e 	bne	r2,zero,3ee4 <_dtoa_r+0xfac>
    3dac:	8009883a 	mov	r4,r16
    3db0:	d8c01615 	stw	r3,88(sp)
    3db4:	0006e9c0 	call	6e9c <__mcmp>
    3db8:	d8c01617 	ldw	r3,88(sp)
    3dbc:	e009883a 	mov	r4,fp
    3dc0:	d8801615 	stw	r2,88(sp)
    3dc4:	180b883a 	mov	r5,r3
    3dc8:	000667c0 	call	667c <_Bfree>
    3dcc:	d8801617 	ldw	r2,88(sp)
    3dd0:	1000041e 	bne	r2,zero,3de4 <_dtoa_r+0xeac>
    3dd4:	d9800317 	ldw	r6,12(sp)
    3dd8:	3000021e 	bne	r6,zero,3de4 <_dtoa_r+0xeac>
    3ddc:	d8c00617 	ldw	r3,24(sp)
    3de0:	18003726 	beq	r3,zero,3ec0 <_dtoa_r+0xf88>
    3de4:	b0002016 	blt	r22,zero,3e68 <_dtoa_r+0xf30>
    3de8:	b000041e 	bne	r22,zero,3dfc <_dtoa_r+0xec4>
    3dec:	d9000317 	ldw	r4,12(sp)
    3df0:	2000021e 	bne	r4,zero,3dfc <_dtoa_r+0xec4>
    3df4:	d8c00617 	ldw	r3,24(sp)
    3df8:	18001b26 	beq	r3,zero,3e68 <_dtoa_r+0xf30>
    3dfc:	00810716 	blt	zero,r2,421c <_dtoa_r+0x12e4>
    3e00:	d8c00417 	ldw	r3,16(sp)
    3e04:	9d800044 	addi	r22,r19,1
    3e08:	9c800005 	stb	r18,0(r19)
    3e0c:	b02f883a 	mov	r23,r22
    3e10:	98c10626 	beq	r19,r3,422c <_dtoa_r+0x12f4>
    3e14:	800b883a 	mov	r5,r16
    3e18:	000f883a 	mov	r7,zero
    3e1c:	01800284 	movi	r6,10
    3e20:	e009883a 	mov	r4,fp
    3e24:	00066a40 	call	66a4 <__multadd>
    3e28:	1021883a 	mov	r16,r2
    3e2c:	000f883a 	mov	r7,zero
    3e30:	01800284 	movi	r6,10
    3e34:	880b883a 	mov	r5,r17
    3e38:	e009883a 	mov	r4,fp
    3e3c:	8d002526 	beq	r17,r20,3ed4 <_dtoa_r+0xf9c>
    3e40:	00066a40 	call	66a4 <__multadd>
    3e44:	a00b883a 	mov	r5,r20
    3e48:	000f883a 	mov	r7,zero
    3e4c:	01800284 	movi	r6,10
    3e50:	e009883a 	mov	r4,fp
    3e54:	1023883a 	mov	r17,r2
    3e58:	00066a40 	call	66a4 <__multadd>
    3e5c:	1029883a 	mov	r20,r2
    3e60:	b027883a 	mov	r19,r22
    3e64:	003fc006 	br	3d68 <__alt_data_end+0xfffe3d68>
    3e68:	9011883a 	mov	r8,r18
    3e6c:	00800e0e 	bge	zero,r2,3ea8 <_dtoa_r+0xf70>
    3e70:	800b883a 	mov	r5,r16
    3e74:	01800044 	movi	r6,1
    3e78:	e009883a 	mov	r4,fp
    3e7c:	da001715 	stw	r8,92(sp)
    3e80:	0006d540 	call	6d54 <__lshift>
    3e84:	a80b883a 	mov	r5,r21
    3e88:	1009883a 	mov	r4,r2
    3e8c:	1021883a 	mov	r16,r2
    3e90:	0006e9c0 	call	6e9c <__mcmp>
    3e94:	da001717 	ldw	r8,92(sp)
    3e98:	0081960e 	bge	zero,r2,44f4 <_dtoa_r+0x15bc>
    3e9c:	00800e44 	movi	r2,57
    3ea0:	40817026 	beq	r8,r2,4464 <_dtoa_r+0x152c>
    3ea4:	ba000c44 	addi	r8,r23,49
    3ea8:	8825883a 	mov	r18,r17
    3eac:	9dc00044 	addi	r23,r19,1
    3eb0:	9a000005 	stb	r8,0(r19)
    3eb4:	a023883a 	mov	r17,r20
    3eb8:	dc000915 	stw	r16,36(sp)
    3ebc:	003f2406 	br	3b50 <__alt_data_end+0xfffe3b50>
    3ec0:	00800e44 	movi	r2,57
    3ec4:	9011883a 	mov	r8,r18
    3ec8:	90816626 	beq	r18,r2,4464 <_dtoa_r+0x152c>
    3ecc:	05bff516 	blt	zero,r22,3ea4 <__alt_data_end+0xfffe3ea4>
    3ed0:	003ff506 	br	3ea8 <__alt_data_end+0xfffe3ea8>
    3ed4:	00066a40 	call	66a4 <__multadd>
    3ed8:	1023883a 	mov	r17,r2
    3edc:	1029883a 	mov	r20,r2
    3ee0:	003fdf06 	br	3e60 <__alt_data_end+0xfffe3e60>
    3ee4:	e009883a 	mov	r4,fp
    3ee8:	000667c0 	call	667c <_Bfree>
    3eec:	00800044 	movi	r2,1
    3ef0:	003fbc06 	br	3de4 <__alt_data_end+0xfffe3de4>
    3ef4:	a80b883a 	mov	r5,r21
    3ef8:	8009883a 	mov	r4,r16
    3efc:	0006e9c0 	call	6e9c <__mcmp>
    3f00:	103edb0e 	bge	r2,zero,3a70 <__alt_data_end+0xfffe3a70>
    3f04:	800b883a 	mov	r5,r16
    3f08:	000f883a 	mov	r7,zero
    3f0c:	01800284 	movi	r6,10
    3f10:	e009883a 	mov	r4,fp
    3f14:	00066a40 	call	66a4 <__multadd>
    3f18:	1021883a 	mov	r16,r2
    3f1c:	d8800517 	ldw	r2,20(sp)
    3f20:	d8c00b17 	ldw	r3,44(sp)
    3f24:	10bfffc4 	addi	r2,r2,-1
    3f28:	d8800515 	stw	r2,20(sp)
    3f2c:	183f761e 	bne	r3,zero,3d08 <__alt_data_end+0xfffe3d08>
    3f30:	d9000c17 	ldw	r4,48(sp)
    3f34:	0101730e 	bge	zero,r4,4504 <_dtoa_r+0x15cc>
    3f38:	d9000615 	stw	r4,24(sp)
    3f3c:	003ed006 	br	3a80 <__alt_data_end+0xfffe3a80>
    3f40:	00800084 	movi	r2,2
    3f44:	3081861e 	bne	r6,r2,4560 <_dtoa_r+0x1628>
    3f48:	d8000b15 	stw	zero,44(sp)
    3f4c:	003f3c06 	br	3c40 <__alt_data_end+0xfffe3c40>
    3f50:	dc000917 	ldw	r16,36(sp)
    3f54:	003e9206 	br	39a0 <__alt_data_end+0xfffe39a0>
    3f58:	d9c00317 	ldw	r7,12(sp)
    3f5c:	00800084 	movi	r2,2
    3f60:	11fec50e 	bge	r2,r7,3a78 <__alt_data_end+0xfffe3a78>
    3f64:	d9000617 	ldw	r4,24(sp)
    3f68:	20013c1e 	bne	r4,zero,445c <_dtoa_r+0x1524>
    3f6c:	a80b883a 	mov	r5,r21
    3f70:	000f883a 	mov	r7,zero
    3f74:	01800144 	movi	r6,5
    3f78:	e009883a 	mov	r4,fp
    3f7c:	00066a40 	call	66a4 <__multadd>
    3f80:	100b883a 	mov	r5,r2
    3f84:	8009883a 	mov	r4,r16
    3f88:	102b883a 	mov	r21,r2
    3f8c:	0006e9c0 	call	6e9c <__mcmp>
    3f90:	dc000915 	stw	r16,36(sp)
    3f94:	00bf410e 	bge	zero,r2,3c9c <__alt_data_end+0xfffe3c9c>
    3f98:	d9c00717 	ldw	r7,28(sp)
    3f9c:	00800c44 	movi	r2,49
    3fa0:	38800005 	stb	r2,0(r7)
    3fa4:	d8800517 	ldw	r2,20(sp)
    3fa8:	3dc00044 	addi	r23,r7,1
    3fac:	10800044 	addi	r2,r2,1
    3fb0:	d8800515 	stw	r2,20(sp)
    3fb4:	003f3d06 	br	3cac <__alt_data_end+0xfffe3cac>
    3fb8:	d9800517 	ldw	r6,20(sp)
    3fbc:	d9c00717 	ldw	r7,28(sp)
    3fc0:	00800c44 	movi	r2,49
    3fc4:	31800044 	addi	r6,r6,1
    3fc8:	d9800515 	stw	r6,20(sp)
    3fcc:	38800005 	stb	r2,0(r7)
    3fd0:	003edf06 	br	3b50 <__alt_data_end+0xfffe3b50>
    3fd4:	d8000b15 	stw	zero,44(sp)
    3fd8:	003c9f06 	br	3258 <__alt_data_end+0xfffe3258>
    3fdc:	903e7e1e 	bne	r18,zero,39d8 <__alt_data_end+0xfffe39d8>
    3fe0:	00800434 	movhi	r2,16
    3fe4:	10bfffc4 	addi	r2,r2,-1
    3fe8:	9884703a 	and	r2,r19,r2
    3fec:	1000ea1e 	bne	r2,zero,4398 <_dtoa_r+0x1460>
    3ff0:	9cdffc2c 	andhi	r19,r19,32752
    3ff4:	9800e826 	beq	r19,zero,4398 <_dtoa_r+0x1460>
    3ff8:	d9c00817 	ldw	r7,32(sp)
    3ffc:	b5800044 	addi	r22,r22,1
    4000:	04c00044 	movi	r19,1
    4004:	39c00044 	addi	r7,r7,1
    4008:	d9c00815 	stw	r7,32(sp)
    400c:	d8800d17 	ldw	r2,52(sp)
    4010:	103e721e 	bne	r2,zero,39dc <__alt_data_end+0xfffe39dc>
    4014:	00800044 	movi	r2,1
    4018:	003e7906 	br	3a00 <__alt_data_end+0xfffe3a00>
    401c:	8009883a 	mov	r4,r16
    4020:	000ccc00 	call	ccc0 <__floatsidf>
    4024:	d9800f17 	ldw	r6,60(sp)
    4028:	d9c01017 	ldw	r7,64(sp)
    402c:	1009883a 	mov	r4,r2
    4030:	180b883a 	mov	r5,r3
    4034:	000bc2c0 	call	bc2c <__muldf3>
    4038:	000d883a 	mov	r6,zero
    403c:	01d00734 	movhi	r7,16412
    4040:	1009883a 	mov	r4,r2
    4044:	180b883a 	mov	r5,r3
    4048:	000a8400 	call	a840 <__adddf3>
    404c:	047f3034 	movhi	r17,64704
    4050:	1021883a 	mov	r16,r2
    4054:	1c63883a 	add	r17,r3,r17
    4058:	d9000f17 	ldw	r4,60(sp)
    405c:	d9401017 	ldw	r5,64(sp)
    4060:	000d883a 	mov	r6,zero
    4064:	01d00534 	movhi	r7,16404
    4068:	000c3440 	call	c344 <__subdf3>
    406c:	800d883a 	mov	r6,r16
    4070:	880f883a 	mov	r7,r17
    4074:	1009883a 	mov	r4,r2
    4078:	180b883a 	mov	r5,r3
    407c:	102b883a 	mov	r21,r2
    4080:	1829883a 	mov	r20,r3
    4084:	000ba5c0 	call	ba5c <__gedf2>
    4088:	00806c16 	blt	zero,r2,423c <_dtoa_r+0x1304>
    408c:	89e0003c 	xorhi	r7,r17,32768
    4090:	800d883a 	mov	r6,r16
    4094:	a809883a 	mov	r4,r21
    4098:	a00b883a 	mov	r5,r20
    409c:	000bb380 	call	bb38 <__ledf2>
    40a0:	103d7e0e 	bge	r2,zero,369c <__alt_data_end+0xfffe369c>
    40a4:	002b883a 	mov	r21,zero
    40a8:	0023883a 	mov	r17,zero
    40ac:	003efb06 	br	3c9c <__alt_data_end+0xfffe3c9c>
    40b0:	d8800717 	ldw	r2,28(sp)
    40b4:	003bd006 	br	2ff8 <__alt_data_end+0xfffe2ff8>
    40b8:	d9000a17 	ldw	r4,40(sp)
    40bc:	d9800d17 	ldw	r6,52(sp)
    40c0:	dd400a15 	stw	r21,40(sp)
    40c4:	a905c83a 	sub	r2,r21,r4
    40c8:	308d883a 	add	r6,r6,r2
    40cc:	d9800d15 	stw	r6,52(sp)
    40d0:	002b883a 	mov	r21,zero
    40d4:	003e0606 	br	38f0 <__alt_data_end+0xfffe38f0>
    40d8:	9023883a 	mov	r17,r18
    40dc:	9829883a 	mov	r20,r19
    40e0:	04000084 	movi	r16,2
    40e4:	003c9206 	br	3330 <__alt_data_end+0xfffe3330>
    40e8:	04000044 	movi	r16,1
    40ec:	dc000c15 	stw	r16,48(sp)
    40f0:	dc000615 	stw	r16,24(sp)
    40f4:	dc002215 	stw	r16,136(sp)
    40f8:	e0001115 	stw	zero,68(fp)
    40fc:	000b883a 	mov	r5,zero
    4100:	003c6906 	br	32a8 <__alt_data_end+0xfffe32a8>
    4104:	3021883a 	mov	r16,r6
    4108:	003ffb06 	br	40f8 <__alt_data_end+0xfffe40f8>
    410c:	1000021e 	bne	r2,zero,4118 <_dtoa_r+0x11e0>
    4110:	4200004c 	andi	r8,r8,1
    4114:	403e7d1e 	bne	r8,zero,3b0c <__alt_data_end+0xfffe3b0c>
    4118:	01000c04 	movi	r4,48
    411c:	00000106 	br	4124 <_dtoa_r+0x11ec>
    4120:	102f883a 	mov	r23,r2
    4124:	b8bfffc4 	addi	r2,r23,-1
    4128:	10c00007 	ldb	r3,0(r2)
    412c:	193ffc26 	beq	r3,r4,4120 <__alt_data_end+0xfffe4120>
    4130:	003e8706 	br	3b50 <__alt_data_end+0xfffe3b50>
    4134:	d8800517 	ldw	r2,20(sp)
    4138:	00a3c83a 	sub	r17,zero,r2
    413c:	8800a426 	beq	r17,zero,43d0 <_dtoa_r+0x1498>
    4140:	888003cc 	andi	r2,r17,15
    4144:	100490fa 	slli	r2,r2,3
    4148:	00c00074 	movhi	r3,1
    414c:	18fdec04 	addi	r3,r3,-2128
    4150:	1885883a 	add	r2,r3,r2
    4154:	11800017 	ldw	r6,0(r2)
    4158:	11c00117 	ldw	r7,4(r2)
    415c:	9009883a 	mov	r4,r18
    4160:	980b883a 	mov	r5,r19
    4164:	8823d13a 	srai	r17,r17,4
    4168:	000bc2c0 	call	bc2c <__muldf3>
    416c:	d8800f15 	stw	r2,60(sp)
    4170:	d8c01015 	stw	r3,64(sp)
    4174:	8800e826 	beq	r17,zero,4518 <_dtoa_r+0x15e0>
    4178:	05000074 	movhi	r20,1
    417c:	a53de204 	addi	r20,r20,-2168
    4180:	04000084 	movi	r16,2
    4184:	8980004c 	andi	r6,r17,1
    4188:	1009883a 	mov	r4,r2
    418c:	8823d07a 	srai	r17,r17,1
    4190:	180b883a 	mov	r5,r3
    4194:	30000426 	beq	r6,zero,41a8 <_dtoa_r+0x1270>
    4198:	a1800017 	ldw	r6,0(r20)
    419c:	a1c00117 	ldw	r7,4(r20)
    41a0:	84000044 	addi	r16,r16,1
    41a4:	000bc2c0 	call	bc2c <__muldf3>
    41a8:	a5000204 	addi	r20,r20,8
    41ac:	883ff51e 	bne	r17,zero,4184 <__alt_data_end+0xfffe4184>
    41b0:	d8800f15 	stw	r2,60(sp)
    41b4:	d8c01015 	stw	r3,64(sp)
    41b8:	003c7606 	br	3394 <__alt_data_end+0xfffe3394>
    41bc:	00c00c04 	movi	r3,48
    41c0:	10c00005 	stb	r3,0(r2)
    41c4:	d8c00517 	ldw	r3,20(sp)
    41c8:	bd3fffc3 	ldbu	r20,-1(r23)
    41cc:	18c00044 	addi	r3,r3,1
    41d0:	d8c00515 	stw	r3,20(sp)
    41d4:	003db906 	br	38bc <__alt_data_end+0xfffe38bc>
    41d8:	89400117 	ldw	r5,4(r17)
    41dc:	e009883a 	mov	r4,fp
    41e0:	00065d40 	call	65d4 <_Balloc>
    41e4:	89800417 	ldw	r6,16(r17)
    41e8:	89400304 	addi	r5,r17,12
    41ec:	11000304 	addi	r4,r2,12
    41f0:	31800084 	addi	r6,r6,2
    41f4:	318d883a 	add	r6,r6,r6
    41f8:	318d883a 	add	r6,r6,r6
    41fc:	1027883a 	mov	r19,r2
    4200:	00062080 	call	6208 <memcpy>
    4204:	01800044 	movi	r6,1
    4208:	980b883a 	mov	r5,r19
    420c:	e009883a 	mov	r4,fp
    4210:	0006d540 	call	6d54 <__lshift>
    4214:	1029883a 	mov	r20,r2
    4218:	003ecc06 	br	3d4c <__alt_data_end+0xfffe3d4c>
    421c:	00800e44 	movi	r2,57
    4220:	90809026 	beq	r18,r2,4464 <_dtoa_r+0x152c>
    4224:	92000044 	addi	r8,r18,1
    4228:	003f1f06 	br	3ea8 <__alt_data_end+0xfffe3ea8>
    422c:	9011883a 	mov	r8,r18
    4230:	8825883a 	mov	r18,r17
    4234:	a023883a 	mov	r17,r20
    4238:	003e2906 	br	3ae0 <__alt_data_end+0xfffe3ae0>
    423c:	002b883a 	mov	r21,zero
    4240:	0023883a 	mov	r17,zero
    4244:	003f5406 	br	3f98 <__alt_data_end+0xfffe3f98>
    4248:	61bfffc4 	addi	r6,r12,-1
    424c:	300490fa 	slli	r2,r6,3
    4250:	00c00074 	movhi	r3,1
    4254:	18fdec04 	addi	r3,r3,-2128
    4258:	1885883a 	add	r2,r3,r2
    425c:	11000017 	ldw	r4,0(r2)
    4260:	11400117 	ldw	r5,4(r2)
    4264:	d8800717 	ldw	r2,28(sp)
    4268:	880f883a 	mov	r7,r17
    426c:	d9801215 	stw	r6,72(sp)
    4270:	800d883a 	mov	r6,r16
    4274:	db001615 	stw	r12,88(sp)
    4278:	15c00044 	addi	r23,r2,1
    427c:	000bc2c0 	call	bc2c <__muldf3>
    4280:	d9401017 	ldw	r5,64(sp)
    4284:	d9000f17 	ldw	r4,60(sp)
    4288:	d8c01515 	stw	r3,84(sp)
    428c:	d8801415 	stw	r2,80(sp)
    4290:	000cc400 	call	cc40 <__fixdfsi>
    4294:	1009883a 	mov	r4,r2
    4298:	1021883a 	mov	r16,r2
    429c:	000ccc00 	call	ccc0 <__floatsidf>
    42a0:	d9000f17 	ldw	r4,60(sp)
    42a4:	d9401017 	ldw	r5,64(sp)
    42a8:	100d883a 	mov	r6,r2
    42ac:	180f883a 	mov	r7,r3
    42b0:	000c3440 	call	c344 <__subdf3>
    42b4:	1829883a 	mov	r20,r3
    42b8:	d8c00717 	ldw	r3,28(sp)
    42bc:	84000c04 	addi	r16,r16,48
    42c0:	1023883a 	mov	r17,r2
    42c4:	1c000005 	stb	r16,0(r3)
    42c8:	db001617 	ldw	r12,88(sp)
    42cc:	00800044 	movi	r2,1
    42d0:	60802226 	beq	r12,r2,435c <_dtoa_r+0x1424>
    42d4:	d9c00717 	ldw	r7,28(sp)
    42d8:	8805883a 	mov	r2,r17
    42dc:	b82b883a 	mov	r21,r23
    42e0:	3b19883a 	add	r12,r7,r12
    42e4:	6023883a 	mov	r17,r12
    42e8:	a007883a 	mov	r3,r20
    42ec:	dc800f15 	stw	r18,60(sp)
    42f0:	000d883a 	mov	r6,zero
    42f4:	01d00934 	movhi	r7,16420
    42f8:	1009883a 	mov	r4,r2
    42fc:	180b883a 	mov	r5,r3
    4300:	000bc2c0 	call	bc2c <__muldf3>
    4304:	180b883a 	mov	r5,r3
    4308:	1009883a 	mov	r4,r2
    430c:	1829883a 	mov	r20,r3
    4310:	1025883a 	mov	r18,r2
    4314:	000cc400 	call	cc40 <__fixdfsi>
    4318:	1009883a 	mov	r4,r2
    431c:	1021883a 	mov	r16,r2
    4320:	000ccc00 	call	ccc0 <__floatsidf>
    4324:	100d883a 	mov	r6,r2
    4328:	180f883a 	mov	r7,r3
    432c:	9009883a 	mov	r4,r18
    4330:	a00b883a 	mov	r5,r20
    4334:	84000c04 	addi	r16,r16,48
    4338:	000c3440 	call	c344 <__subdf3>
    433c:	ad400044 	addi	r21,r21,1
    4340:	ac3fffc5 	stb	r16,-1(r21)
    4344:	ac7fea1e 	bne	r21,r17,42f0 <__alt_data_end+0xfffe42f0>
    4348:	1023883a 	mov	r17,r2
    434c:	d8801217 	ldw	r2,72(sp)
    4350:	dc800f17 	ldw	r18,60(sp)
    4354:	1829883a 	mov	r20,r3
    4358:	b8af883a 	add	r23,r23,r2
    435c:	d9001417 	ldw	r4,80(sp)
    4360:	d9401517 	ldw	r5,84(sp)
    4364:	000d883a 	mov	r6,zero
    4368:	01cff834 	movhi	r7,16352
    436c:	000a8400 	call	a840 <__adddf3>
    4370:	880d883a 	mov	r6,r17
    4374:	a00f883a 	mov	r7,r20
    4378:	1009883a 	mov	r4,r2
    437c:	180b883a 	mov	r5,r3
    4380:	000bb380 	call	bb38 <__ledf2>
    4384:	10003e0e 	bge	r2,zero,4480 <_dtoa_r+0x1548>
    4388:	d9001317 	ldw	r4,76(sp)
    438c:	bd3fffc3 	ldbu	r20,-1(r23)
    4390:	d9000515 	stw	r4,20(sp)
    4394:	003d3b06 	br	3884 <__alt_data_end+0xfffe3884>
    4398:	0027883a 	mov	r19,zero
    439c:	003f1b06 	br	400c <__alt_data_end+0xfffe400c>
    43a0:	d8800817 	ldw	r2,32(sp)
    43a4:	11e9c83a 	sub	r20,r2,r7
    43a8:	0005883a 	mov	r2,zero
    43ac:	003d5406 	br	3900 <__alt_data_end+0xfffe3900>
    43b0:	00800044 	movi	r2,1
    43b4:	003dc706 	br	3ad4 <__alt_data_end+0xfffe3ad4>
    43b8:	d8c00217 	ldw	r3,8(sp)
    43bc:	00800d84 	movi	r2,54
    43c0:	dd400a17 	ldw	r21,40(sp)
    43c4:	10c5c83a 	sub	r2,r2,r3
    43c8:	dd000817 	ldw	r20,32(sp)
    43cc:	003d4c06 	br	3900 <__alt_data_end+0xfffe3900>
    43d0:	dc800f15 	stw	r18,60(sp)
    43d4:	dcc01015 	stw	r19,64(sp)
    43d8:	04000084 	movi	r16,2
    43dc:	003bed06 	br	3394 <__alt_data_end+0xfffe3394>
    43e0:	d9000617 	ldw	r4,24(sp)
    43e4:	203f0d26 	beq	r4,zero,401c <__alt_data_end+0xfffe401c>
    43e8:	d9800c17 	ldw	r6,48(sp)
    43ec:	01bcab0e 	bge	zero,r6,369c <__alt_data_end+0xfffe369c>
    43f0:	d9401017 	ldw	r5,64(sp)
    43f4:	d9000f17 	ldw	r4,60(sp)
    43f8:	000d883a 	mov	r6,zero
    43fc:	01d00934 	movhi	r7,16420
    4400:	000bc2c0 	call	bc2c <__muldf3>
    4404:	81000044 	addi	r4,r16,1
    4408:	d8800f15 	stw	r2,60(sp)
    440c:	d8c01015 	stw	r3,64(sp)
    4410:	000ccc00 	call	ccc0 <__floatsidf>
    4414:	d9800f17 	ldw	r6,60(sp)
    4418:	d9c01017 	ldw	r7,64(sp)
    441c:	1009883a 	mov	r4,r2
    4420:	180b883a 	mov	r5,r3
    4424:	000bc2c0 	call	bc2c <__muldf3>
    4428:	01d00734 	movhi	r7,16412
    442c:	000d883a 	mov	r6,zero
    4430:	1009883a 	mov	r4,r2
    4434:	180b883a 	mov	r5,r3
    4438:	000a8400 	call	a840 <__adddf3>
    443c:	d9c00517 	ldw	r7,20(sp)
    4440:	047f3034 	movhi	r17,64704
    4444:	1021883a 	mov	r16,r2
    4448:	39ffffc4 	addi	r7,r7,-1
    444c:	d9c01315 	stw	r7,76(sp)
    4450:	1c63883a 	add	r17,r3,r17
    4454:	db000c17 	ldw	r12,48(sp)
    4458:	003bea06 	br	3404 <__alt_data_end+0xfffe3404>
    445c:	dc000915 	stw	r16,36(sp)
    4460:	003e0e06 	br	3c9c <__alt_data_end+0xfffe3c9c>
    4464:	01000e44 	movi	r4,57
    4468:	8825883a 	mov	r18,r17
    446c:	9dc00044 	addi	r23,r19,1
    4470:	99000005 	stb	r4,0(r19)
    4474:	a023883a 	mov	r17,r20
    4478:	dc000915 	stw	r16,36(sp)
    447c:	003da406 	br	3b10 <__alt_data_end+0xfffe3b10>
    4480:	d9801417 	ldw	r6,80(sp)
    4484:	d9c01517 	ldw	r7,84(sp)
    4488:	0009883a 	mov	r4,zero
    448c:	014ff834 	movhi	r5,16352
    4490:	000c3440 	call	c344 <__subdf3>
    4494:	880d883a 	mov	r6,r17
    4498:	a00f883a 	mov	r7,r20
    449c:	1009883a 	mov	r4,r2
    44a0:	180b883a 	mov	r5,r3
    44a4:	000ba5c0 	call	ba5c <__gedf2>
    44a8:	00bc7c0e 	bge	zero,r2,369c <__alt_data_end+0xfffe369c>
    44ac:	01000c04 	movi	r4,48
    44b0:	00000106 	br	44b8 <_dtoa_r+0x1580>
    44b4:	102f883a 	mov	r23,r2
    44b8:	b8bfffc4 	addi	r2,r23,-1
    44bc:	10c00007 	ldb	r3,0(r2)
    44c0:	193ffc26 	beq	r3,r4,44b4 <__alt_data_end+0xfffe44b4>
    44c4:	d9801317 	ldw	r6,76(sp)
    44c8:	d9800515 	stw	r6,20(sp)
    44cc:	003c4406 	br	35e0 <__alt_data_end+0xfffe35e0>
    44d0:	d9801317 	ldw	r6,76(sp)
    44d4:	d9800515 	stw	r6,20(sp)
    44d8:	003cea06 	br	3884 <__alt_data_end+0xfffe3884>
    44dc:	dd800f17 	ldw	r22,60(sp)
    44e0:	dcc01017 	ldw	r19,64(sp)
    44e4:	dc801217 	ldw	r18,72(sp)
    44e8:	003c6c06 	br	369c <__alt_data_end+0xfffe369c>
    44ec:	903e031e 	bne	r18,zero,3cfc <__alt_data_end+0xfffe3cfc>
    44f0:	003ebb06 	br	3fe0 <__alt_data_end+0xfffe3fe0>
    44f4:	103e6c1e 	bne	r2,zero,3ea8 <__alt_data_end+0xfffe3ea8>
    44f8:	4080004c 	andi	r2,r8,1
    44fc:	103e6a26 	beq	r2,zero,3ea8 <__alt_data_end+0xfffe3ea8>
    4500:	003e6606 	br	3e9c <__alt_data_end+0xfffe3e9c>
    4504:	d8c00317 	ldw	r3,12(sp)
    4508:	00800084 	movi	r2,2
    450c:	10c02916 	blt	r2,r3,45b4 <_dtoa_r+0x167c>
    4510:	d9000c17 	ldw	r4,48(sp)
    4514:	003e8806 	br	3f38 <__alt_data_end+0xfffe3f38>
    4518:	04000084 	movi	r16,2
    451c:	003b9d06 	br	3394 <__alt_data_end+0xfffe3394>
    4520:	d9001317 	ldw	r4,76(sp)
    4524:	d9000515 	stw	r4,20(sp)
    4528:	003cd606 	br	3884 <__alt_data_end+0xfffe3884>
    452c:	d8801317 	ldw	r2,76(sp)
    4530:	d8800515 	stw	r2,20(sp)
    4534:	003c2a06 	br	35e0 <__alt_data_end+0xfffe35e0>
    4538:	d9800317 	ldw	r6,12(sp)
    453c:	00800084 	movi	r2,2
    4540:	11801516 	blt	r2,r6,4598 <_dtoa_r+0x1660>
    4544:	d9c00c17 	ldw	r7,48(sp)
    4548:	d9c00615 	stw	r7,24(sp)
    454c:	003df706 	br	3d2c <__alt_data_end+0xfffe3d2c>
    4550:	193d3926 	beq	r3,r4,3a38 <__alt_data_end+0xfffe3a38>
    4554:	00c00f04 	movi	r3,60
    4558:	1885c83a 	sub	r2,r3,r2
    455c:	003ddf06 	br	3cdc <__alt_data_end+0xfffe3cdc>
    4560:	e009883a 	mov	r4,fp
    4564:	e0001115 	stw	zero,68(fp)
    4568:	000b883a 	mov	r5,zero
    456c:	00065d40 	call	65d4 <_Balloc>
    4570:	d8800715 	stw	r2,28(sp)
    4574:	d8c00717 	ldw	r3,28(sp)
    4578:	00bfffc4 	movi	r2,-1
    457c:	01000044 	movi	r4,1
    4580:	d8800c15 	stw	r2,48(sp)
    4584:	e0c01015 	stw	r3,64(fp)
    4588:	d9000b15 	stw	r4,44(sp)
    458c:	d8800615 	stw	r2,24(sp)
    4590:	d8002215 	stw	zero,136(sp)
    4594:	003c4106 	br	369c <__alt_data_end+0xfffe369c>
    4598:	d8c00c17 	ldw	r3,48(sp)
    459c:	d8c00615 	stw	r3,24(sp)
    45a0:	003e7006 	br	3f64 <__alt_data_end+0xfffe3f64>
    45a4:	04400044 	movi	r17,1
    45a8:	003b2006 	br	322c <__alt_data_end+0xfffe322c>
    45ac:	000b883a 	mov	r5,zero
    45b0:	003b3d06 	br	32a8 <__alt_data_end+0xfffe32a8>
    45b4:	d8800c17 	ldw	r2,48(sp)
    45b8:	d8800615 	stw	r2,24(sp)
    45bc:	003e6906 	br	3f64 <__alt_data_end+0xfffe3f64>

000045c0 <__sflush_r>:
    45c0:	2880030b 	ldhu	r2,12(r5)
    45c4:	defffb04 	addi	sp,sp,-20
    45c8:	dcc00315 	stw	r19,12(sp)
    45cc:	dc400115 	stw	r17,4(sp)
    45d0:	dfc00415 	stw	ra,16(sp)
    45d4:	dc800215 	stw	r18,8(sp)
    45d8:	dc000015 	stw	r16,0(sp)
    45dc:	10c0020c 	andi	r3,r2,8
    45e0:	2823883a 	mov	r17,r5
    45e4:	2027883a 	mov	r19,r4
    45e8:	1800311e 	bne	r3,zero,46b0 <__sflush_r+0xf0>
    45ec:	28c00117 	ldw	r3,4(r5)
    45f0:	10820014 	ori	r2,r2,2048
    45f4:	2880030d 	sth	r2,12(r5)
    45f8:	00c04b0e 	bge	zero,r3,4728 <__sflush_r+0x168>
    45fc:	8a000a17 	ldw	r8,40(r17)
    4600:	40002326 	beq	r8,zero,4690 <__sflush_r+0xd0>
    4604:	9c000017 	ldw	r16,0(r19)
    4608:	10c4000c 	andi	r3,r2,4096
    460c:	98000015 	stw	zero,0(r19)
    4610:	18004826 	beq	r3,zero,4734 <__sflush_r+0x174>
    4614:	89801417 	ldw	r6,80(r17)
    4618:	10c0010c 	andi	r3,r2,4
    461c:	18000626 	beq	r3,zero,4638 <__sflush_r+0x78>
    4620:	88c00117 	ldw	r3,4(r17)
    4624:	88800c17 	ldw	r2,48(r17)
    4628:	30cdc83a 	sub	r6,r6,r3
    462c:	10000226 	beq	r2,zero,4638 <__sflush_r+0x78>
    4630:	88800f17 	ldw	r2,60(r17)
    4634:	308dc83a 	sub	r6,r6,r2
    4638:	89400717 	ldw	r5,28(r17)
    463c:	000f883a 	mov	r7,zero
    4640:	9809883a 	mov	r4,r19
    4644:	403ee83a 	callr	r8
    4648:	00ffffc4 	movi	r3,-1
    464c:	10c04426 	beq	r2,r3,4760 <__sflush_r+0x1a0>
    4650:	88c0030b 	ldhu	r3,12(r17)
    4654:	89000417 	ldw	r4,16(r17)
    4658:	88000115 	stw	zero,4(r17)
    465c:	197dffcc 	andi	r5,r3,63487
    4660:	8940030d 	sth	r5,12(r17)
    4664:	89000015 	stw	r4,0(r17)
    4668:	18c4000c 	andi	r3,r3,4096
    466c:	18002c1e 	bne	r3,zero,4720 <__sflush_r+0x160>
    4670:	89400c17 	ldw	r5,48(r17)
    4674:	9c000015 	stw	r16,0(r19)
    4678:	28000526 	beq	r5,zero,4690 <__sflush_r+0xd0>
    467c:	88801004 	addi	r2,r17,64
    4680:	28800226 	beq	r5,r2,468c <__sflush_r+0xcc>
    4684:	9809883a 	mov	r4,r19
    4688:	0004d2c0 	call	4d2c <_free_r>
    468c:	88000c15 	stw	zero,48(r17)
    4690:	0005883a 	mov	r2,zero
    4694:	dfc00417 	ldw	ra,16(sp)
    4698:	dcc00317 	ldw	r19,12(sp)
    469c:	dc800217 	ldw	r18,8(sp)
    46a0:	dc400117 	ldw	r17,4(sp)
    46a4:	dc000017 	ldw	r16,0(sp)
    46a8:	dec00504 	addi	sp,sp,20
    46ac:	f800283a 	ret
    46b0:	2c800417 	ldw	r18,16(r5)
    46b4:	903ff626 	beq	r18,zero,4690 <__alt_data_end+0xfffe4690>
    46b8:	2c000017 	ldw	r16,0(r5)
    46bc:	108000cc 	andi	r2,r2,3
    46c0:	2c800015 	stw	r18,0(r5)
    46c4:	84a1c83a 	sub	r16,r16,r18
    46c8:	1000131e 	bne	r2,zero,4718 <__sflush_r+0x158>
    46cc:	28800517 	ldw	r2,20(r5)
    46d0:	88800215 	stw	r2,8(r17)
    46d4:	04000316 	blt	zero,r16,46e4 <__sflush_r+0x124>
    46d8:	003fed06 	br	4690 <__alt_data_end+0xfffe4690>
    46dc:	90a5883a 	add	r18,r18,r2
    46e0:	043feb0e 	bge	zero,r16,4690 <__alt_data_end+0xfffe4690>
    46e4:	88800917 	ldw	r2,36(r17)
    46e8:	89400717 	ldw	r5,28(r17)
    46ec:	800f883a 	mov	r7,r16
    46f0:	900d883a 	mov	r6,r18
    46f4:	9809883a 	mov	r4,r19
    46f8:	103ee83a 	callr	r2
    46fc:	80a1c83a 	sub	r16,r16,r2
    4700:	00bff616 	blt	zero,r2,46dc <__alt_data_end+0xfffe46dc>
    4704:	88c0030b 	ldhu	r3,12(r17)
    4708:	00bfffc4 	movi	r2,-1
    470c:	18c01014 	ori	r3,r3,64
    4710:	88c0030d 	sth	r3,12(r17)
    4714:	003fdf06 	br	4694 <__alt_data_end+0xfffe4694>
    4718:	0005883a 	mov	r2,zero
    471c:	003fec06 	br	46d0 <__alt_data_end+0xfffe46d0>
    4720:	88801415 	stw	r2,80(r17)
    4724:	003fd206 	br	4670 <__alt_data_end+0xfffe4670>
    4728:	28c00f17 	ldw	r3,60(r5)
    472c:	00ffb316 	blt	zero,r3,45fc <__alt_data_end+0xfffe45fc>
    4730:	003fd706 	br	4690 <__alt_data_end+0xfffe4690>
    4734:	89400717 	ldw	r5,28(r17)
    4738:	000d883a 	mov	r6,zero
    473c:	01c00044 	movi	r7,1
    4740:	9809883a 	mov	r4,r19
    4744:	403ee83a 	callr	r8
    4748:	100d883a 	mov	r6,r2
    474c:	00bfffc4 	movi	r2,-1
    4750:	30801426 	beq	r6,r2,47a4 <__sflush_r+0x1e4>
    4754:	8880030b 	ldhu	r2,12(r17)
    4758:	8a000a17 	ldw	r8,40(r17)
    475c:	003fae06 	br	4618 <__alt_data_end+0xfffe4618>
    4760:	98c00017 	ldw	r3,0(r19)
    4764:	183fba26 	beq	r3,zero,4650 <__alt_data_end+0xfffe4650>
    4768:	01000744 	movi	r4,29
    476c:	19000626 	beq	r3,r4,4788 <__sflush_r+0x1c8>
    4770:	01000584 	movi	r4,22
    4774:	19000426 	beq	r3,r4,4788 <__sflush_r+0x1c8>
    4778:	88c0030b 	ldhu	r3,12(r17)
    477c:	18c01014 	ori	r3,r3,64
    4780:	88c0030d 	sth	r3,12(r17)
    4784:	003fc306 	br	4694 <__alt_data_end+0xfffe4694>
    4788:	8880030b 	ldhu	r2,12(r17)
    478c:	88c00417 	ldw	r3,16(r17)
    4790:	88000115 	stw	zero,4(r17)
    4794:	10bdffcc 	andi	r2,r2,63487
    4798:	8880030d 	sth	r2,12(r17)
    479c:	88c00015 	stw	r3,0(r17)
    47a0:	003fb306 	br	4670 <__alt_data_end+0xfffe4670>
    47a4:	98800017 	ldw	r2,0(r19)
    47a8:	103fea26 	beq	r2,zero,4754 <__alt_data_end+0xfffe4754>
    47ac:	00c00744 	movi	r3,29
    47b0:	10c00226 	beq	r2,r3,47bc <__sflush_r+0x1fc>
    47b4:	00c00584 	movi	r3,22
    47b8:	10c0031e 	bne	r2,r3,47c8 <__sflush_r+0x208>
    47bc:	9c000015 	stw	r16,0(r19)
    47c0:	0005883a 	mov	r2,zero
    47c4:	003fb306 	br	4694 <__alt_data_end+0xfffe4694>
    47c8:	88c0030b 	ldhu	r3,12(r17)
    47cc:	3005883a 	mov	r2,r6
    47d0:	18c01014 	ori	r3,r3,64
    47d4:	88c0030d 	sth	r3,12(r17)
    47d8:	003fae06 	br	4694 <__alt_data_end+0xfffe4694>

000047dc <_fflush_r>:
    47dc:	defffd04 	addi	sp,sp,-12
    47e0:	dc000115 	stw	r16,4(sp)
    47e4:	dfc00215 	stw	ra,8(sp)
    47e8:	2021883a 	mov	r16,r4
    47ec:	20000226 	beq	r4,zero,47f8 <_fflush_r+0x1c>
    47f0:	20800e17 	ldw	r2,56(r4)
    47f4:	10000c26 	beq	r2,zero,4828 <_fflush_r+0x4c>
    47f8:	2880030f 	ldh	r2,12(r5)
    47fc:	1000051e 	bne	r2,zero,4814 <_fflush_r+0x38>
    4800:	0005883a 	mov	r2,zero
    4804:	dfc00217 	ldw	ra,8(sp)
    4808:	dc000117 	ldw	r16,4(sp)
    480c:	dec00304 	addi	sp,sp,12
    4810:	f800283a 	ret
    4814:	8009883a 	mov	r4,r16
    4818:	dfc00217 	ldw	ra,8(sp)
    481c:	dc000117 	ldw	r16,4(sp)
    4820:	dec00304 	addi	sp,sp,12
    4824:	00045c01 	jmpi	45c0 <__sflush_r>
    4828:	d9400015 	stw	r5,0(sp)
    482c:	0004bb80 	call	4bb8 <__sinit>
    4830:	d9400017 	ldw	r5,0(sp)
    4834:	003ff006 	br	47f8 <__alt_data_end+0xfffe47f8>

00004838 <fflush>:
    4838:	20000526 	beq	r4,zero,4850 <fflush+0x18>
    483c:	00800074 	movhi	r2,1
    4840:	10851f04 	addi	r2,r2,5244
    4844:	200b883a 	mov	r5,r4
    4848:	11000017 	ldw	r4,0(r2)
    484c:	00047dc1 	jmpi	47dc <_fflush_r>
    4850:	00800074 	movhi	r2,1
    4854:	10851e04 	addi	r2,r2,5240
    4858:	11000017 	ldw	r4,0(r2)
    485c:	01400034 	movhi	r5,0
    4860:	2951f704 	addi	r5,r5,18396
    4864:	00055bc1 	jmpi	55bc <_fwalk_reent>

00004868 <__fp_unlock>:
    4868:	0005883a 	mov	r2,zero
    486c:	f800283a 	ret

00004870 <_cleanup_r>:
    4870:	01400074 	movhi	r5,1
    4874:	29657504 	addi	r5,r5,-27180
    4878:	00055bc1 	jmpi	55bc <_fwalk_reent>

0000487c <__sinit.part.1>:
    487c:	defff704 	addi	sp,sp,-36
    4880:	00c00034 	movhi	r3,0
    4884:	dfc00815 	stw	ra,32(sp)
    4888:	ddc00715 	stw	r23,28(sp)
    488c:	dd800615 	stw	r22,24(sp)
    4890:	dd400515 	stw	r21,20(sp)
    4894:	dd000415 	stw	r20,16(sp)
    4898:	dcc00315 	stw	r19,12(sp)
    489c:	dc800215 	stw	r18,8(sp)
    48a0:	dc400115 	stw	r17,4(sp)
    48a4:	dc000015 	stw	r16,0(sp)
    48a8:	18d21c04 	addi	r3,r3,18544
    48ac:	24000117 	ldw	r16,4(r4)
    48b0:	20c00f15 	stw	r3,60(r4)
    48b4:	2080bb04 	addi	r2,r4,748
    48b8:	00c000c4 	movi	r3,3
    48bc:	20c0b915 	stw	r3,740(r4)
    48c0:	2080ba15 	stw	r2,744(r4)
    48c4:	2000b815 	stw	zero,736(r4)
    48c8:	05c00204 	movi	r23,8
    48cc:	00800104 	movi	r2,4
    48d0:	2025883a 	mov	r18,r4
    48d4:	b80d883a 	mov	r6,r23
    48d8:	81001704 	addi	r4,r16,92
    48dc:	000b883a 	mov	r5,zero
    48e0:	80000015 	stw	zero,0(r16)
    48e4:	80000115 	stw	zero,4(r16)
    48e8:	80000215 	stw	zero,8(r16)
    48ec:	8080030d 	sth	r2,12(r16)
    48f0:	80001915 	stw	zero,100(r16)
    48f4:	8000038d 	sth	zero,14(r16)
    48f8:	80000415 	stw	zero,16(r16)
    48fc:	80000515 	stw	zero,20(r16)
    4900:	80000615 	stw	zero,24(r16)
    4904:	00064ac0 	call	64ac <memset>
    4908:	05800034 	movhi	r22,0
    490c:	94400217 	ldw	r17,8(r18)
    4910:	05400034 	movhi	r21,0
    4914:	05000034 	movhi	r20,0
    4918:	04c00034 	movhi	r19,0
    491c:	b59eff04 	addi	r22,r22,31740
    4920:	ad5f1604 	addi	r21,r21,31832
    4924:	a51f3504 	addi	r20,r20,31956
    4928:	9cdf4c04 	addi	r19,r19,32048
    492c:	85800815 	stw	r22,32(r16)
    4930:	85400915 	stw	r21,36(r16)
    4934:	85000a15 	stw	r20,40(r16)
    4938:	84c00b15 	stw	r19,44(r16)
    493c:	84000715 	stw	r16,28(r16)
    4940:	00800284 	movi	r2,10
    4944:	8880030d 	sth	r2,12(r17)
    4948:	00800044 	movi	r2,1
    494c:	b80d883a 	mov	r6,r23
    4950:	89001704 	addi	r4,r17,92
    4954:	000b883a 	mov	r5,zero
    4958:	88000015 	stw	zero,0(r17)
    495c:	88000115 	stw	zero,4(r17)
    4960:	88000215 	stw	zero,8(r17)
    4964:	88001915 	stw	zero,100(r17)
    4968:	8880038d 	sth	r2,14(r17)
    496c:	88000415 	stw	zero,16(r17)
    4970:	88000515 	stw	zero,20(r17)
    4974:	88000615 	stw	zero,24(r17)
    4978:	00064ac0 	call	64ac <memset>
    497c:	94000317 	ldw	r16,12(r18)
    4980:	00800484 	movi	r2,18
    4984:	8c400715 	stw	r17,28(r17)
    4988:	8d800815 	stw	r22,32(r17)
    498c:	8d400915 	stw	r21,36(r17)
    4990:	8d000a15 	stw	r20,40(r17)
    4994:	8cc00b15 	stw	r19,44(r17)
    4998:	8080030d 	sth	r2,12(r16)
    499c:	00800084 	movi	r2,2
    49a0:	80000015 	stw	zero,0(r16)
    49a4:	80000115 	stw	zero,4(r16)
    49a8:	80000215 	stw	zero,8(r16)
    49ac:	80001915 	stw	zero,100(r16)
    49b0:	8080038d 	sth	r2,14(r16)
    49b4:	80000415 	stw	zero,16(r16)
    49b8:	80000515 	stw	zero,20(r16)
    49bc:	80000615 	stw	zero,24(r16)
    49c0:	b80d883a 	mov	r6,r23
    49c4:	000b883a 	mov	r5,zero
    49c8:	81001704 	addi	r4,r16,92
    49cc:	00064ac0 	call	64ac <memset>
    49d0:	00800044 	movi	r2,1
    49d4:	84000715 	stw	r16,28(r16)
    49d8:	85800815 	stw	r22,32(r16)
    49dc:	85400915 	stw	r21,36(r16)
    49e0:	85000a15 	stw	r20,40(r16)
    49e4:	84c00b15 	stw	r19,44(r16)
    49e8:	90800e15 	stw	r2,56(r18)
    49ec:	dfc00817 	ldw	ra,32(sp)
    49f0:	ddc00717 	ldw	r23,28(sp)
    49f4:	dd800617 	ldw	r22,24(sp)
    49f8:	dd400517 	ldw	r21,20(sp)
    49fc:	dd000417 	ldw	r20,16(sp)
    4a00:	dcc00317 	ldw	r19,12(sp)
    4a04:	dc800217 	ldw	r18,8(sp)
    4a08:	dc400117 	ldw	r17,4(sp)
    4a0c:	dc000017 	ldw	r16,0(sp)
    4a10:	dec00904 	addi	sp,sp,36
    4a14:	f800283a 	ret

00004a18 <__fp_lock>:
    4a18:	0005883a 	mov	r2,zero
    4a1c:	f800283a 	ret

00004a20 <__sfmoreglue>:
    4a20:	defffc04 	addi	sp,sp,-16
    4a24:	dc400115 	stw	r17,4(sp)
    4a28:	2c7fffc4 	addi	r17,r5,-1
    4a2c:	8c401a24 	muli	r17,r17,104
    4a30:	dc800215 	stw	r18,8(sp)
    4a34:	2825883a 	mov	r18,r5
    4a38:	89401d04 	addi	r5,r17,116
    4a3c:	dc000015 	stw	r16,0(sp)
    4a40:	dfc00315 	stw	ra,12(sp)
    4a44:	00059180 	call	5918 <_malloc_r>
    4a48:	1021883a 	mov	r16,r2
    4a4c:	10000726 	beq	r2,zero,4a6c <__sfmoreglue+0x4c>
    4a50:	11000304 	addi	r4,r2,12
    4a54:	10000015 	stw	zero,0(r2)
    4a58:	14800115 	stw	r18,4(r2)
    4a5c:	11000215 	stw	r4,8(r2)
    4a60:	89801a04 	addi	r6,r17,104
    4a64:	000b883a 	mov	r5,zero
    4a68:	00064ac0 	call	64ac <memset>
    4a6c:	8005883a 	mov	r2,r16
    4a70:	dfc00317 	ldw	ra,12(sp)
    4a74:	dc800217 	ldw	r18,8(sp)
    4a78:	dc400117 	ldw	r17,4(sp)
    4a7c:	dc000017 	ldw	r16,0(sp)
    4a80:	dec00404 	addi	sp,sp,16
    4a84:	f800283a 	ret

00004a88 <__sfp>:
    4a88:	defffb04 	addi	sp,sp,-20
    4a8c:	dc000015 	stw	r16,0(sp)
    4a90:	04000074 	movhi	r16,1
    4a94:	84051e04 	addi	r16,r16,5240
    4a98:	dcc00315 	stw	r19,12(sp)
    4a9c:	2027883a 	mov	r19,r4
    4aa0:	81000017 	ldw	r4,0(r16)
    4aa4:	dfc00415 	stw	ra,16(sp)
    4aa8:	dc800215 	stw	r18,8(sp)
    4aac:	20800e17 	ldw	r2,56(r4)
    4ab0:	dc400115 	stw	r17,4(sp)
    4ab4:	1000021e 	bne	r2,zero,4ac0 <__sfp+0x38>
    4ab8:	000487c0 	call	487c <__sinit.part.1>
    4abc:	81000017 	ldw	r4,0(r16)
    4ac0:	2480b804 	addi	r18,r4,736
    4ac4:	047fffc4 	movi	r17,-1
    4ac8:	91000117 	ldw	r4,4(r18)
    4acc:	94000217 	ldw	r16,8(r18)
    4ad0:	213fffc4 	addi	r4,r4,-1
    4ad4:	20000a16 	blt	r4,zero,4b00 <__sfp+0x78>
    4ad8:	8080030f 	ldh	r2,12(r16)
    4adc:	10000c26 	beq	r2,zero,4b10 <__sfp+0x88>
    4ae0:	80c01d04 	addi	r3,r16,116
    4ae4:	00000206 	br	4af0 <__sfp+0x68>
    4ae8:	18bfe60f 	ldh	r2,-104(r3)
    4aec:	10000826 	beq	r2,zero,4b10 <__sfp+0x88>
    4af0:	213fffc4 	addi	r4,r4,-1
    4af4:	1c3ffd04 	addi	r16,r3,-12
    4af8:	18c01a04 	addi	r3,r3,104
    4afc:	247ffa1e 	bne	r4,r17,4ae8 <__alt_data_end+0xfffe4ae8>
    4b00:	90800017 	ldw	r2,0(r18)
    4b04:	10001d26 	beq	r2,zero,4b7c <__sfp+0xf4>
    4b08:	1025883a 	mov	r18,r2
    4b0c:	003fee06 	br	4ac8 <__alt_data_end+0xfffe4ac8>
    4b10:	00bfffc4 	movi	r2,-1
    4b14:	8080038d 	sth	r2,14(r16)
    4b18:	00800044 	movi	r2,1
    4b1c:	8080030d 	sth	r2,12(r16)
    4b20:	80001915 	stw	zero,100(r16)
    4b24:	80000015 	stw	zero,0(r16)
    4b28:	80000215 	stw	zero,8(r16)
    4b2c:	80000115 	stw	zero,4(r16)
    4b30:	80000415 	stw	zero,16(r16)
    4b34:	80000515 	stw	zero,20(r16)
    4b38:	80000615 	stw	zero,24(r16)
    4b3c:	01800204 	movi	r6,8
    4b40:	000b883a 	mov	r5,zero
    4b44:	81001704 	addi	r4,r16,92
    4b48:	00064ac0 	call	64ac <memset>
    4b4c:	8005883a 	mov	r2,r16
    4b50:	80000c15 	stw	zero,48(r16)
    4b54:	80000d15 	stw	zero,52(r16)
    4b58:	80001115 	stw	zero,68(r16)
    4b5c:	80001215 	stw	zero,72(r16)
    4b60:	dfc00417 	ldw	ra,16(sp)
    4b64:	dcc00317 	ldw	r19,12(sp)
    4b68:	dc800217 	ldw	r18,8(sp)
    4b6c:	dc400117 	ldw	r17,4(sp)
    4b70:	dc000017 	ldw	r16,0(sp)
    4b74:	dec00504 	addi	sp,sp,20
    4b78:	f800283a 	ret
    4b7c:	01400104 	movi	r5,4
    4b80:	9809883a 	mov	r4,r19
    4b84:	0004a200 	call	4a20 <__sfmoreglue>
    4b88:	90800015 	stw	r2,0(r18)
    4b8c:	103fde1e 	bne	r2,zero,4b08 <__alt_data_end+0xfffe4b08>
    4b90:	00800304 	movi	r2,12
    4b94:	98800015 	stw	r2,0(r19)
    4b98:	0005883a 	mov	r2,zero
    4b9c:	003ff006 	br	4b60 <__alt_data_end+0xfffe4b60>

00004ba0 <_cleanup>:
    4ba0:	00800074 	movhi	r2,1
    4ba4:	10851e04 	addi	r2,r2,5240
    4ba8:	11000017 	ldw	r4,0(r2)
    4bac:	01400074 	movhi	r5,1
    4bb0:	29657504 	addi	r5,r5,-27180
    4bb4:	00055bc1 	jmpi	55bc <_fwalk_reent>

00004bb8 <__sinit>:
    4bb8:	20800e17 	ldw	r2,56(r4)
    4bbc:	10000126 	beq	r2,zero,4bc4 <__sinit+0xc>
    4bc0:	f800283a 	ret
    4bc4:	000487c1 	jmpi	487c <__sinit.part.1>

00004bc8 <__sfp_lock_acquire>:
    4bc8:	f800283a 	ret

00004bcc <__sfp_lock_release>:
    4bcc:	f800283a 	ret

00004bd0 <__sinit_lock_acquire>:
    4bd0:	f800283a 	ret

00004bd4 <__sinit_lock_release>:
    4bd4:	f800283a 	ret

00004bd8 <__fp_lock_all>:
    4bd8:	00800074 	movhi	r2,1
    4bdc:	10851f04 	addi	r2,r2,5244
    4be0:	11000017 	ldw	r4,0(r2)
    4be4:	01400034 	movhi	r5,0
    4be8:	29528604 	addi	r5,r5,18968
    4bec:	00054f81 	jmpi	54f8 <_fwalk>

00004bf0 <__fp_unlock_all>:
    4bf0:	00800074 	movhi	r2,1
    4bf4:	10851f04 	addi	r2,r2,5244
    4bf8:	11000017 	ldw	r4,0(r2)
    4bfc:	01400034 	movhi	r5,0
    4c00:	29521a04 	addi	r5,r5,18536
    4c04:	00054f81 	jmpi	54f8 <_fwalk>

00004c08 <_malloc_trim_r>:
    4c08:	defffb04 	addi	sp,sp,-20
    4c0c:	dcc00315 	stw	r19,12(sp)
    4c10:	04c00074 	movhi	r19,1
    4c14:	dc800215 	stw	r18,8(sp)
    4c18:	dc400115 	stw	r17,4(sp)
    4c1c:	dc000015 	stw	r16,0(sp)
    4c20:	dfc00415 	stw	ra,16(sp)
    4c24:	2821883a 	mov	r16,r5
    4c28:	9cff9a04 	addi	r19,r19,-408
    4c2c:	2025883a 	mov	r18,r4
    4c30:	000d4240 	call	d424 <__malloc_lock>
    4c34:	98800217 	ldw	r2,8(r19)
    4c38:	14400117 	ldw	r17,4(r2)
    4c3c:	00bfff04 	movi	r2,-4
    4c40:	88a2703a 	and	r17,r17,r2
    4c44:	8c21c83a 	sub	r16,r17,r16
    4c48:	8403fbc4 	addi	r16,r16,4079
    4c4c:	8020d33a 	srli	r16,r16,12
    4c50:	0083ffc4 	movi	r2,4095
    4c54:	843fffc4 	addi	r16,r16,-1
    4c58:	8020933a 	slli	r16,r16,12
    4c5c:	1400060e 	bge	r2,r16,4c78 <_malloc_trim_r+0x70>
    4c60:	000b883a 	mov	r5,zero
    4c64:	9009883a 	mov	r4,r18
    4c68:	0007ba80 	call	7ba8 <_sbrk_r>
    4c6c:	98c00217 	ldw	r3,8(r19)
    4c70:	1c47883a 	add	r3,r3,r17
    4c74:	10c00a26 	beq	r2,r3,4ca0 <_malloc_trim_r+0x98>
    4c78:	9009883a 	mov	r4,r18
    4c7c:	000d4480 	call	d448 <__malloc_unlock>
    4c80:	0005883a 	mov	r2,zero
    4c84:	dfc00417 	ldw	ra,16(sp)
    4c88:	dcc00317 	ldw	r19,12(sp)
    4c8c:	dc800217 	ldw	r18,8(sp)
    4c90:	dc400117 	ldw	r17,4(sp)
    4c94:	dc000017 	ldw	r16,0(sp)
    4c98:	dec00504 	addi	sp,sp,20
    4c9c:	f800283a 	ret
    4ca0:	040bc83a 	sub	r5,zero,r16
    4ca4:	9009883a 	mov	r4,r18
    4ca8:	0007ba80 	call	7ba8 <_sbrk_r>
    4cac:	00ffffc4 	movi	r3,-1
    4cb0:	10c00d26 	beq	r2,r3,4ce8 <_malloc_trim_r+0xe0>
    4cb4:	00c00074 	movhi	r3,1
    4cb8:	18cbf704 	addi	r3,r3,12252
    4cbc:	18800017 	ldw	r2,0(r3)
    4cc0:	99000217 	ldw	r4,8(r19)
    4cc4:	8c23c83a 	sub	r17,r17,r16
    4cc8:	8c400054 	ori	r17,r17,1
    4ccc:	1421c83a 	sub	r16,r2,r16
    4cd0:	24400115 	stw	r17,4(r4)
    4cd4:	9009883a 	mov	r4,r18
    4cd8:	1c000015 	stw	r16,0(r3)
    4cdc:	000d4480 	call	d448 <__malloc_unlock>
    4ce0:	00800044 	movi	r2,1
    4ce4:	003fe706 	br	4c84 <__alt_data_end+0xfffe4c84>
    4ce8:	000b883a 	mov	r5,zero
    4cec:	9009883a 	mov	r4,r18
    4cf0:	0007ba80 	call	7ba8 <_sbrk_r>
    4cf4:	99000217 	ldw	r4,8(r19)
    4cf8:	014003c4 	movi	r5,15
    4cfc:	1107c83a 	sub	r3,r2,r4
    4d00:	28ffdd0e 	bge	r5,r3,4c78 <__alt_data_end+0xfffe4c78>
    4d04:	01400074 	movhi	r5,1
    4d08:	29452104 	addi	r5,r5,5252
    4d0c:	29400017 	ldw	r5,0(r5)
    4d10:	18c00054 	ori	r3,r3,1
    4d14:	20c00115 	stw	r3,4(r4)
    4d18:	00c00074 	movhi	r3,1
    4d1c:	1145c83a 	sub	r2,r2,r5
    4d20:	18cbf704 	addi	r3,r3,12252
    4d24:	18800015 	stw	r2,0(r3)
    4d28:	003fd306 	br	4c78 <__alt_data_end+0xfffe4c78>

00004d2c <_free_r>:
    4d2c:	28004126 	beq	r5,zero,4e34 <_free_r+0x108>
    4d30:	defffd04 	addi	sp,sp,-12
    4d34:	dc400115 	stw	r17,4(sp)
    4d38:	dc000015 	stw	r16,0(sp)
    4d3c:	2023883a 	mov	r17,r4
    4d40:	2821883a 	mov	r16,r5
    4d44:	dfc00215 	stw	ra,8(sp)
    4d48:	000d4240 	call	d424 <__malloc_lock>
    4d4c:	81ffff17 	ldw	r7,-4(r16)
    4d50:	00bfff84 	movi	r2,-2
    4d54:	01000074 	movhi	r4,1
    4d58:	81bffe04 	addi	r6,r16,-8
    4d5c:	3884703a 	and	r2,r7,r2
    4d60:	213f9a04 	addi	r4,r4,-408
    4d64:	308b883a 	add	r5,r6,r2
    4d68:	2a400117 	ldw	r9,4(r5)
    4d6c:	22000217 	ldw	r8,8(r4)
    4d70:	00ffff04 	movi	r3,-4
    4d74:	48c6703a 	and	r3,r9,r3
    4d78:	2a005726 	beq	r5,r8,4ed8 <_free_r+0x1ac>
    4d7c:	28c00115 	stw	r3,4(r5)
    4d80:	39c0004c 	andi	r7,r7,1
    4d84:	3800091e 	bne	r7,zero,4dac <_free_r+0x80>
    4d88:	823ffe17 	ldw	r8,-8(r16)
    4d8c:	22400204 	addi	r9,r4,8
    4d90:	320dc83a 	sub	r6,r6,r8
    4d94:	31c00217 	ldw	r7,8(r6)
    4d98:	1205883a 	add	r2,r2,r8
    4d9c:	3a406526 	beq	r7,r9,4f34 <_free_r+0x208>
    4da0:	32000317 	ldw	r8,12(r6)
    4da4:	3a000315 	stw	r8,12(r7)
    4da8:	41c00215 	stw	r7,8(r8)
    4dac:	28cf883a 	add	r7,r5,r3
    4db0:	39c00117 	ldw	r7,4(r7)
    4db4:	39c0004c 	andi	r7,r7,1
    4db8:	38003a26 	beq	r7,zero,4ea4 <_free_r+0x178>
    4dbc:	10c00054 	ori	r3,r2,1
    4dc0:	30c00115 	stw	r3,4(r6)
    4dc4:	3087883a 	add	r3,r6,r2
    4dc8:	18800015 	stw	r2,0(r3)
    4dcc:	00c07fc4 	movi	r3,511
    4dd0:	18801936 	bltu	r3,r2,4e38 <_free_r+0x10c>
    4dd4:	1004d0fa 	srli	r2,r2,3
    4dd8:	01c00044 	movi	r7,1
    4ddc:	21400117 	ldw	r5,4(r4)
    4de0:	10c00044 	addi	r3,r2,1
    4de4:	18c7883a 	add	r3,r3,r3
    4de8:	1005d0ba 	srai	r2,r2,2
    4dec:	18c7883a 	add	r3,r3,r3
    4df0:	18c7883a 	add	r3,r3,r3
    4df4:	1907883a 	add	r3,r3,r4
    4df8:	3884983a 	sll	r2,r7,r2
    4dfc:	19c00017 	ldw	r7,0(r3)
    4e00:	1a3ffe04 	addi	r8,r3,-8
    4e04:	1144b03a 	or	r2,r2,r5
    4e08:	32000315 	stw	r8,12(r6)
    4e0c:	31c00215 	stw	r7,8(r6)
    4e10:	20800115 	stw	r2,4(r4)
    4e14:	19800015 	stw	r6,0(r3)
    4e18:	39800315 	stw	r6,12(r7)
    4e1c:	8809883a 	mov	r4,r17
    4e20:	dfc00217 	ldw	ra,8(sp)
    4e24:	dc400117 	ldw	r17,4(sp)
    4e28:	dc000017 	ldw	r16,0(sp)
    4e2c:	dec00304 	addi	sp,sp,12
    4e30:	000d4481 	jmpi	d448 <__malloc_unlock>
    4e34:	f800283a 	ret
    4e38:	100ad27a 	srli	r5,r2,9
    4e3c:	00c00104 	movi	r3,4
    4e40:	19404a36 	bltu	r3,r5,4f6c <_free_r+0x240>
    4e44:	100ad1ba 	srli	r5,r2,6
    4e48:	28c00e44 	addi	r3,r5,57
    4e4c:	18c7883a 	add	r3,r3,r3
    4e50:	29400e04 	addi	r5,r5,56
    4e54:	18c7883a 	add	r3,r3,r3
    4e58:	18c7883a 	add	r3,r3,r3
    4e5c:	1909883a 	add	r4,r3,r4
    4e60:	20c00017 	ldw	r3,0(r4)
    4e64:	01c00074 	movhi	r7,1
    4e68:	213ffe04 	addi	r4,r4,-8
    4e6c:	39ff9a04 	addi	r7,r7,-408
    4e70:	20c04426 	beq	r4,r3,4f84 <_free_r+0x258>
    4e74:	01ffff04 	movi	r7,-4
    4e78:	19400117 	ldw	r5,4(r3)
    4e7c:	29ca703a 	and	r5,r5,r7
    4e80:	1140022e 	bgeu	r2,r5,4e8c <_free_r+0x160>
    4e84:	18c00217 	ldw	r3,8(r3)
    4e88:	20fffb1e 	bne	r4,r3,4e78 <__alt_data_end+0xfffe4e78>
    4e8c:	19000317 	ldw	r4,12(r3)
    4e90:	31000315 	stw	r4,12(r6)
    4e94:	30c00215 	stw	r3,8(r6)
    4e98:	21800215 	stw	r6,8(r4)
    4e9c:	19800315 	stw	r6,12(r3)
    4ea0:	003fde06 	br	4e1c <__alt_data_end+0xfffe4e1c>
    4ea4:	29c00217 	ldw	r7,8(r5)
    4ea8:	10c5883a 	add	r2,r2,r3
    4eac:	00c00074 	movhi	r3,1
    4eb0:	18ff9c04 	addi	r3,r3,-400
    4eb4:	38c03b26 	beq	r7,r3,4fa4 <_free_r+0x278>
    4eb8:	2a000317 	ldw	r8,12(r5)
    4ebc:	11400054 	ori	r5,r2,1
    4ec0:	3087883a 	add	r3,r6,r2
    4ec4:	3a000315 	stw	r8,12(r7)
    4ec8:	41c00215 	stw	r7,8(r8)
    4ecc:	31400115 	stw	r5,4(r6)
    4ed0:	18800015 	stw	r2,0(r3)
    4ed4:	003fbd06 	br	4dcc <__alt_data_end+0xfffe4dcc>
    4ed8:	39c0004c 	andi	r7,r7,1
    4edc:	10c5883a 	add	r2,r2,r3
    4ee0:	3800071e 	bne	r7,zero,4f00 <_free_r+0x1d4>
    4ee4:	81fffe17 	ldw	r7,-8(r16)
    4ee8:	31cdc83a 	sub	r6,r6,r7
    4eec:	30c00317 	ldw	r3,12(r6)
    4ef0:	31400217 	ldw	r5,8(r6)
    4ef4:	11c5883a 	add	r2,r2,r7
    4ef8:	28c00315 	stw	r3,12(r5)
    4efc:	19400215 	stw	r5,8(r3)
    4f00:	10c00054 	ori	r3,r2,1
    4f04:	30c00115 	stw	r3,4(r6)
    4f08:	00c00074 	movhi	r3,1
    4f0c:	18c52204 	addi	r3,r3,5256
    4f10:	18c00017 	ldw	r3,0(r3)
    4f14:	21800215 	stw	r6,8(r4)
    4f18:	10ffc036 	bltu	r2,r3,4e1c <__alt_data_end+0xfffe4e1c>
    4f1c:	00800074 	movhi	r2,1
    4f20:	108bee04 	addi	r2,r2,12216
    4f24:	11400017 	ldw	r5,0(r2)
    4f28:	8809883a 	mov	r4,r17
    4f2c:	0004c080 	call	4c08 <_malloc_trim_r>
    4f30:	003fba06 	br	4e1c <__alt_data_end+0xfffe4e1c>
    4f34:	28c9883a 	add	r4,r5,r3
    4f38:	21000117 	ldw	r4,4(r4)
    4f3c:	2100004c 	andi	r4,r4,1
    4f40:	2000391e 	bne	r4,zero,5028 <_free_r+0x2fc>
    4f44:	29c00217 	ldw	r7,8(r5)
    4f48:	29000317 	ldw	r4,12(r5)
    4f4c:	1885883a 	add	r2,r3,r2
    4f50:	10c00054 	ori	r3,r2,1
    4f54:	39000315 	stw	r4,12(r7)
    4f58:	21c00215 	stw	r7,8(r4)
    4f5c:	30c00115 	stw	r3,4(r6)
    4f60:	308d883a 	add	r6,r6,r2
    4f64:	30800015 	stw	r2,0(r6)
    4f68:	003fac06 	br	4e1c <__alt_data_end+0xfffe4e1c>
    4f6c:	00c00504 	movi	r3,20
    4f70:	19401536 	bltu	r3,r5,4fc8 <_free_r+0x29c>
    4f74:	28c01704 	addi	r3,r5,92
    4f78:	18c7883a 	add	r3,r3,r3
    4f7c:	294016c4 	addi	r5,r5,91
    4f80:	003fb406 	br	4e54 <__alt_data_end+0xfffe4e54>
    4f84:	280bd0ba 	srai	r5,r5,2
    4f88:	00c00044 	movi	r3,1
    4f8c:	38800117 	ldw	r2,4(r7)
    4f90:	194a983a 	sll	r5,r3,r5
    4f94:	2007883a 	mov	r3,r4
    4f98:	2884b03a 	or	r2,r5,r2
    4f9c:	38800115 	stw	r2,4(r7)
    4fa0:	003fbb06 	br	4e90 <__alt_data_end+0xfffe4e90>
    4fa4:	21800515 	stw	r6,20(r4)
    4fa8:	21800415 	stw	r6,16(r4)
    4fac:	10c00054 	ori	r3,r2,1
    4fb0:	31c00315 	stw	r7,12(r6)
    4fb4:	31c00215 	stw	r7,8(r6)
    4fb8:	30c00115 	stw	r3,4(r6)
    4fbc:	308d883a 	add	r6,r6,r2
    4fc0:	30800015 	stw	r2,0(r6)
    4fc4:	003f9506 	br	4e1c <__alt_data_end+0xfffe4e1c>
    4fc8:	00c01504 	movi	r3,84
    4fcc:	19400536 	bltu	r3,r5,4fe4 <_free_r+0x2b8>
    4fd0:	100ad33a 	srli	r5,r2,12
    4fd4:	28c01bc4 	addi	r3,r5,111
    4fd8:	18c7883a 	add	r3,r3,r3
    4fdc:	29401b84 	addi	r5,r5,110
    4fe0:	003f9c06 	br	4e54 <__alt_data_end+0xfffe4e54>
    4fe4:	00c05504 	movi	r3,340
    4fe8:	19400536 	bltu	r3,r5,5000 <_free_r+0x2d4>
    4fec:	100ad3fa 	srli	r5,r2,15
    4ff0:	28c01e04 	addi	r3,r5,120
    4ff4:	18c7883a 	add	r3,r3,r3
    4ff8:	29401dc4 	addi	r5,r5,119
    4ffc:	003f9506 	br	4e54 <__alt_data_end+0xfffe4e54>
    5000:	00c15504 	movi	r3,1364
    5004:	19400536 	bltu	r3,r5,501c <_free_r+0x2f0>
    5008:	100ad4ba 	srli	r5,r2,18
    500c:	28c01f44 	addi	r3,r5,125
    5010:	18c7883a 	add	r3,r3,r3
    5014:	29401f04 	addi	r5,r5,124
    5018:	003f8e06 	br	4e54 <__alt_data_end+0xfffe4e54>
    501c:	00c03f84 	movi	r3,254
    5020:	01401f84 	movi	r5,126
    5024:	003f8b06 	br	4e54 <__alt_data_end+0xfffe4e54>
    5028:	10c00054 	ori	r3,r2,1
    502c:	30c00115 	stw	r3,4(r6)
    5030:	308d883a 	add	r6,r6,r2
    5034:	30800015 	stw	r2,0(r6)
    5038:	003f7806 	br	4e1c <__alt_data_end+0xfffe4e1c>

0000503c <__sfvwrite_r>:
    503c:	30800217 	ldw	r2,8(r6)
    5040:	10006726 	beq	r2,zero,51e0 <__sfvwrite_r+0x1a4>
    5044:	28c0030b 	ldhu	r3,12(r5)
    5048:	defff404 	addi	sp,sp,-48
    504c:	dd400715 	stw	r21,28(sp)
    5050:	dd000615 	stw	r20,24(sp)
    5054:	dc000215 	stw	r16,8(sp)
    5058:	dfc00b15 	stw	ra,44(sp)
    505c:	df000a15 	stw	fp,40(sp)
    5060:	ddc00915 	stw	r23,36(sp)
    5064:	dd800815 	stw	r22,32(sp)
    5068:	dcc00515 	stw	r19,20(sp)
    506c:	dc800415 	stw	r18,16(sp)
    5070:	dc400315 	stw	r17,12(sp)
    5074:	1880020c 	andi	r2,r3,8
    5078:	2821883a 	mov	r16,r5
    507c:	202b883a 	mov	r21,r4
    5080:	3029883a 	mov	r20,r6
    5084:	10002726 	beq	r2,zero,5124 <__sfvwrite_r+0xe8>
    5088:	28800417 	ldw	r2,16(r5)
    508c:	10002526 	beq	r2,zero,5124 <__sfvwrite_r+0xe8>
    5090:	1880008c 	andi	r2,r3,2
    5094:	a4400017 	ldw	r17,0(r20)
    5098:	10002a26 	beq	r2,zero,5144 <__sfvwrite_r+0x108>
    509c:	05a00034 	movhi	r22,32768
    50a0:	0027883a 	mov	r19,zero
    50a4:	0025883a 	mov	r18,zero
    50a8:	b5bf0004 	addi	r22,r22,-1024
    50ac:	980d883a 	mov	r6,r19
    50b0:	a809883a 	mov	r4,r21
    50b4:	90004626 	beq	r18,zero,51d0 <__sfvwrite_r+0x194>
    50b8:	900f883a 	mov	r7,r18
    50bc:	b480022e 	bgeu	r22,r18,50c8 <__sfvwrite_r+0x8c>
    50c0:	01e00034 	movhi	r7,32768
    50c4:	39ff0004 	addi	r7,r7,-1024
    50c8:	80800917 	ldw	r2,36(r16)
    50cc:	81400717 	ldw	r5,28(r16)
    50d0:	103ee83a 	callr	r2
    50d4:	0080570e 	bge	zero,r2,5234 <__sfvwrite_r+0x1f8>
    50d8:	a0c00217 	ldw	r3,8(r20)
    50dc:	98a7883a 	add	r19,r19,r2
    50e0:	90a5c83a 	sub	r18,r18,r2
    50e4:	1885c83a 	sub	r2,r3,r2
    50e8:	a0800215 	stw	r2,8(r20)
    50ec:	103fef1e 	bne	r2,zero,50ac <__alt_data_end+0xfffe50ac>
    50f0:	0005883a 	mov	r2,zero
    50f4:	dfc00b17 	ldw	ra,44(sp)
    50f8:	df000a17 	ldw	fp,40(sp)
    50fc:	ddc00917 	ldw	r23,36(sp)
    5100:	dd800817 	ldw	r22,32(sp)
    5104:	dd400717 	ldw	r21,28(sp)
    5108:	dd000617 	ldw	r20,24(sp)
    510c:	dcc00517 	ldw	r19,20(sp)
    5110:	dc800417 	ldw	r18,16(sp)
    5114:	dc400317 	ldw	r17,12(sp)
    5118:	dc000217 	ldw	r16,8(sp)
    511c:	dec00c04 	addi	sp,sp,48
    5120:	f800283a 	ret
    5124:	800b883a 	mov	r5,r16
    5128:	a809883a 	mov	r4,r21
    512c:	0002be40 	call	2be4 <__swsetup_r>
    5130:	1000eb1e 	bne	r2,zero,54e0 <__sfvwrite_r+0x4a4>
    5134:	80c0030b 	ldhu	r3,12(r16)
    5138:	a4400017 	ldw	r17,0(r20)
    513c:	1880008c 	andi	r2,r3,2
    5140:	103fd61e 	bne	r2,zero,509c <__alt_data_end+0xfffe509c>
    5144:	1880004c 	andi	r2,r3,1
    5148:	10003f1e 	bne	r2,zero,5248 <__sfvwrite_r+0x20c>
    514c:	0039883a 	mov	fp,zero
    5150:	0025883a 	mov	r18,zero
    5154:	90001a26 	beq	r18,zero,51c0 <__sfvwrite_r+0x184>
    5158:	1880800c 	andi	r2,r3,512
    515c:	84c00217 	ldw	r19,8(r16)
    5160:	10002126 	beq	r2,zero,51e8 <__sfvwrite_r+0x1ac>
    5164:	982f883a 	mov	r23,r19
    5168:	94c09336 	bltu	r18,r19,53b8 <__sfvwrite_r+0x37c>
    516c:	1881200c 	andi	r2,r3,1152
    5170:	10009e1e 	bne	r2,zero,53ec <__sfvwrite_r+0x3b0>
    5174:	81000017 	ldw	r4,0(r16)
    5178:	b80d883a 	mov	r6,r23
    517c:	e00b883a 	mov	r5,fp
    5180:	00063500 	call	6350 <memmove>
    5184:	80c00217 	ldw	r3,8(r16)
    5188:	81000017 	ldw	r4,0(r16)
    518c:	9005883a 	mov	r2,r18
    5190:	1ce7c83a 	sub	r19,r3,r19
    5194:	25cf883a 	add	r7,r4,r23
    5198:	84c00215 	stw	r19,8(r16)
    519c:	81c00015 	stw	r7,0(r16)
    51a0:	a0c00217 	ldw	r3,8(r20)
    51a4:	e0b9883a 	add	fp,fp,r2
    51a8:	90a5c83a 	sub	r18,r18,r2
    51ac:	18a7c83a 	sub	r19,r3,r2
    51b0:	a4c00215 	stw	r19,8(r20)
    51b4:	983fce26 	beq	r19,zero,50f0 <__alt_data_end+0xfffe50f0>
    51b8:	80c0030b 	ldhu	r3,12(r16)
    51bc:	903fe61e 	bne	r18,zero,5158 <__alt_data_end+0xfffe5158>
    51c0:	8f000017 	ldw	fp,0(r17)
    51c4:	8c800117 	ldw	r18,4(r17)
    51c8:	8c400204 	addi	r17,r17,8
    51cc:	003fe106 	br	5154 <__alt_data_end+0xfffe5154>
    51d0:	8cc00017 	ldw	r19,0(r17)
    51d4:	8c800117 	ldw	r18,4(r17)
    51d8:	8c400204 	addi	r17,r17,8
    51dc:	003fb306 	br	50ac <__alt_data_end+0xfffe50ac>
    51e0:	0005883a 	mov	r2,zero
    51e4:	f800283a 	ret
    51e8:	81000017 	ldw	r4,0(r16)
    51ec:	80800417 	ldw	r2,16(r16)
    51f0:	11005736 	bltu	r2,r4,5350 <__sfvwrite_r+0x314>
    51f4:	85c00517 	ldw	r23,20(r16)
    51f8:	95c05536 	bltu	r18,r23,5350 <__sfvwrite_r+0x314>
    51fc:	00a00034 	movhi	r2,32768
    5200:	10bfffc4 	addi	r2,r2,-1
    5204:	9009883a 	mov	r4,r18
    5208:	1480012e 	bgeu	r2,r18,5210 <__sfvwrite_r+0x1d4>
    520c:	1009883a 	mov	r4,r2
    5210:	b80b883a 	mov	r5,r23
    5214:	00005880 	call	588 <__divsi3>
    5218:	15cf383a 	mul	r7,r2,r23
    521c:	81400717 	ldw	r5,28(r16)
    5220:	80800917 	ldw	r2,36(r16)
    5224:	e00d883a 	mov	r6,fp
    5228:	a809883a 	mov	r4,r21
    522c:	103ee83a 	callr	r2
    5230:	00bfdb16 	blt	zero,r2,51a0 <__alt_data_end+0xfffe51a0>
    5234:	8080030b 	ldhu	r2,12(r16)
    5238:	10801014 	ori	r2,r2,64
    523c:	8080030d 	sth	r2,12(r16)
    5240:	00bfffc4 	movi	r2,-1
    5244:	003fab06 	br	50f4 <__alt_data_end+0xfffe50f4>
    5248:	0027883a 	mov	r19,zero
    524c:	0011883a 	mov	r8,zero
    5250:	0039883a 	mov	fp,zero
    5254:	0025883a 	mov	r18,zero
    5258:	90001f26 	beq	r18,zero,52d8 <__sfvwrite_r+0x29c>
    525c:	40005a26 	beq	r8,zero,53c8 <__sfvwrite_r+0x38c>
    5260:	982d883a 	mov	r22,r19
    5264:	94c0012e 	bgeu	r18,r19,526c <__sfvwrite_r+0x230>
    5268:	902d883a 	mov	r22,r18
    526c:	81000017 	ldw	r4,0(r16)
    5270:	80800417 	ldw	r2,16(r16)
    5274:	b02f883a 	mov	r23,r22
    5278:	81c00517 	ldw	r7,20(r16)
    527c:	1100032e 	bgeu	r2,r4,528c <__sfvwrite_r+0x250>
    5280:	80c00217 	ldw	r3,8(r16)
    5284:	38c7883a 	add	r3,r7,r3
    5288:	1d801816 	blt	r3,r22,52ec <__sfvwrite_r+0x2b0>
    528c:	b1c03e16 	blt	r22,r7,5388 <__sfvwrite_r+0x34c>
    5290:	80800917 	ldw	r2,36(r16)
    5294:	81400717 	ldw	r5,28(r16)
    5298:	e00d883a 	mov	r6,fp
    529c:	da000115 	stw	r8,4(sp)
    52a0:	a809883a 	mov	r4,r21
    52a4:	103ee83a 	callr	r2
    52a8:	102f883a 	mov	r23,r2
    52ac:	da000117 	ldw	r8,4(sp)
    52b0:	00bfe00e 	bge	zero,r2,5234 <__alt_data_end+0xfffe5234>
    52b4:	9de7c83a 	sub	r19,r19,r23
    52b8:	98001f26 	beq	r19,zero,5338 <__sfvwrite_r+0x2fc>
    52bc:	a0800217 	ldw	r2,8(r20)
    52c0:	e5f9883a 	add	fp,fp,r23
    52c4:	95e5c83a 	sub	r18,r18,r23
    52c8:	15efc83a 	sub	r23,r2,r23
    52cc:	a5c00215 	stw	r23,8(r20)
    52d0:	b83f8726 	beq	r23,zero,50f0 <__alt_data_end+0xfffe50f0>
    52d4:	903fe11e 	bne	r18,zero,525c <__alt_data_end+0xfffe525c>
    52d8:	8f000017 	ldw	fp,0(r17)
    52dc:	8c800117 	ldw	r18,4(r17)
    52e0:	0011883a 	mov	r8,zero
    52e4:	8c400204 	addi	r17,r17,8
    52e8:	003fdb06 	br	5258 <__alt_data_end+0xfffe5258>
    52ec:	180d883a 	mov	r6,r3
    52f0:	e00b883a 	mov	r5,fp
    52f4:	da000115 	stw	r8,4(sp)
    52f8:	d8c00015 	stw	r3,0(sp)
    52fc:	00063500 	call	6350 <memmove>
    5300:	d8c00017 	ldw	r3,0(sp)
    5304:	80800017 	ldw	r2,0(r16)
    5308:	800b883a 	mov	r5,r16
    530c:	a809883a 	mov	r4,r21
    5310:	10c5883a 	add	r2,r2,r3
    5314:	80800015 	stw	r2,0(r16)
    5318:	d8c00015 	stw	r3,0(sp)
    531c:	00047dc0 	call	47dc <_fflush_r>
    5320:	d8c00017 	ldw	r3,0(sp)
    5324:	da000117 	ldw	r8,4(sp)
    5328:	103fc21e 	bne	r2,zero,5234 <__alt_data_end+0xfffe5234>
    532c:	182f883a 	mov	r23,r3
    5330:	9de7c83a 	sub	r19,r19,r23
    5334:	983fe11e 	bne	r19,zero,52bc <__alt_data_end+0xfffe52bc>
    5338:	800b883a 	mov	r5,r16
    533c:	a809883a 	mov	r4,r21
    5340:	00047dc0 	call	47dc <_fflush_r>
    5344:	103fbb1e 	bne	r2,zero,5234 <__alt_data_end+0xfffe5234>
    5348:	0011883a 	mov	r8,zero
    534c:	003fdb06 	br	52bc <__alt_data_end+0xfffe52bc>
    5350:	94c0012e 	bgeu	r18,r19,5358 <__sfvwrite_r+0x31c>
    5354:	9027883a 	mov	r19,r18
    5358:	980d883a 	mov	r6,r19
    535c:	e00b883a 	mov	r5,fp
    5360:	00063500 	call	6350 <memmove>
    5364:	80800217 	ldw	r2,8(r16)
    5368:	80c00017 	ldw	r3,0(r16)
    536c:	14c5c83a 	sub	r2,r2,r19
    5370:	1cc7883a 	add	r3,r3,r19
    5374:	80800215 	stw	r2,8(r16)
    5378:	80c00015 	stw	r3,0(r16)
    537c:	10004326 	beq	r2,zero,548c <__sfvwrite_r+0x450>
    5380:	9805883a 	mov	r2,r19
    5384:	003f8606 	br	51a0 <__alt_data_end+0xfffe51a0>
    5388:	b00d883a 	mov	r6,r22
    538c:	e00b883a 	mov	r5,fp
    5390:	da000115 	stw	r8,4(sp)
    5394:	00063500 	call	6350 <memmove>
    5398:	80800217 	ldw	r2,8(r16)
    539c:	80c00017 	ldw	r3,0(r16)
    53a0:	da000117 	ldw	r8,4(sp)
    53a4:	1585c83a 	sub	r2,r2,r22
    53a8:	1dad883a 	add	r22,r3,r22
    53ac:	80800215 	stw	r2,8(r16)
    53b0:	85800015 	stw	r22,0(r16)
    53b4:	003fbf06 	br	52b4 <__alt_data_end+0xfffe52b4>
    53b8:	81000017 	ldw	r4,0(r16)
    53bc:	9027883a 	mov	r19,r18
    53c0:	902f883a 	mov	r23,r18
    53c4:	003f6c06 	br	5178 <__alt_data_end+0xfffe5178>
    53c8:	900d883a 	mov	r6,r18
    53cc:	01400284 	movi	r5,10
    53d0:	e009883a 	mov	r4,fp
    53d4:	00061240 	call	6124 <memchr>
    53d8:	10003e26 	beq	r2,zero,54d4 <__sfvwrite_r+0x498>
    53dc:	10800044 	addi	r2,r2,1
    53e0:	1727c83a 	sub	r19,r2,fp
    53e4:	02000044 	movi	r8,1
    53e8:	003f9d06 	br	5260 <__alt_data_end+0xfffe5260>
    53ec:	80800517 	ldw	r2,20(r16)
    53f0:	81400417 	ldw	r5,16(r16)
    53f4:	81c00017 	ldw	r7,0(r16)
    53f8:	10a7883a 	add	r19,r2,r2
    53fc:	9885883a 	add	r2,r19,r2
    5400:	1026d7fa 	srli	r19,r2,31
    5404:	396dc83a 	sub	r22,r7,r5
    5408:	b1000044 	addi	r4,r22,1
    540c:	9885883a 	add	r2,r19,r2
    5410:	1027d07a 	srai	r19,r2,1
    5414:	2485883a 	add	r2,r4,r18
    5418:	980d883a 	mov	r6,r19
    541c:	9880022e 	bgeu	r19,r2,5428 <__sfvwrite_r+0x3ec>
    5420:	1027883a 	mov	r19,r2
    5424:	100d883a 	mov	r6,r2
    5428:	18c1000c 	andi	r3,r3,1024
    542c:	18001c26 	beq	r3,zero,54a0 <__sfvwrite_r+0x464>
    5430:	300b883a 	mov	r5,r6
    5434:	a809883a 	mov	r4,r21
    5438:	00059180 	call	5918 <_malloc_r>
    543c:	102f883a 	mov	r23,r2
    5440:	10002926 	beq	r2,zero,54e8 <__sfvwrite_r+0x4ac>
    5444:	81400417 	ldw	r5,16(r16)
    5448:	b00d883a 	mov	r6,r22
    544c:	1009883a 	mov	r4,r2
    5450:	00062080 	call	6208 <memcpy>
    5454:	8080030b 	ldhu	r2,12(r16)
    5458:	00fedfc4 	movi	r3,-1153
    545c:	10c4703a 	and	r2,r2,r3
    5460:	10802014 	ori	r2,r2,128
    5464:	8080030d 	sth	r2,12(r16)
    5468:	bd89883a 	add	r4,r23,r22
    546c:	9d8fc83a 	sub	r7,r19,r22
    5470:	85c00415 	stw	r23,16(r16)
    5474:	84c00515 	stw	r19,20(r16)
    5478:	81000015 	stw	r4,0(r16)
    547c:	9027883a 	mov	r19,r18
    5480:	81c00215 	stw	r7,8(r16)
    5484:	902f883a 	mov	r23,r18
    5488:	003f3b06 	br	5178 <__alt_data_end+0xfffe5178>
    548c:	800b883a 	mov	r5,r16
    5490:	a809883a 	mov	r4,r21
    5494:	00047dc0 	call	47dc <_fflush_r>
    5498:	103fb926 	beq	r2,zero,5380 <__alt_data_end+0xfffe5380>
    549c:	003f6506 	br	5234 <__alt_data_end+0xfffe5234>
    54a0:	a809883a 	mov	r4,r21
    54a4:	00075d00 	call	75d0 <_realloc_r>
    54a8:	102f883a 	mov	r23,r2
    54ac:	103fee1e 	bne	r2,zero,5468 <__alt_data_end+0xfffe5468>
    54b0:	81400417 	ldw	r5,16(r16)
    54b4:	a809883a 	mov	r4,r21
    54b8:	0004d2c0 	call	4d2c <_free_r>
    54bc:	8080030b 	ldhu	r2,12(r16)
    54c0:	00ffdfc4 	movi	r3,-129
    54c4:	1884703a 	and	r2,r3,r2
    54c8:	00c00304 	movi	r3,12
    54cc:	a8c00015 	stw	r3,0(r21)
    54d0:	003f5906 	br	5238 <__alt_data_end+0xfffe5238>
    54d4:	94c00044 	addi	r19,r18,1
    54d8:	02000044 	movi	r8,1
    54dc:	003f6006 	br	5260 <__alt_data_end+0xfffe5260>
    54e0:	00bfffc4 	movi	r2,-1
    54e4:	003f0306 	br	50f4 <__alt_data_end+0xfffe50f4>
    54e8:	00800304 	movi	r2,12
    54ec:	a8800015 	stw	r2,0(r21)
    54f0:	8080030b 	ldhu	r2,12(r16)
    54f4:	003f5006 	br	5238 <__alt_data_end+0xfffe5238>

000054f8 <_fwalk>:
    54f8:	defff704 	addi	sp,sp,-36
    54fc:	dd000415 	stw	r20,16(sp)
    5500:	dfc00815 	stw	ra,32(sp)
    5504:	ddc00715 	stw	r23,28(sp)
    5508:	dd800615 	stw	r22,24(sp)
    550c:	dd400515 	stw	r21,20(sp)
    5510:	dcc00315 	stw	r19,12(sp)
    5514:	dc800215 	stw	r18,8(sp)
    5518:	dc400115 	stw	r17,4(sp)
    551c:	dc000015 	stw	r16,0(sp)
    5520:	2500b804 	addi	r20,r4,736
    5524:	a0002326 	beq	r20,zero,55b4 <_fwalk+0xbc>
    5528:	282b883a 	mov	r21,r5
    552c:	002f883a 	mov	r23,zero
    5530:	05800044 	movi	r22,1
    5534:	04ffffc4 	movi	r19,-1
    5538:	a4400117 	ldw	r17,4(r20)
    553c:	a4800217 	ldw	r18,8(r20)
    5540:	8c7fffc4 	addi	r17,r17,-1
    5544:	88000d16 	blt	r17,zero,557c <_fwalk+0x84>
    5548:	94000304 	addi	r16,r18,12
    554c:	94800384 	addi	r18,r18,14
    5550:	8080000b 	ldhu	r2,0(r16)
    5554:	8c7fffc4 	addi	r17,r17,-1
    5558:	813ffd04 	addi	r4,r16,-12
    555c:	b080042e 	bgeu	r22,r2,5570 <_fwalk+0x78>
    5560:	9080000f 	ldh	r2,0(r18)
    5564:	14c00226 	beq	r2,r19,5570 <_fwalk+0x78>
    5568:	a83ee83a 	callr	r21
    556c:	b8aeb03a 	or	r23,r23,r2
    5570:	84001a04 	addi	r16,r16,104
    5574:	94801a04 	addi	r18,r18,104
    5578:	8cfff51e 	bne	r17,r19,5550 <__alt_data_end+0xfffe5550>
    557c:	a5000017 	ldw	r20,0(r20)
    5580:	a03fed1e 	bne	r20,zero,5538 <__alt_data_end+0xfffe5538>
    5584:	b805883a 	mov	r2,r23
    5588:	dfc00817 	ldw	ra,32(sp)
    558c:	ddc00717 	ldw	r23,28(sp)
    5590:	dd800617 	ldw	r22,24(sp)
    5594:	dd400517 	ldw	r21,20(sp)
    5598:	dd000417 	ldw	r20,16(sp)
    559c:	dcc00317 	ldw	r19,12(sp)
    55a0:	dc800217 	ldw	r18,8(sp)
    55a4:	dc400117 	ldw	r17,4(sp)
    55a8:	dc000017 	ldw	r16,0(sp)
    55ac:	dec00904 	addi	sp,sp,36
    55b0:	f800283a 	ret
    55b4:	002f883a 	mov	r23,zero
    55b8:	003ff206 	br	5584 <__alt_data_end+0xfffe5584>

000055bc <_fwalk_reent>:
    55bc:	defff704 	addi	sp,sp,-36
    55c0:	dd000415 	stw	r20,16(sp)
    55c4:	dfc00815 	stw	ra,32(sp)
    55c8:	ddc00715 	stw	r23,28(sp)
    55cc:	dd800615 	stw	r22,24(sp)
    55d0:	dd400515 	stw	r21,20(sp)
    55d4:	dcc00315 	stw	r19,12(sp)
    55d8:	dc800215 	stw	r18,8(sp)
    55dc:	dc400115 	stw	r17,4(sp)
    55e0:	dc000015 	stw	r16,0(sp)
    55e4:	2500b804 	addi	r20,r4,736
    55e8:	a0002326 	beq	r20,zero,5678 <_fwalk_reent+0xbc>
    55ec:	282b883a 	mov	r21,r5
    55f0:	2027883a 	mov	r19,r4
    55f4:	002f883a 	mov	r23,zero
    55f8:	05800044 	movi	r22,1
    55fc:	04bfffc4 	movi	r18,-1
    5600:	a4400117 	ldw	r17,4(r20)
    5604:	a4000217 	ldw	r16,8(r20)
    5608:	8c7fffc4 	addi	r17,r17,-1
    560c:	88000c16 	blt	r17,zero,5640 <_fwalk_reent+0x84>
    5610:	84000304 	addi	r16,r16,12
    5614:	8080000b 	ldhu	r2,0(r16)
    5618:	8c7fffc4 	addi	r17,r17,-1
    561c:	817ffd04 	addi	r5,r16,-12
    5620:	b080052e 	bgeu	r22,r2,5638 <_fwalk_reent+0x7c>
    5624:	8080008f 	ldh	r2,2(r16)
    5628:	9809883a 	mov	r4,r19
    562c:	14800226 	beq	r2,r18,5638 <_fwalk_reent+0x7c>
    5630:	a83ee83a 	callr	r21
    5634:	b8aeb03a 	or	r23,r23,r2
    5638:	84001a04 	addi	r16,r16,104
    563c:	8cbff51e 	bne	r17,r18,5614 <__alt_data_end+0xfffe5614>
    5640:	a5000017 	ldw	r20,0(r20)
    5644:	a03fee1e 	bne	r20,zero,5600 <__alt_data_end+0xfffe5600>
    5648:	b805883a 	mov	r2,r23
    564c:	dfc00817 	ldw	ra,32(sp)
    5650:	ddc00717 	ldw	r23,28(sp)
    5654:	dd800617 	ldw	r22,24(sp)
    5658:	dd400517 	ldw	r21,20(sp)
    565c:	dd000417 	ldw	r20,16(sp)
    5660:	dcc00317 	ldw	r19,12(sp)
    5664:	dc800217 	ldw	r18,8(sp)
    5668:	dc400117 	ldw	r17,4(sp)
    566c:	dc000017 	ldw	r16,0(sp)
    5670:	dec00904 	addi	sp,sp,36
    5674:	f800283a 	ret
    5678:	002f883a 	mov	r23,zero
    567c:	003ff206 	br	5648 <__alt_data_end+0xfffe5648>

00005680 <_setlocale_r>:
    5680:	30001b26 	beq	r6,zero,56f0 <_setlocale_r+0x70>
    5684:	01400074 	movhi	r5,1
    5688:	defffe04 	addi	sp,sp,-8
    568c:	297dd204 	addi	r5,r5,-2232
    5690:	3009883a 	mov	r4,r6
    5694:	dc000015 	stw	r16,0(sp)
    5698:	dfc00115 	stw	ra,4(sp)
    569c:	3021883a 	mov	r16,r6
    56a0:	0007d380 	call	7d38 <strcmp>
    56a4:	1000061e 	bne	r2,zero,56c0 <_setlocale_r+0x40>
    56a8:	00800074 	movhi	r2,1
    56ac:	10bdd104 	addi	r2,r2,-2236
    56b0:	dfc00117 	ldw	ra,4(sp)
    56b4:	dc000017 	ldw	r16,0(sp)
    56b8:	dec00204 	addi	sp,sp,8
    56bc:	f800283a 	ret
    56c0:	01400074 	movhi	r5,1
    56c4:	297dd104 	addi	r5,r5,-2236
    56c8:	8009883a 	mov	r4,r16
    56cc:	0007d380 	call	7d38 <strcmp>
    56d0:	103ff526 	beq	r2,zero,56a8 <__alt_data_end+0xfffe56a8>
    56d4:	01400074 	movhi	r5,1
    56d8:	297dbc04 	addi	r5,r5,-2320
    56dc:	8009883a 	mov	r4,r16
    56e0:	0007d380 	call	7d38 <strcmp>
    56e4:	103ff026 	beq	r2,zero,56a8 <__alt_data_end+0xfffe56a8>
    56e8:	0005883a 	mov	r2,zero
    56ec:	003ff006 	br	56b0 <__alt_data_end+0xfffe56b0>
    56f0:	00800074 	movhi	r2,1
    56f4:	10bdd104 	addi	r2,r2,-2236
    56f8:	f800283a 	ret

000056fc <__locale_charset>:
    56fc:	00800074 	movhi	r2,1
    5700:	10bf8404 	addi	r2,r2,-496
    5704:	f800283a 	ret

00005708 <__locale_mb_cur_max>:
    5708:	00800074 	movhi	r2,1
    570c:	10852004 	addi	r2,r2,5248
    5710:	10800017 	ldw	r2,0(r2)
    5714:	f800283a 	ret

00005718 <__locale_msgcharset>:
    5718:	00800074 	movhi	r2,1
    571c:	10bf7c04 	addi	r2,r2,-528
    5720:	f800283a 	ret

00005724 <__locale_cjk_lang>:
    5724:	0005883a 	mov	r2,zero
    5728:	f800283a 	ret

0000572c <_localeconv_r>:
    572c:	00800074 	movhi	r2,1
    5730:	10bf8c04 	addi	r2,r2,-464
    5734:	f800283a 	ret

00005738 <setlocale>:
    5738:	00800074 	movhi	r2,1
    573c:	10851f04 	addi	r2,r2,5244
    5740:	280d883a 	mov	r6,r5
    5744:	200b883a 	mov	r5,r4
    5748:	11000017 	ldw	r4,0(r2)
    574c:	00056801 	jmpi	5680 <_setlocale_r>

00005750 <localeconv>:
    5750:	00800074 	movhi	r2,1
    5754:	10bf8c04 	addi	r2,r2,-464
    5758:	f800283a 	ret

0000575c <__smakebuf_r>:
    575c:	2880030b 	ldhu	r2,12(r5)
    5760:	10c0008c 	andi	r3,r2,2
    5764:	1800411e 	bne	r3,zero,586c <__smakebuf_r+0x110>
    5768:	deffec04 	addi	sp,sp,-80
    576c:	dc000f15 	stw	r16,60(sp)
    5770:	2821883a 	mov	r16,r5
    5774:	2940038f 	ldh	r5,14(r5)
    5778:	dc401015 	stw	r17,64(sp)
    577c:	dfc01315 	stw	ra,76(sp)
    5780:	dcc01215 	stw	r19,72(sp)
    5784:	dc801115 	stw	r18,68(sp)
    5788:	2023883a 	mov	r17,r4
    578c:	28001c16 	blt	r5,zero,5800 <__smakebuf_r+0xa4>
    5790:	d80d883a 	mov	r6,sp
    5794:	00098e00 	call	98e0 <_fstat_r>
    5798:	10001816 	blt	r2,zero,57fc <__smakebuf_r+0xa0>
    579c:	d8800117 	ldw	r2,4(sp)
    57a0:	00e00014 	movui	r3,32768
    57a4:	10bc000c 	andi	r2,r2,61440
    57a8:	14c80020 	cmpeqi	r19,r2,8192
    57ac:	10c03726 	beq	r2,r3,588c <__smakebuf_r+0x130>
    57b0:	80c0030b 	ldhu	r3,12(r16)
    57b4:	18c20014 	ori	r3,r3,2048
    57b8:	80c0030d 	sth	r3,12(r16)
    57bc:	00c80004 	movi	r3,8192
    57c0:	10c0521e 	bne	r2,r3,590c <__smakebuf_r+0x1b0>
    57c4:	8140038f 	ldh	r5,14(r16)
    57c8:	8809883a 	mov	r4,r17
    57cc:	000993c0 	call	993c <_isatty_r>
    57d0:	10004c26 	beq	r2,zero,5904 <__smakebuf_r+0x1a8>
    57d4:	8080030b 	ldhu	r2,12(r16)
    57d8:	80c010c4 	addi	r3,r16,67
    57dc:	80c00015 	stw	r3,0(r16)
    57e0:	10800054 	ori	r2,r2,1
    57e4:	8080030d 	sth	r2,12(r16)
    57e8:	00800044 	movi	r2,1
    57ec:	80c00415 	stw	r3,16(r16)
    57f0:	80800515 	stw	r2,20(r16)
    57f4:	04810004 	movi	r18,1024
    57f8:	00000706 	br	5818 <__smakebuf_r+0xbc>
    57fc:	8080030b 	ldhu	r2,12(r16)
    5800:	10c0200c 	andi	r3,r2,128
    5804:	18001f1e 	bne	r3,zero,5884 <__smakebuf_r+0x128>
    5808:	04810004 	movi	r18,1024
    580c:	10820014 	ori	r2,r2,2048
    5810:	8080030d 	sth	r2,12(r16)
    5814:	0027883a 	mov	r19,zero
    5818:	900b883a 	mov	r5,r18
    581c:	8809883a 	mov	r4,r17
    5820:	00059180 	call	5918 <_malloc_r>
    5824:	10002c26 	beq	r2,zero,58d8 <__smakebuf_r+0x17c>
    5828:	80c0030b 	ldhu	r3,12(r16)
    582c:	01000034 	movhi	r4,0
    5830:	21121c04 	addi	r4,r4,18544
    5834:	89000f15 	stw	r4,60(r17)
    5838:	18c02014 	ori	r3,r3,128
    583c:	80c0030d 	sth	r3,12(r16)
    5840:	80800015 	stw	r2,0(r16)
    5844:	80800415 	stw	r2,16(r16)
    5848:	84800515 	stw	r18,20(r16)
    584c:	98001a1e 	bne	r19,zero,58b8 <__smakebuf_r+0x15c>
    5850:	dfc01317 	ldw	ra,76(sp)
    5854:	dcc01217 	ldw	r19,72(sp)
    5858:	dc801117 	ldw	r18,68(sp)
    585c:	dc401017 	ldw	r17,64(sp)
    5860:	dc000f17 	ldw	r16,60(sp)
    5864:	dec01404 	addi	sp,sp,80
    5868:	f800283a 	ret
    586c:	288010c4 	addi	r2,r5,67
    5870:	28800015 	stw	r2,0(r5)
    5874:	28800415 	stw	r2,16(r5)
    5878:	00800044 	movi	r2,1
    587c:	28800515 	stw	r2,20(r5)
    5880:	f800283a 	ret
    5884:	04801004 	movi	r18,64
    5888:	003fe006 	br	580c <__alt_data_end+0xfffe580c>
    588c:	81000a17 	ldw	r4,40(r16)
    5890:	00c00034 	movhi	r3,0
    5894:	18df3504 	addi	r3,r3,31956
    5898:	20ffc51e 	bne	r4,r3,57b0 <__alt_data_end+0xfffe57b0>
    589c:	8080030b 	ldhu	r2,12(r16)
    58a0:	04810004 	movi	r18,1024
    58a4:	84801315 	stw	r18,76(r16)
    58a8:	1484b03a 	or	r2,r2,r18
    58ac:	8080030d 	sth	r2,12(r16)
    58b0:	0027883a 	mov	r19,zero
    58b4:	003fd806 	br	5818 <__alt_data_end+0xfffe5818>
    58b8:	8140038f 	ldh	r5,14(r16)
    58bc:	8809883a 	mov	r4,r17
    58c0:	000993c0 	call	993c <_isatty_r>
    58c4:	103fe226 	beq	r2,zero,5850 <__alt_data_end+0xfffe5850>
    58c8:	8080030b 	ldhu	r2,12(r16)
    58cc:	10800054 	ori	r2,r2,1
    58d0:	8080030d 	sth	r2,12(r16)
    58d4:	003fde06 	br	5850 <__alt_data_end+0xfffe5850>
    58d8:	8080030b 	ldhu	r2,12(r16)
    58dc:	10c0800c 	andi	r3,r2,512
    58e0:	183fdb1e 	bne	r3,zero,5850 <__alt_data_end+0xfffe5850>
    58e4:	10800094 	ori	r2,r2,2
    58e8:	80c010c4 	addi	r3,r16,67
    58ec:	8080030d 	sth	r2,12(r16)
    58f0:	00800044 	movi	r2,1
    58f4:	80c00015 	stw	r3,0(r16)
    58f8:	80c00415 	stw	r3,16(r16)
    58fc:	80800515 	stw	r2,20(r16)
    5900:	003fd306 	br	5850 <__alt_data_end+0xfffe5850>
    5904:	04810004 	movi	r18,1024
    5908:	003fc306 	br	5818 <__alt_data_end+0xfffe5818>
    590c:	0027883a 	mov	r19,zero
    5910:	04810004 	movi	r18,1024
    5914:	003fc006 	br	5818 <__alt_data_end+0xfffe5818>

00005918 <_malloc_r>:
    5918:	defff504 	addi	sp,sp,-44
    591c:	dc800315 	stw	r18,12(sp)
    5920:	dfc00a15 	stw	ra,40(sp)
    5924:	df000915 	stw	fp,36(sp)
    5928:	ddc00815 	stw	r23,32(sp)
    592c:	dd800715 	stw	r22,28(sp)
    5930:	dd400615 	stw	r21,24(sp)
    5934:	dd000515 	stw	r20,20(sp)
    5938:	dcc00415 	stw	r19,16(sp)
    593c:	dc400215 	stw	r17,8(sp)
    5940:	dc000115 	stw	r16,4(sp)
    5944:	288002c4 	addi	r2,r5,11
    5948:	00c00584 	movi	r3,22
    594c:	2025883a 	mov	r18,r4
    5950:	18807f2e 	bgeu	r3,r2,5b50 <_malloc_r+0x238>
    5954:	047ffe04 	movi	r17,-8
    5958:	1462703a 	and	r17,r2,r17
    595c:	8800a316 	blt	r17,zero,5bec <_malloc_r+0x2d4>
    5960:	8940a236 	bltu	r17,r5,5bec <_malloc_r+0x2d4>
    5964:	000d4240 	call	d424 <__malloc_lock>
    5968:	00807dc4 	movi	r2,503
    596c:	1441e92e 	bgeu	r2,r17,6114 <_malloc_r+0x7fc>
    5970:	8804d27a 	srli	r2,r17,9
    5974:	1000a126 	beq	r2,zero,5bfc <_malloc_r+0x2e4>
    5978:	00c00104 	movi	r3,4
    597c:	18811e36 	bltu	r3,r2,5df8 <_malloc_r+0x4e0>
    5980:	8804d1ba 	srli	r2,r17,6
    5984:	12000e44 	addi	r8,r2,57
    5988:	11c00e04 	addi	r7,r2,56
    598c:	4209883a 	add	r4,r8,r8
    5990:	04c00074 	movhi	r19,1
    5994:	2109883a 	add	r4,r4,r4
    5998:	9cff9a04 	addi	r19,r19,-408
    599c:	2109883a 	add	r4,r4,r4
    59a0:	9909883a 	add	r4,r19,r4
    59a4:	24000117 	ldw	r16,4(r4)
    59a8:	213ffe04 	addi	r4,r4,-8
    59ac:	24009726 	beq	r4,r16,5c0c <_malloc_r+0x2f4>
    59b0:	80800117 	ldw	r2,4(r16)
    59b4:	01bfff04 	movi	r6,-4
    59b8:	014003c4 	movi	r5,15
    59bc:	1184703a 	and	r2,r2,r6
    59c0:	1447c83a 	sub	r3,r2,r17
    59c4:	28c00716 	blt	r5,r3,59e4 <_malloc_r+0xcc>
    59c8:	1800920e 	bge	r3,zero,5c14 <_malloc_r+0x2fc>
    59cc:	84000317 	ldw	r16,12(r16)
    59d0:	24008e26 	beq	r4,r16,5c0c <_malloc_r+0x2f4>
    59d4:	80800117 	ldw	r2,4(r16)
    59d8:	1184703a 	and	r2,r2,r6
    59dc:	1447c83a 	sub	r3,r2,r17
    59e0:	28fff90e 	bge	r5,r3,59c8 <__alt_data_end+0xfffe59c8>
    59e4:	3809883a 	mov	r4,r7
    59e8:	01800074 	movhi	r6,1
    59ec:	9c000417 	ldw	r16,16(r19)
    59f0:	31bf9a04 	addi	r6,r6,-408
    59f4:	32000204 	addi	r8,r6,8
    59f8:	82013426 	beq	r16,r8,5ecc <_malloc_r+0x5b4>
    59fc:	80c00117 	ldw	r3,4(r16)
    5a00:	00bfff04 	movi	r2,-4
    5a04:	188e703a 	and	r7,r3,r2
    5a08:	3c45c83a 	sub	r2,r7,r17
    5a0c:	00c003c4 	movi	r3,15
    5a10:	18811f16 	blt	r3,r2,5e90 <_malloc_r+0x578>
    5a14:	32000515 	stw	r8,20(r6)
    5a18:	32000415 	stw	r8,16(r6)
    5a1c:	10007f0e 	bge	r2,zero,5c1c <_malloc_r+0x304>
    5a20:	00807fc4 	movi	r2,511
    5a24:	11c0fd36 	bltu	r2,r7,5e1c <_malloc_r+0x504>
    5a28:	3806d0fa 	srli	r3,r7,3
    5a2c:	01c00044 	movi	r7,1
    5a30:	30800117 	ldw	r2,4(r6)
    5a34:	19400044 	addi	r5,r3,1
    5a38:	294b883a 	add	r5,r5,r5
    5a3c:	1807d0ba 	srai	r3,r3,2
    5a40:	294b883a 	add	r5,r5,r5
    5a44:	294b883a 	add	r5,r5,r5
    5a48:	298b883a 	add	r5,r5,r6
    5a4c:	38c6983a 	sll	r3,r7,r3
    5a50:	29c00017 	ldw	r7,0(r5)
    5a54:	2a7ffe04 	addi	r9,r5,-8
    5a58:	1886b03a 	or	r3,r3,r2
    5a5c:	82400315 	stw	r9,12(r16)
    5a60:	81c00215 	stw	r7,8(r16)
    5a64:	30c00115 	stw	r3,4(r6)
    5a68:	2c000015 	stw	r16,0(r5)
    5a6c:	3c000315 	stw	r16,12(r7)
    5a70:	2005d0ba 	srai	r2,r4,2
    5a74:	01400044 	movi	r5,1
    5a78:	288a983a 	sll	r5,r5,r2
    5a7c:	19406f36 	bltu	r3,r5,5c3c <_malloc_r+0x324>
    5a80:	28c4703a 	and	r2,r5,r3
    5a84:	10000a1e 	bne	r2,zero,5ab0 <_malloc_r+0x198>
    5a88:	00bfff04 	movi	r2,-4
    5a8c:	294b883a 	add	r5,r5,r5
    5a90:	2088703a 	and	r4,r4,r2
    5a94:	28c4703a 	and	r2,r5,r3
    5a98:	21000104 	addi	r4,r4,4
    5a9c:	1000041e 	bne	r2,zero,5ab0 <_malloc_r+0x198>
    5aa0:	294b883a 	add	r5,r5,r5
    5aa4:	28c4703a 	and	r2,r5,r3
    5aa8:	21000104 	addi	r4,r4,4
    5aac:	103ffc26 	beq	r2,zero,5aa0 <__alt_data_end+0xfffe5aa0>
    5ab0:	02bfff04 	movi	r10,-4
    5ab4:	024003c4 	movi	r9,15
    5ab8:	21800044 	addi	r6,r4,1
    5abc:	318d883a 	add	r6,r6,r6
    5ac0:	318d883a 	add	r6,r6,r6
    5ac4:	318d883a 	add	r6,r6,r6
    5ac8:	998d883a 	add	r6,r19,r6
    5acc:	333ffe04 	addi	r12,r6,-8
    5ad0:	2017883a 	mov	r11,r4
    5ad4:	31800104 	addi	r6,r6,4
    5ad8:	34000017 	ldw	r16,0(r6)
    5adc:	31fffd04 	addi	r7,r6,-12
    5ae0:	81c0041e 	bne	r16,r7,5af4 <_malloc_r+0x1dc>
    5ae4:	0000fb06 	br	5ed4 <_malloc_r+0x5bc>
    5ae8:	1801030e 	bge	r3,zero,5ef8 <_malloc_r+0x5e0>
    5aec:	84000317 	ldw	r16,12(r16)
    5af0:	81c0f826 	beq	r16,r7,5ed4 <_malloc_r+0x5bc>
    5af4:	80800117 	ldw	r2,4(r16)
    5af8:	1284703a 	and	r2,r2,r10
    5afc:	1447c83a 	sub	r3,r2,r17
    5b00:	48fff90e 	bge	r9,r3,5ae8 <__alt_data_end+0xfffe5ae8>
    5b04:	80800317 	ldw	r2,12(r16)
    5b08:	81000217 	ldw	r4,8(r16)
    5b0c:	89400054 	ori	r5,r17,1
    5b10:	81400115 	stw	r5,4(r16)
    5b14:	20800315 	stw	r2,12(r4)
    5b18:	11000215 	stw	r4,8(r2)
    5b1c:	8463883a 	add	r17,r16,r17
    5b20:	9c400515 	stw	r17,20(r19)
    5b24:	9c400415 	stw	r17,16(r19)
    5b28:	18800054 	ori	r2,r3,1
    5b2c:	88800115 	stw	r2,4(r17)
    5b30:	8a000315 	stw	r8,12(r17)
    5b34:	8a000215 	stw	r8,8(r17)
    5b38:	88e3883a 	add	r17,r17,r3
    5b3c:	88c00015 	stw	r3,0(r17)
    5b40:	9009883a 	mov	r4,r18
    5b44:	000d4480 	call	d448 <__malloc_unlock>
    5b48:	80800204 	addi	r2,r16,8
    5b4c:	00001b06 	br	5bbc <_malloc_r+0x2a4>
    5b50:	04400404 	movi	r17,16
    5b54:	89402536 	bltu	r17,r5,5bec <_malloc_r+0x2d4>
    5b58:	000d4240 	call	d424 <__malloc_lock>
    5b5c:	00800184 	movi	r2,6
    5b60:	01000084 	movi	r4,2
    5b64:	04c00074 	movhi	r19,1
    5b68:	1085883a 	add	r2,r2,r2
    5b6c:	9cff9a04 	addi	r19,r19,-408
    5b70:	1085883a 	add	r2,r2,r2
    5b74:	9885883a 	add	r2,r19,r2
    5b78:	14000117 	ldw	r16,4(r2)
    5b7c:	10fffe04 	addi	r3,r2,-8
    5b80:	80c0d926 	beq	r16,r3,5ee8 <_malloc_r+0x5d0>
    5b84:	80c00117 	ldw	r3,4(r16)
    5b88:	81000317 	ldw	r4,12(r16)
    5b8c:	00bfff04 	movi	r2,-4
    5b90:	1884703a 	and	r2,r3,r2
    5b94:	81400217 	ldw	r5,8(r16)
    5b98:	8085883a 	add	r2,r16,r2
    5b9c:	10c00117 	ldw	r3,4(r2)
    5ba0:	29000315 	stw	r4,12(r5)
    5ba4:	21400215 	stw	r5,8(r4)
    5ba8:	18c00054 	ori	r3,r3,1
    5bac:	10c00115 	stw	r3,4(r2)
    5bb0:	9009883a 	mov	r4,r18
    5bb4:	000d4480 	call	d448 <__malloc_unlock>
    5bb8:	80800204 	addi	r2,r16,8
    5bbc:	dfc00a17 	ldw	ra,40(sp)
    5bc0:	df000917 	ldw	fp,36(sp)
    5bc4:	ddc00817 	ldw	r23,32(sp)
    5bc8:	dd800717 	ldw	r22,28(sp)
    5bcc:	dd400617 	ldw	r21,24(sp)
    5bd0:	dd000517 	ldw	r20,20(sp)
    5bd4:	dcc00417 	ldw	r19,16(sp)
    5bd8:	dc800317 	ldw	r18,12(sp)
    5bdc:	dc400217 	ldw	r17,8(sp)
    5be0:	dc000117 	ldw	r16,4(sp)
    5be4:	dec00b04 	addi	sp,sp,44
    5be8:	f800283a 	ret
    5bec:	00800304 	movi	r2,12
    5bf0:	90800015 	stw	r2,0(r18)
    5bf4:	0005883a 	mov	r2,zero
    5bf8:	003ff006 	br	5bbc <__alt_data_end+0xfffe5bbc>
    5bfc:	01002004 	movi	r4,128
    5c00:	02001004 	movi	r8,64
    5c04:	01c00fc4 	movi	r7,63
    5c08:	003f6106 	br	5990 <__alt_data_end+0xfffe5990>
    5c0c:	4009883a 	mov	r4,r8
    5c10:	003f7506 	br	59e8 <__alt_data_end+0xfffe59e8>
    5c14:	81000317 	ldw	r4,12(r16)
    5c18:	003fde06 	br	5b94 <__alt_data_end+0xfffe5b94>
    5c1c:	81c5883a 	add	r2,r16,r7
    5c20:	11400117 	ldw	r5,4(r2)
    5c24:	9009883a 	mov	r4,r18
    5c28:	29400054 	ori	r5,r5,1
    5c2c:	11400115 	stw	r5,4(r2)
    5c30:	000d4480 	call	d448 <__malloc_unlock>
    5c34:	80800204 	addi	r2,r16,8
    5c38:	003fe006 	br	5bbc <__alt_data_end+0xfffe5bbc>
    5c3c:	9c000217 	ldw	r16,8(r19)
    5c40:	00bfff04 	movi	r2,-4
    5c44:	85800117 	ldw	r22,4(r16)
    5c48:	b0ac703a 	and	r22,r22,r2
    5c4c:	b4400336 	bltu	r22,r17,5c5c <_malloc_r+0x344>
    5c50:	b445c83a 	sub	r2,r22,r17
    5c54:	00c003c4 	movi	r3,15
    5c58:	18805d16 	blt	r3,r2,5dd0 <_malloc_r+0x4b8>
    5c5c:	05c00074 	movhi	r23,1
    5c60:	00800074 	movhi	r2,1
    5c64:	108bee04 	addi	r2,r2,12216
    5c68:	bdc52104 	addi	r23,r23,5252
    5c6c:	15400017 	ldw	r21,0(r2)
    5c70:	b8c00017 	ldw	r3,0(r23)
    5c74:	00bfffc4 	movi	r2,-1
    5c78:	858d883a 	add	r6,r16,r22
    5c7c:	8d6b883a 	add	r21,r17,r21
    5c80:	1880ea26 	beq	r3,r2,602c <_malloc_r+0x714>
    5c84:	ad4403c4 	addi	r21,r21,4111
    5c88:	00bc0004 	movi	r2,-4096
    5c8c:	a8aa703a 	and	r21,r21,r2
    5c90:	a80b883a 	mov	r5,r21
    5c94:	9009883a 	mov	r4,r18
    5c98:	d9800015 	stw	r6,0(sp)
    5c9c:	0007ba80 	call	7ba8 <_sbrk_r>
    5ca0:	1029883a 	mov	r20,r2
    5ca4:	00bfffc4 	movi	r2,-1
    5ca8:	d9800017 	ldw	r6,0(sp)
    5cac:	a080e826 	beq	r20,r2,6050 <_malloc_r+0x738>
    5cb0:	a180a636 	bltu	r20,r6,5f4c <_malloc_r+0x634>
    5cb4:	07000074 	movhi	fp,1
    5cb8:	e70bf704 	addi	fp,fp,12252
    5cbc:	e0800017 	ldw	r2,0(fp)
    5cc0:	a887883a 	add	r3,r21,r2
    5cc4:	e0c00015 	stw	r3,0(fp)
    5cc8:	3500e626 	beq	r6,r20,6064 <_malloc_r+0x74c>
    5ccc:	b9000017 	ldw	r4,0(r23)
    5cd0:	00bfffc4 	movi	r2,-1
    5cd4:	2080ee26 	beq	r4,r2,6090 <_malloc_r+0x778>
    5cd8:	a185c83a 	sub	r2,r20,r6
    5cdc:	10c5883a 	add	r2,r2,r3
    5ce0:	e0800015 	stw	r2,0(fp)
    5ce4:	a0c001cc 	andi	r3,r20,7
    5ce8:	1800bc26 	beq	r3,zero,5fdc <_malloc_r+0x6c4>
    5cec:	a0e9c83a 	sub	r20,r20,r3
    5cf0:	00840204 	movi	r2,4104
    5cf4:	a5000204 	addi	r20,r20,8
    5cf8:	10c7c83a 	sub	r3,r2,r3
    5cfc:	a545883a 	add	r2,r20,r21
    5d00:	1083ffcc 	andi	r2,r2,4095
    5d04:	18abc83a 	sub	r21,r3,r2
    5d08:	a80b883a 	mov	r5,r21
    5d0c:	9009883a 	mov	r4,r18
    5d10:	0007ba80 	call	7ba8 <_sbrk_r>
    5d14:	00ffffc4 	movi	r3,-1
    5d18:	10c0e126 	beq	r2,r3,60a0 <_malloc_r+0x788>
    5d1c:	1505c83a 	sub	r2,r2,r20
    5d20:	1545883a 	add	r2,r2,r21
    5d24:	10800054 	ori	r2,r2,1
    5d28:	e0c00017 	ldw	r3,0(fp)
    5d2c:	9d000215 	stw	r20,8(r19)
    5d30:	a0800115 	stw	r2,4(r20)
    5d34:	a8c7883a 	add	r3,r21,r3
    5d38:	e0c00015 	stw	r3,0(fp)
    5d3c:	84c00e26 	beq	r16,r19,5d78 <_malloc_r+0x460>
    5d40:	018003c4 	movi	r6,15
    5d44:	3580a72e 	bgeu	r6,r22,5fe4 <_malloc_r+0x6cc>
    5d48:	81400117 	ldw	r5,4(r16)
    5d4c:	013ffe04 	movi	r4,-8
    5d50:	b0bffd04 	addi	r2,r22,-12
    5d54:	1104703a 	and	r2,r2,r4
    5d58:	2900004c 	andi	r4,r5,1
    5d5c:	2088b03a 	or	r4,r4,r2
    5d60:	81000115 	stw	r4,4(r16)
    5d64:	01400144 	movi	r5,5
    5d68:	8089883a 	add	r4,r16,r2
    5d6c:	21400115 	stw	r5,4(r4)
    5d70:	21400215 	stw	r5,8(r4)
    5d74:	3080cd36 	bltu	r6,r2,60ac <_malloc_r+0x794>
    5d78:	00800074 	movhi	r2,1
    5d7c:	108bed04 	addi	r2,r2,12212
    5d80:	11000017 	ldw	r4,0(r2)
    5d84:	20c0012e 	bgeu	r4,r3,5d8c <_malloc_r+0x474>
    5d88:	10c00015 	stw	r3,0(r2)
    5d8c:	00800074 	movhi	r2,1
    5d90:	108bec04 	addi	r2,r2,12208
    5d94:	11000017 	ldw	r4,0(r2)
    5d98:	9c000217 	ldw	r16,8(r19)
    5d9c:	20c0012e 	bgeu	r4,r3,5da4 <_malloc_r+0x48c>
    5da0:	10c00015 	stw	r3,0(r2)
    5da4:	80c00117 	ldw	r3,4(r16)
    5da8:	00bfff04 	movi	r2,-4
    5dac:	1886703a 	and	r3,r3,r2
    5db0:	1c45c83a 	sub	r2,r3,r17
    5db4:	1c400236 	bltu	r3,r17,5dc0 <_malloc_r+0x4a8>
    5db8:	00c003c4 	movi	r3,15
    5dbc:	18800416 	blt	r3,r2,5dd0 <_malloc_r+0x4b8>
    5dc0:	9009883a 	mov	r4,r18
    5dc4:	000d4480 	call	d448 <__malloc_unlock>
    5dc8:	0005883a 	mov	r2,zero
    5dcc:	003f7b06 	br	5bbc <__alt_data_end+0xfffe5bbc>
    5dd0:	88c00054 	ori	r3,r17,1
    5dd4:	80c00115 	stw	r3,4(r16)
    5dd8:	8463883a 	add	r17,r16,r17
    5ddc:	10800054 	ori	r2,r2,1
    5de0:	9c400215 	stw	r17,8(r19)
    5de4:	88800115 	stw	r2,4(r17)
    5de8:	9009883a 	mov	r4,r18
    5dec:	000d4480 	call	d448 <__malloc_unlock>
    5df0:	80800204 	addi	r2,r16,8
    5df4:	003f7106 	br	5bbc <__alt_data_end+0xfffe5bbc>
    5df8:	00c00504 	movi	r3,20
    5dfc:	18804a2e 	bgeu	r3,r2,5f28 <_malloc_r+0x610>
    5e00:	00c01504 	movi	r3,84
    5e04:	18806e36 	bltu	r3,r2,5fc0 <_malloc_r+0x6a8>
    5e08:	8804d33a 	srli	r2,r17,12
    5e0c:	12001bc4 	addi	r8,r2,111
    5e10:	11c01b84 	addi	r7,r2,110
    5e14:	4209883a 	add	r4,r8,r8
    5e18:	003edd06 	br	5990 <__alt_data_end+0xfffe5990>
    5e1c:	3804d27a 	srli	r2,r7,9
    5e20:	00c00104 	movi	r3,4
    5e24:	1880442e 	bgeu	r3,r2,5f38 <_malloc_r+0x620>
    5e28:	00c00504 	movi	r3,20
    5e2c:	18808136 	bltu	r3,r2,6034 <_malloc_r+0x71c>
    5e30:	11401704 	addi	r5,r2,92
    5e34:	10c016c4 	addi	r3,r2,91
    5e38:	294b883a 	add	r5,r5,r5
    5e3c:	294b883a 	add	r5,r5,r5
    5e40:	294b883a 	add	r5,r5,r5
    5e44:	994b883a 	add	r5,r19,r5
    5e48:	28800017 	ldw	r2,0(r5)
    5e4c:	01800074 	movhi	r6,1
    5e50:	297ffe04 	addi	r5,r5,-8
    5e54:	31bf9a04 	addi	r6,r6,-408
    5e58:	28806526 	beq	r5,r2,5ff0 <_malloc_r+0x6d8>
    5e5c:	01bfff04 	movi	r6,-4
    5e60:	10c00117 	ldw	r3,4(r2)
    5e64:	1986703a 	and	r3,r3,r6
    5e68:	38c0022e 	bgeu	r7,r3,5e74 <_malloc_r+0x55c>
    5e6c:	10800217 	ldw	r2,8(r2)
    5e70:	28bffb1e 	bne	r5,r2,5e60 <__alt_data_end+0xfffe5e60>
    5e74:	11400317 	ldw	r5,12(r2)
    5e78:	98c00117 	ldw	r3,4(r19)
    5e7c:	81400315 	stw	r5,12(r16)
    5e80:	80800215 	stw	r2,8(r16)
    5e84:	2c000215 	stw	r16,8(r5)
    5e88:	14000315 	stw	r16,12(r2)
    5e8c:	003ef806 	br	5a70 <__alt_data_end+0xfffe5a70>
    5e90:	88c00054 	ori	r3,r17,1
    5e94:	80c00115 	stw	r3,4(r16)
    5e98:	8463883a 	add	r17,r16,r17
    5e9c:	34400515 	stw	r17,20(r6)
    5ea0:	34400415 	stw	r17,16(r6)
    5ea4:	10c00054 	ori	r3,r2,1
    5ea8:	8a000315 	stw	r8,12(r17)
    5eac:	8a000215 	stw	r8,8(r17)
    5eb0:	88c00115 	stw	r3,4(r17)
    5eb4:	88a3883a 	add	r17,r17,r2
    5eb8:	88800015 	stw	r2,0(r17)
    5ebc:	9009883a 	mov	r4,r18
    5ec0:	000d4480 	call	d448 <__malloc_unlock>
    5ec4:	80800204 	addi	r2,r16,8
    5ec8:	003f3c06 	br	5bbc <__alt_data_end+0xfffe5bbc>
    5ecc:	30c00117 	ldw	r3,4(r6)
    5ed0:	003ee706 	br	5a70 <__alt_data_end+0xfffe5a70>
    5ed4:	5ac00044 	addi	r11,r11,1
    5ed8:	588000cc 	andi	r2,r11,3
    5edc:	31800204 	addi	r6,r6,8
    5ee0:	103efd1e 	bne	r2,zero,5ad8 <__alt_data_end+0xfffe5ad8>
    5ee4:	00002406 	br	5f78 <_malloc_r+0x660>
    5ee8:	14000317 	ldw	r16,12(r2)
    5eec:	143f251e 	bne	r2,r16,5b84 <__alt_data_end+0xfffe5b84>
    5ef0:	21000084 	addi	r4,r4,2
    5ef4:	003ebc06 	br	59e8 <__alt_data_end+0xfffe59e8>
    5ef8:	8085883a 	add	r2,r16,r2
    5efc:	10c00117 	ldw	r3,4(r2)
    5f00:	81000317 	ldw	r4,12(r16)
    5f04:	81400217 	ldw	r5,8(r16)
    5f08:	18c00054 	ori	r3,r3,1
    5f0c:	10c00115 	stw	r3,4(r2)
    5f10:	29000315 	stw	r4,12(r5)
    5f14:	21400215 	stw	r5,8(r4)
    5f18:	9009883a 	mov	r4,r18
    5f1c:	000d4480 	call	d448 <__malloc_unlock>
    5f20:	80800204 	addi	r2,r16,8
    5f24:	003f2506 	br	5bbc <__alt_data_end+0xfffe5bbc>
    5f28:	12001704 	addi	r8,r2,92
    5f2c:	11c016c4 	addi	r7,r2,91
    5f30:	4209883a 	add	r4,r8,r8
    5f34:	003e9606 	br	5990 <__alt_data_end+0xfffe5990>
    5f38:	3804d1ba 	srli	r2,r7,6
    5f3c:	11400e44 	addi	r5,r2,57
    5f40:	10c00e04 	addi	r3,r2,56
    5f44:	294b883a 	add	r5,r5,r5
    5f48:	003fbc06 	br	5e3c <__alt_data_end+0xfffe5e3c>
    5f4c:	84ff5926 	beq	r16,r19,5cb4 <__alt_data_end+0xfffe5cb4>
    5f50:	00800074 	movhi	r2,1
    5f54:	10bf9a04 	addi	r2,r2,-408
    5f58:	14000217 	ldw	r16,8(r2)
    5f5c:	00bfff04 	movi	r2,-4
    5f60:	80c00117 	ldw	r3,4(r16)
    5f64:	1886703a 	and	r3,r3,r2
    5f68:	003f9106 	br	5db0 <__alt_data_end+0xfffe5db0>
    5f6c:	60800217 	ldw	r2,8(r12)
    5f70:	213fffc4 	addi	r4,r4,-1
    5f74:	1300651e 	bne	r2,r12,610c <_malloc_r+0x7f4>
    5f78:	208000cc 	andi	r2,r4,3
    5f7c:	633ffe04 	addi	r12,r12,-8
    5f80:	103ffa1e 	bne	r2,zero,5f6c <__alt_data_end+0xfffe5f6c>
    5f84:	98800117 	ldw	r2,4(r19)
    5f88:	0146303a 	nor	r3,zero,r5
    5f8c:	1884703a 	and	r2,r3,r2
    5f90:	98800115 	stw	r2,4(r19)
    5f94:	294b883a 	add	r5,r5,r5
    5f98:	117f2836 	bltu	r2,r5,5c3c <__alt_data_end+0xfffe5c3c>
    5f9c:	283f2726 	beq	r5,zero,5c3c <__alt_data_end+0xfffe5c3c>
    5fa0:	2886703a 	and	r3,r5,r2
    5fa4:	5809883a 	mov	r4,r11
    5fa8:	183ec31e 	bne	r3,zero,5ab8 <__alt_data_end+0xfffe5ab8>
    5fac:	294b883a 	add	r5,r5,r5
    5fb0:	2886703a 	and	r3,r5,r2
    5fb4:	21000104 	addi	r4,r4,4
    5fb8:	183ffc26 	beq	r3,zero,5fac <__alt_data_end+0xfffe5fac>
    5fbc:	003ebe06 	br	5ab8 <__alt_data_end+0xfffe5ab8>
    5fc0:	00c05504 	movi	r3,340
    5fc4:	18801236 	bltu	r3,r2,6010 <_malloc_r+0x6f8>
    5fc8:	8804d3fa 	srli	r2,r17,15
    5fcc:	12001e04 	addi	r8,r2,120
    5fd0:	11c01dc4 	addi	r7,r2,119
    5fd4:	4209883a 	add	r4,r8,r8
    5fd8:	003e6d06 	br	5990 <__alt_data_end+0xfffe5990>
    5fdc:	00c40004 	movi	r3,4096
    5fe0:	003f4606 	br	5cfc <__alt_data_end+0xfffe5cfc>
    5fe4:	00800044 	movi	r2,1
    5fe8:	a0800115 	stw	r2,4(r20)
    5fec:	003f7406 	br	5dc0 <__alt_data_end+0xfffe5dc0>
    5ff0:	1805d0ba 	srai	r2,r3,2
    5ff4:	01c00044 	movi	r7,1
    5ff8:	30c00117 	ldw	r3,4(r6)
    5ffc:	388e983a 	sll	r7,r7,r2
    6000:	2805883a 	mov	r2,r5
    6004:	38c6b03a 	or	r3,r7,r3
    6008:	30c00115 	stw	r3,4(r6)
    600c:	003f9b06 	br	5e7c <__alt_data_end+0xfffe5e7c>
    6010:	00c15504 	movi	r3,1364
    6014:	18801a36 	bltu	r3,r2,6080 <_malloc_r+0x768>
    6018:	8804d4ba 	srli	r2,r17,18
    601c:	12001f44 	addi	r8,r2,125
    6020:	11c01f04 	addi	r7,r2,124
    6024:	4209883a 	add	r4,r8,r8
    6028:	003e5906 	br	5990 <__alt_data_end+0xfffe5990>
    602c:	ad400404 	addi	r21,r21,16
    6030:	003f1706 	br	5c90 <__alt_data_end+0xfffe5c90>
    6034:	00c01504 	movi	r3,84
    6038:	18802336 	bltu	r3,r2,60c8 <_malloc_r+0x7b0>
    603c:	3804d33a 	srli	r2,r7,12
    6040:	11401bc4 	addi	r5,r2,111
    6044:	10c01b84 	addi	r3,r2,110
    6048:	294b883a 	add	r5,r5,r5
    604c:	003f7b06 	br	5e3c <__alt_data_end+0xfffe5e3c>
    6050:	9c000217 	ldw	r16,8(r19)
    6054:	00bfff04 	movi	r2,-4
    6058:	80c00117 	ldw	r3,4(r16)
    605c:	1886703a 	and	r3,r3,r2
    6060:	003f5306 	br	5db0 <__alt_data_end+0xfffe5db0>
    6064:	3083ffcc 	andi	r2,r6,4095
    6068:	103f181e 	bne	r2,zero,5ccc <__alt_data_end+0xfffe5ccc>
    606c:	99000217 	ldw	r4,8(r19)
    6070:	b545883a 	add	r2,r22,r21
    6074:	10800054 	ori	r2,r2,1
    6078:	20800115 	stw	r2,4(r4)
    607c:	003f3e06 	br	5d78 <__alt_data_end+0xfffe5d78>
    6080:	01003f84 	movi	r4,254
    6084:	02001fc4 	movi	r8,127
    6088:	01c01f84 	movi	r7,126
    608c:	003e4006 	br	5990 <__alt_data_end+0xfffe5990>
    6090:	00800074 	movhi	r2,1
    6094:	10852104 	addi	r2,r2,5252
    6098:	15000015 	stw	r20,0(r2)
    609c:	003f1106 	br	5ce4 <__alt_data_end+0xfffe5ce4>
    60a0:	00800044 	movi	r2,1
    60a4:	002b883a 	mov	r21,zero
    60a8:	003f1f06 	br	5d28 <__alt_data_end+0xfffe5d28>
    60ac:	81400204 	addi	r5,r16,8
    60b0:	9009883a 	mov	r4,r18
    60b4:	0004d2c0 	call	4d2c <_free_r>
    60b8:	00800074 	movhi	r2,1
    60bc:	108bf704 	addi	r2,r2,12252
    60c0:	10c00017 	ldw	r3,0(r2)
    60c4:	003f2c06 	br	5d78 <__alt_data_end+0xfffe5d78>
    60c8:	00c05504 	movi	r3,340
    60cc:	18800536 	bltu	r3,r2,60e4 <_malloc_r+0x7cc>
    60d0:	3804d3fa 	srli	r2,r7,15
    60d4:	11401e04 	addi	r5,r2,120
    60d8:	10c01dc4 	addi	r3,r2,119
    60dc:	294b883a 	add	r5,r5,r5
    60e0:	003f5606 	br	5e3c <__alt_data_end+0xfffe5e3c>
    60e4:	00c15504 	movi	r3,1364
    60e8:	18800536 	bltu	r3,r2,6100 <_malloc_r+0x7e8>
    60ec:	3804d4ba 	srli	r2,r7,18
    60f0:	11401f44 	addi	r5,r2,125
    60f4:	10c01f04 	addi	r3,r2,124
    60f8:	294b883a 	add	r5,r5,r5
    60fc:	003f4f06 	br	5e3c <__alt_data_end+0xfffe5e3c>
    6100:	01403f84 	movi	r5,254
    6104:	00c01f84 	movi	r3,126
    6108:	003f4c06 	br	5e3c <__alt_data_end+0xfffe5e3c>
    610c:	98800117 	ldw	r2,4(r19)
    6110:	003fa006 	br	5f94 <__alt_data_end+0xfffe5f94>
    6114:	8808d0fa 	srli	r4,r17,3
    6118:	20800044 	addi	r2,r4,1
    611c:	1085883a 	add	r2,r2,r2
    6120:	003e9006 	br	5b64 <__alt_data_end+0xfffe5b64>

00006124 <memchr>:
    6124:	208000cc 	andi	r2,r4,3
    6128:	280f883a 	mov	r7,r5
    612c:	10003426 	beq	r2,zero,6200 <memchr+0xdc>
    6130:	30bfffc4 	addi	r2,r6,-1
    6134:	30001a26 	beq	r6,zero,61a0 <memchr+0x7c>
    6138:	20c00003 	ldbu	r3,0(r4)
    613c:	29803fcc 	andi	r6,r5,255
    6140:	30c0051e 	bne	r6,r3,6158 <memchr+0x34>
    6144:	00001806 	br	61a8 <memchr+0x84>
    6148:	10001526 	beq	r2,zero,61a0 <memchr+0x7c>
    614c:	20c00003 	ldbu	r3,0(r4)
    6150:	10bfffc4 	addi	r2,r2,-1
    6154:	30c01426 	beq	r6,r3,61a8 <memchr+0x84>
    6158:	21000044 	addi	r4,r4,1
    615c:	20c000cc 	andi	r3,r4,3
    6160:	183ff91e 	bne	r3,zero,6148 <__alt_data_end+0xfffe6148>
    6164:	020000c4 	movi	r8,3
    6168:	40801136 	bltu	r8,r2,61b0 <memchr+0x8c>
    616c:	10000c26 	beq	r2,zero,61a0 <memchr+0x7c>
    6170:	20c00003 	ldbu	r3,0(r4)
    6174:	29403fcc 	andi	r5,r5,255
    6178:	28c00b26 	beq	r5,r3,61a8 <memchr+0x84>
    617c:	20c00044 	addi	r3,r4,1
    6180:	39803fcc 	andi	r6,r7,255
    6184:	2089883a 	add	r4,r4,r2
    6188:	00000306 	br	6198 <memchr+0x74>
    618c:	18c00044 	addi	r3,r3,1
    6190:	197fffc3 	ldbu	r5,-1(r3)
    6194:	31400526 	beq	r6,r5,61ac <memchr+0x88>
    6198:	1805883a 	mov	r2,r3
    619c:	20fffb1e 	bne	r4,r3,618c <__alt_data_end+0xfffe618c>
    61a0:	0005883a 	mov	r2,zero
    61a4:	f800283a 	ret
    61a8:	2005883a 	mov	r2,r4
    61ac:	f800283a 	ret
    61b0:	28c03fcc 	andi	r3,r5,255
    61b4:	1812923a 	slli	r9,r3,8
    61b8:	02ffbff4 	movhi	r11,65279
    61bc:	02a02074 	movhi	r10,32897
    61c0:	48d2b03a 	or	r9,r9,r3
    61c4:	4806943a 	slli	r3,r9,16
    61c8:	5affbfc4 	addi	r11,r11,-257
    61cc:	52a02004 	addi	r10,r10,-32640
    61d0:	48d2b03a 	or	r9,r9,r3
    61d4:	20c00017 	ldw	r3,0(r4)
    61d8:	48c6f03a 	xor	r3,r9,r3
    61dc:	1acd883a 	add	r6,r3,r11
    61e0:	00c6303a 	nor	r3,zero,r3
    61e4:	30c6703a 	and	r3,r6,r3
    61e8:	1a86703a 	and	r3,r3,r10
    61ec:	183fe01e 	bne	r3,zero,6170 <__alt_data_end+0xfffe6170>
    61f0:	10bfff04 	addi	r2,r2,-4
    61f4:	21000104 	addi	r4,r4,4
    61f8:	40bff636 	bltu	r8,r2,61d4 <__alt_data_end+0xfffe61d4>
    61fc:	003fdb06 	br	616c <__alt_data_end+0xfffe616c>
    6200:	3005883a 	mov	r2,r6
    6204:	003fd706 	br	6164 <__alt_data_end+0xfffe6164>

00006208 <memcpy>:
    6208:	defffd04 	addi	sp,sp,-12
    620c:	dfc00215 	stw	ra,8(sp)
    6210:	dc400115 	stw	r17,4(sp)
    6214:	dc000015 	stw	r16,0(sp)
    6218:	00c003c4 	movi	r3,15
    621c:	2005883a 	mov	r2,r4
    6220:	1980452e 	bgeu	r3,r6,6338 <memcpy+0x130>
    6224:	2906b03a 	or	r3,r5,r4
    6228:	18c000cc 	andi	r3,r3,3
    622c:	1800441e 	bne	r3,zero,6340 <memcpy+0x138>
    6230:	347ffc04 	addi	r17,r6,-16
    6234:	8822d13a 	srli	r17,r17,4
    6238:	28c00104 	addi	r3,r5,4
    623c:	23400104 	addi	r13,r4,4
    6240:	8820913a 	slli	r16,r17,4
    6244:	2b000204 	addi	r12,r5,8
    6248:	22c00204 	addi	r11,r4,8
    624c:	84000504 	addi	r16,r16,20
    6250:	2a800304 	addi	r10,r5,12
    6254:	22400304 	addi	r9,r4,12
    6258:	2c21883a 	add	r16,r5,r16
    625c:	2811883a 	mov	r8,r5
    6260:	200f883a 	mov	r7,r4
    6264:	41000017 	ldw	r4,0(r8)
    6268:	1fc00017 	ldw	ra,0(r3)
    626c:	63c00017 	ldw	r15,0(r12)
    6270:	39000015 	stw	r4,0(r7)
    6274:	53800017 	ldw	r14,0(r10)
    6278:	6fc00015 	stw	ra,0(r13)
    627c:	5bc00015 	stw	r15,0(r11)
    6280:	4b800015 	stw	r14,0(r9)
    6284:	18c00404 	addi	r3,r3,16
    6288:	39c00404 	addi	r7,r7,16
    628c:	42000404 	addi	r8,r8,16
    6290:	6b400404 	addi	r13,r13,16
    6294:	63000404 	addi	r12,r12,16
    6298:	5ac00404 	addi	r11,r11,16
    629c:	52800404 	addi	r10,r10,16
    62a0:	4a400404 	addi	r9,r9,16
    62a4:	1c3fef1e 	bne	r3,r16,6264 <__alt_data_end+0xfffe6264>
    62a8:	89c00044 	addi	r7,r17,1
    62ac:	380e913a 	slli	r7,r7,4
    62b0:	310003cc 	andi	r4,r6,15
    62b4:	02c000c4 	movi	r11,3
    62b8:	11c7883a 	add	r3,r2,r7
    62bc:	29cb883a 	add	r5,r5,r7
    62c0:	5900212e 	bgeu	r11,r4,6348 <memcpy+0x140>
    62c4:	1813883a 	mov	r9,r3
    62c8:	2811883a 	mov	r8,r5
    62cc:	200f883a 	mov	r7,r4
    62d0:	42800017 	ldw	r10,0(r8)
    62d4:	4a400104 	addi	r9,r9,4
    62d8:	39ffff04 	addi	r7,r7,-4
    62dc:	4abfff15 	stw	r10,-4(r9)
    62e0:	42000104 	addi	r8,r8,4
    62e4:	59fffa36 	bltu	r11,r7,62d0 <__alt_data_end+0xfffe62d0>
    62e8:	213fff04 	addi	r4,r4,-4
    62ec:	2008d0ba 	srli	r4,r4,2
    62f0:	318000cc 	andi	r6,r6,3
    62f4:	21000044 	addi	r4,r4,1
    62f8:	2109883a 	add	r4,r4,r4
    62fc:	2109883a 	add	r4,r4,r4
    6300:	1907883a 	add	r3,r3,r4
    6304:	290b883a 	add	r5,r5,r4
    6308:	30000626 	beq	r6,zero,6324 <memcpy+0x11c>
    630c:	198d883a 	add	r6,r3,r6
    6310:	29c00003 	ldbu	r7,0(r5)
    6314:	18c00044 	addi	r3,r3,1
    6318:	29400044 	addi	r5,r5,1
    631c:	19ffffc5 	stb	r7,-1(r3)
    6320:	19bffb1e 	bne	r3,r6,6310 <__alt_data_end+0xfffe6310>
    6324:	dfc00217 	ldw	ra,8(sp)
    6328:	dc400117 	ldw	r17,4(sp)
    632c:	dc000017 	ldw	r16,0(sp)
    6330:	dec00304 	addi	sp,sp,12
    6334:	f800283a 	ret
    6338:	2007883a 	mov	r3,r4
    633c:	003ff206 	br	6308 <__alt_data_end+0xfffe6308>
    6340:	2007883a 	mov	r3,r4
    6344:	003ff106 	br	630c <__alt_data_end+0xfffe630c>
    6348:	200d883a 	mov	r6,r4
    634c:	003fee06 	br	6308 <__alt_data_end+0xfffe6308>

00006350 <memmove>:
    6350:	2005883a 	mov	r2,r4
    6354:	29000b2e 	bgeu	r5,r4,6384 <memmove+0x34>
    6358:	298f883a 	add	r7,r5,r6
    635c:	21c0092e 	bgeu	r4,r7,6384 <memmove+0x34>
    6360:	2187883a 	add	r3,r4,r6
    6364:	198bc83a 	sub	r5,r3,r6
    6368:	30004826 	beq	r6,zero,648c <memmove+0x13c>
    636c:	39ffffc4 	addi	r7,r7,-1
    6370:	39000003 	ldbu	r4,0(r7)
    6374:	18ffffc4 	addi	r3,r3,-1
    6378:	19000005 	stb	r4,0(r3)
    637c:	28fffb1e 	bne	r5,r3,636c <__alt_data_end+0xfffe636c>
    6380:	f800283a 	ret
    6384:	00c003c4 	movi	r3,15
    6388:	1980412e 	bgeu	r3,r6,6490 <memmove+0x140>
    638c:	2886b03a 	or	r3,r5,r2
    6390:	18c000cc 	andi	r3,r3,3
    6394:	1800401e 	bne	r3,zero,6498 <memmove+0x148>
    6398:	33fffc04 	addi	r15,r6,-16
    639c:	781ed13a 	srli	r15,r15,4
    63a0:	28c00104 	addi	r3,r5,4
    63a4:	13400104 	addi	r13,r2,4
    63a8:	781c913a 	slli	r14,r15,4
    63ac:	2b000204 	addi	r12,r5,8
    63b0:	12c00204 	addi	r11,r2,8
    63b4:	73800504 	addi	r14,r14,20
    63b8:	2a800304 	addi	r10,r5,12
    63bc:	12400304 	addi	r9,r2,12
    63c0:	2b9d883a 	add	r14,r5,r14
    63c4:	2811883a 	mov	r8,r5
    63c8:	100f883a 	mov	r7,r2
    63cc:	41000017 	ldw	r4,0(r8)
    63d0:	39c00404 	addi	r7,r7,16
    63d4:	18c00404 	addi	r3,r3,16
    63d8:	393ffc15 	stw	r4,-16(r7)
    63dc:	193ffc17 	ldw	r4,-16(r3)
    63e0:	6b400404 	addi	r13,r13,16
    63e4:	5ac00404 	addi	r11,r11,16
    63e8:	693ffc15 	stw	r4,-16(r13)
    63ec:	61000017 	ldw	r4,0(r12)
    63f0:	4a400404 	addi	r9,r9,16
    63f4:	42000404 	addi	r8,r8,16
    63f8:	593ffc15 	stw	r4,-16(r11)
    63fc:	51000017 	ldw	r4,0(r10)
    6400:	63000404 	addi	r12,r12,16
    6404:	52800404 	addi	r10,r10,16
    6408:	493ffc15 	stw	r4,-16(r9)
    640c:	1bbfef1e 	bne	r3,r14,63cc <__alt_data_end+0xfffe63cc>
    6410:	79000044 	addi	r4,r15,1
    6414:	2008913a 	slli	r4,r4,4
    6418:	328003cc 	andi	r10,r6,15
    641c:	02c000c4 	movi	r11,3
    6420:	1107883a 	add	r3,r2,r4
    6424:	290b883a 	add	r5,r5,r4
    6428:	5a801e2e 	bgeu	r11,r10,64a4 <memmove+0x154>
    642c:	1813883a 	mov	r9,r3
    6430:	2811883a 	mov	r8,r5
    6434:	500f883a 	mov	r7,r10
    6438:	41000017 	ldw	r4,0(r8)
    643c:	4a400104 	addi	r9,r9,4
    6440:	39ffff04 	addi	r7,r7,-4
    6444:	493fff15 	stw	r4,-4(r9)
    6448:	42000104 	addi	r8,r8,4
    644c:	59fffa36 	bltu	r11,r7,6438 <__alt_data_end+0xfffe6438>
    6450:	513fff04 	addi	r4,r10,-4
    6454:	2008d0ba 	srli	r4,r4,2
    6458:	318000cc 	andi	r6,r6,3
    645c:	21000044 	addi	r4,r4,1
    6460:	2109883a 	add	r4,r4,r4
    6464:	2109883a 	add	r4,r4,r4
    6468:	1907883a 	add	r3,r3,r4
    646c:	290b883a 	add	r5,r5,r4
    6470:	30000b26 	beq	r6,zero,64a0 <memmove+0x150>
    6474:	198d883a 	add	r6,r3,r6
    6478:	29c00003 	ldbu	r7,0(r5)
    647c:	18c00044 	addi	r3,r3,1
    6480:	29400044 	addi	r5,r5,1
    6484:	19ffffc5 	stb	r7,-1(r3)
    6488:	19bffb1e 	bne	r3,r6,6478 <__alt_data_end+0xfffe6478>
    648c:	f800283a 	ret
    6490:	1007883a 	mov	r3,r2
    6494:	003ff606 	br	6470 <__alt_data_end+0xfffe6470>
    6498:	1007883a 	mov	r3,r2
    649c:	003ff506 	br	6474 <__alt_data_end+0xfffe6474>
    64a0:	f800283a 	ret
    64a4:	500d883a 	mov	r6,r10
    64a8:	003ff106 	br	6470 <__alt_data_end+0xfffe6470>

000064ac <memset>:
    64ac:	20c000cc 	andi	r3,r4,3
    64b0:	2005883a 	mov	r2,r4
    64b4:	18004426 	beq	r3,zero,65c8 <memset+0x11c>
    64b8:	31ffffc4 	addi	r7,r6,-1
    64bc:	30004026 	beq	r6,zero,65c0 <memset+0x114>
    64c0:	2813883a 	mov	r9,r5
    64c4:	200d883a 	mov	r6,r4
    64c8:	2007883a 	mov	r3,r4
    64cc:	00000406 	br	64e0 <memset+0x34>
    64d0:	3a3fffc4 	addi	r8,r7,-1
    64d4:	31800044 	addi	r6,r6,1
    64d8:	38003926 	beq	r7,zero,65c0 <memset+0x114>
    64dc:	400f883a 	mov	r7,r8
    64e0:	18c00044 	addi	r3,r3,1
    64e4:	32400005 	stb	r9,0(r6)
    64e8:	1a0000cc 	andi	r8,r3,3
    64ec:	403ff81e 	bne	r8,zero,64d0 <__alt_data_end+0xfffe64d0>
    64f0:	010000c4 	movi	r4,3
    64f4:	21c02d2e 	bgeu	r4,r7,65ac <memset+0x100>
    64f8:	29003fcc 	andi	r4,r5,255
    64fc:	200c923a 	slli	r6,r4,8
    6500:	3108b03a 	or	r4,r6,r4
    6504:	200c943a 	slli	r6,r4,16
    6508:	218cb03a 	or	r6,r4,r6
    650c:	010003c4 	movi	r4,15
    6510:	21c0182e 	bgeu	r4,r7,6574 <memset+0xc8>
    6514:	3b3ffc04 	addi	r12,r7,-16
    6518:	6018d13a 	srli	r12,r12,4
    651c:	1a000104 	addi	r8,r3,4
    6520:	1ac00204 	addi	r11,r3,8
    6524:	6008913a 	slli	r4,r12,4
    6528:	1a800304 	addi	r10,r3,12
    652c:	1813883a 	mov	r9,r3
    6530:	21000504 	addi	r4,r4,20
    6534:	1909883a 	add	r4,r3,r4
    6538:	49800015 	stw	r6,0(r9)
    653c:	41800015 	stw	r6,0(r8)
    6540:	59800015 	stw	r6,0(r11)
    6544:	51800015 	stw	r6,0(r10)
    6548:	42000404 	addi	r8,r8,16
    654c:	4a400404 	addi	r9,r9,16
    6550:	5ac00404 	addi	r11,r11,16
    6554:	52800404 	addi	r10,r10,16
    6558:	413ff71e 	bne	r8,r4,6538 <__alt_data_end+0xfffe6538>
    655c:	63000044 	addi	r12,r12,1
    6560:	6018913a 	slli	r12,r12,4
    6564:	39c003cc 	andi	r7,r7,15
    6568:	010000c4 	movi	r4,3
    656c:	1b07883a 	add	r3,r3,r12
    6570:	21c00e2e 	bgeu	r4,r7,65ac <memset+0x100>
    6574:	1813883a 	mov	r9,r3
    6578:	3811883a 	mov	r8,r7
    657c:	010000c4 	movi	r4,3
    6580:	49800015 	stw	r6,0(r9)
    6584:	423fff04 	addi	r8,r8,-4
    6588:	4a400104 	addi	r9,r9,4
    658c:	223ffc36 	bltu	r4,r8,6580 <__alt_data_end+0xfffe6580>
    6590:	393fff04 	addi	r4,r7,-4
    6594:	2008d0ba 	srli	r4,r4,2
    6598:	39c000cc 	andi	r7,r7,3
    659c:	21000044 	addi	r4,r4,1
    65a0:	2109883a 	add	r4,r4,r4
    65a4:	2109883a 	add	r4,r4,r4
    65a8:	1907883a 	add	r3,r3,r4
    65ac:	38000526 	beq	r7,zero,65c4 <memset+0x118>
    65b0:	19cf883a 	add	r7,r3,r7
    65b4:	19400005 	stb	r5,0(r3)
    65b8:	18c00044 	addi	r3,r3,1
    65bc:	38fffd1e 	bne	r7,r3,65b4 <__alt_data_end+0xfffe65b4>
    65c0:	f800283a 	ret
    65c4:	f800283a 	ret
    65c8:	2007883a 	mov	r3,r4
    65cc:	300f883a 	mov	r7,r6
    65d0:	003fc706 	br	64f0 <__alt_data_end+0xfffe64f0>

000065d4 <_Balloc>:
    65d4:	20801317 	ldw	r2,76(r4)
    65d8:	defffc04 	addi	sp,sp,-16
    65dc:	dc400115 	stw	r17,4(sp)
    65e0:	dc000015 	stw	r16,0(sp)
    65e4:	dfc00315 	stw	ra,12(sp)
    65e8:	dc800215 	stw	r18,8(sp)
    65ec:	2023883a 	mov	r17,r4
    65f0:	2821883a 	mov	r16,r5
    65f4:	10000f26 	beq	r2,zero,6634 <_Balloc+0x60>
    65f8:	8407883a 	add	r3,r16,r16
    65fc:	18c7883a 	add	r3,r3,r3
    6600:	10c7883a 	add	r3,r2,r3
    6604:	18800017 	ldw	r2,0(r3)
    6608:	10001126 	beq	r2,zero,6650 <_Balloc+0x7c>
    660c:	11000017 	ldw	r4,0(r2)
    6610:	19000015 	stw	r4,0(r3)
    6614:	10000415 	stw	zero,16(r2)
    6618:	10000315 	stw	zero,12(r2)
    661c:	dfc00317 	ldw	ra,12(sp)
    6620:	dc800217 	ldw	r18,8(sp)
    6624:	dc400117 	ldw	r17,4(sp)
    6628:	dc000017 	ldw	r16,0(sp)
    662c:	dec00404 	addi	sp,sp,16
    6630:	f800283a 	ret
    6634:	01800844 	movi	r6,33
    6638:	01400104 	movi	r5,4
    663c:	00095100 	call	9510 <_calloc_r>
    6640:	88801315 	stw	r2,76(r17)
    6644:	103fec1e 	bne	r2,zero,65f8 <__alt_data_end+0xfffe65f8>
    6648:	0005883a 	mov	r2,zero
    664c:	003ff306 	br	661c <__alt_data_end+0xfffe661c>
    6650:	01400044 	movi	r5,1
    6654:	2c24983a 	sll	r18,r5,r16
    6658:	8809883a 	mov	r4,r17
    665c:	91800144 	addi	r6,r18,5
    6660:	318d883a 	add	r6,r6,r6
    6664:	318d883a 	add	r6,r6,r6
    6668:	00095100 	call	9510 <_calloc_r>
    666c:	103ff626 	beq	r2,zero,6648 <__alt_data_end+0xfffe6648>
    6670:	14000115 	stw	r16,4(r2)
    6674:	14800215 	stw	r18,8(r2)
    6678:	003fe606 	br	6614 <__alt_data_end+0xfffe6614>

0000667c <_Bfree>:
    667c:	28000826 	beq	r5,zero,66a0 <_Bfree+0x24>
    6680:	28c00117 	ldw	r3,4(r5)
    6684:	20801317 	ldw	r2,76(r4)
    6688:	18c7883a 	add	r3,r3,r3
    668c:	18c7883a 	add	r3,r3,r3
    6690:	10c5883a 	add	r2,r2,r3
    6694:	10c00017 	ldw	r3,0(r2)
    6698:	28c00015 	stw	r3,0(r5)
    669c:	11400015 	stw	r5,0(r2)
    66a0:	f800283a 	ret

000066a4 <__multadd>:
    66a4:	defffa04 	addi	sp,sp,-24
    66a8:	dc800315 	stw	r18,12(sp)
    66ac:	dc400215 	stw	r17,8(sp)
    66b0:	dc000115 	stw	r16,4(sp)
    66b4:	2823883a 	mov	r17,r5
    66b8:	2c000417 	ldw	r16,16(r5)
    66bc:	dfc00515 	stw	ra,20(sp)
    66c0:	dcc00415 	stw	r19,16(sp)
    66c4:	2025883a 	mov	r18,r4
    66c8:	29400504 	addi	r5,r5,20
    66cc:	0011883a 	mov	r8,zero
    66d0:	28c00017 	ldw	r3,0(r5)
    66d4:	29400104 	addi	r5,r5,4
    66d8:	42000044 	addi	r8,r8,1
    66dc:	18bfffcc 	andi	r2,r3,65535
    66e0:	1185383a 	mul	r2,r2,r6
    66e4:	1806d43a 	srli	r3,r3,16
    66e8:	11cf883a 	add	r7,r2,r7
    66ec:	3808d43a 	srli	r4,r7,16
    66f0:	1987383a 	mul	r3,r3,r6
    66f4:	38bfffcc 	andi	r2,r7,65535
    66f8:	1907883a 	add	r3,r3,r4
    66fc:	1808943a 	slli	r4,r3,16
    6700:	180ed43a 	srli	r7,r3,16
    6704:	2085883a 	add	r2,r4,r2
    6708:	28bfff15 	stw	r2,-4(r5)
    670c:	443ff016 	blt	r8,r16,66d0 <__alt_data_end+0xfffe66d0>
    6710:	38000926 	beq	r7,zero,6738 <__multadd+0x94>
    6714:	88800217 	ldw	r2,8(r17)
    6718:	80800f0e 	bge	r16,r2,6758 <__multadd+0xb4>
    671c:	80800144 	addi	r2,r16,5
    6720:	1085883a 	add	r2,r2,r2
    6724:	1085883a 	add	r2,r2,r2
    6728:	8885883a 	add	r2,r17,r2
    672c:	11c00015 	stw	r7,0(r2)
    6730:	84000044 	addi	r16,r16,1
    6734:	8c000415 	stw	r16,16(r17)
    6738:	8805883a 	mov	r2,r17
    673c:	dfc00517 	ldw	ra,20(sp)
    6740:	dcc00417 	ldw	r19,16(sp)
    6744:	dc800317 	ldw	r18,12(sp)
    6748:	dc400217 	ldw	r17,8(sp)
    674c:	dc000117 	ldw	r16,4(sp)
    6750:	dec00604 	addi	sp,sp,24
    6754:	f800283a 	ret
    6758:	89400117 	ldw	r5,4(r17)
    675c:	9009883a 	mov	r4,r18
    6760:	d9c00015 	stw	r7,0(sp)
    6764:	29400044 	addi	r5,r5,1
    6768:	00065d40 	call	65d4 <_Balloc>
    676c:	89800417 	ldw	r6,16(r17)
    6770:	89400304 	addi	r5,r17,12
    6774:	11000304 	addi	r4,r2,12
    6778:	31800084 	addi	r6,r6,2
    677c:	318d883a 	add	r6,r6,r6
    6780:	318d883a 	add	r6,r6,r6
    6784:	1027883a 	mov	r19,r2
    6788:	00062080 	call	6208 <memcpy>
    678c:	d9c00017 	ldw	r7,0(sp)
    6790:	88000a26 	beq	r17,zero,67bc <__multadd+0x118>
    6794:	88c00117 	ldw	r3,4(r17)
    6798:	90801317 	ldw	r2,76(r18)
    679c:	18c7883a 	add	r3,r3,r3
    67a0:	18c7883a 	add	r3,r3,r3
    67a4:	10c5883a 	add	r2,r2,r3
    67a8:	10c00017 	ldw	r3,0(r2)
    67ac:	88c00015 	stw	r3,0(r17)
    67b0:	14400015 	stw	r17,0(r2)
    67b4:	9823883a 	mov	r17,r19
    67b8:	003fd806 	br	671c <__alt_data_end+0xfffe671c>
    67bc:	9823883a 	mov	r17,r19
    67c0:	003fd606 	br	671c <__alt_data_end+0xfffe671c>

000067c4 <__s2b>:
    67c4:	defff904 	addi	sp,sp,-28
    67c8:	dc400115 	stw	r17,4(sp)
    67cc:	dc000015 	stw	r16,0(sp)
    67d0:	2023883a 	mov	r17,r4
    67d4:	2821883a 	mov	r16,r5
    67d8:	39000204 	addi	r4,r7,8
    67dc:	01400244 	movi	r5,9
    67e0:	dcc00315 	stw	r19,12(sp)
    67e4:	dc800215 	stw	r18,8(sp)
    67e8:	dfc00615 	stw	ra,24(sp)
    67ec:	dd400515 	stw	r21,20(sp)
    67f0:	dd000415 	stw	r20,16(sp)
    67f4:	3825883a 	mov	r18,r7
    67f8:	3027883a 	mov	r19,r6
    67fc:	00005880 	call	588 <__divsi3>
    6800:	00c00044 	movi	r3,1
    6804:	000b883a 	mov	r5,zero
    6808:	1880030e 	bge	r3,r2,6818 <__s2b+0x54>
    680c:	18c7883a 	add	r3,r3,r3
    6810:	29400044 	addi	r5,r5,1
    6814:	18bffd16 	blt	r3,r2,680c <__alt_data_end+0xfffe680c>
    6818:	8809883a 	mov	r4,r17
    681c:	00065d40 	call	65d4 <_Balloc>
    6820:	d8c00717 	ldw	r3,28(sp)
    6824:	10c00515 	stw	r3,20(r2)
    6828:	00c00044 	movi	r3,1
    682c:	10c00415 	stw	r3,16(r2)
    6830:	00c00244 	movi	r3,9
    6834:	1cc0210e 	bge	r3,r19,68bc <__s2b+0xf8>
    6838:	80eb883a 	add	r21,r16,r3
    683c:	a829883a 	mov	r20,r21
    6840:	84e1883a 	add	r16,r16,r19
    6844:	a1c00007 	ldb	r7,0(r20)
    6848:	01800284 	movi	r6,10
    684c:	a5000044 	addi	r20,r20,1
    6850:	100b883a 	mov	r5,r2
    6854:	39fff404 	addi	r7,r7,-48
    6858:	8809883a 	mov	r4,r17
    685c:	00066a40 	call	66a4 <__multadd>
    6860:	a43ff81e 	bne	r20,r16,6844 <__alt_data_end+0xfffe6844>
    6864:	ace1883a 	add	r16,r21,r19
    6868:	843ffe04 	addi	r16,r16,-8
    686c:	9c800a0e 	bge	r19,r18,6898 <__s2b+0xd4>
    6870:	94e5c83a 	sub	r18,r18,r19
    6874:	84a5883a 	add	r18,r16,r18
    6878:	81c00007 	ldb	r7,0(r16)
    687c:	01800284 	movi	r6,10
    6880:	84000044 	addi	r16,r16,1
    6884:	100b883a 	mov	r5,r2
    6888:	39fff404 	addi	r7,r7,-48
    688c:	8809883a 	mov	r4,r17
    6890:	00066a40 	call	66a4 <__multadd>
    6894:	84bff81e 	bne	r16,r18,6878 <__alt_data_end+0xfffe6878>
    6898:	dfc00617 	ldw	ra,24(sp)
    689c:	dd400517 	ldw	r21,20(sp)
    68a0:	dd000417 	ldw	r20,16(sp)
    68a4:	dcc00317 	ldw	r19,12(sp)
    68a8:	dc800217 	ldw	r18,8(sp)
    68ac:	dc400117 	ldw	r17,4(sp)
    68b0:	dc000017 	ldw	r16,0(sp)
    68b4:	dec00704 	addi	sp,sp,28
    68b8:	f800283a 	ret
    68bc:	84000284 	addi	r16,r16,10
    68c0:	1827883a 	mov	r19,r3
    68c4:	003fe906 	br	686c <__alt_data_end+0xfffe686c>

000068c8 <__hi0bits>:
    68c8:	20bfffec 	andhi	r2,r4,65535
    68cc:	1000141e 	bne	r2,zero,6920 <__hi0bits+0x58>
    68d0:	2008943a 	slli	r4,r4,16
    68d4:	00800404 	movi	r2,16
    68d8:	20ffc02c 	andhi	r3,r4,65280
    68dc:	1800021e 	bne	r3,zero,68e8 <__hi0bits+0x20>
    68e0:	2008923a 	slli	r4,r4,8
    68e4:	10800204 	addi	r2,r2,8
    68e8:	20fc002c 	andhi	r3,r4,61440
    68ec:	1800021e 	bne	r3,zero,68f8 <__hi0bits+0x30>
    68f0:	2008913a 	slli	r4,r4,4
    68f4:	10800104 	addi	r2,r2,4
    68f8:	20f0002c 	andhi	r3,r4,49152
    68fc:	1800031e 	bne	r3,zero,690c <__hi0bits+0x44>
    6900:	2109883a 	add	r4,r4,r4
    6904:	10800084 	addi	r2,r2,2
    6908:	2109883a 	add	r4,r4,r4
    690c:	20000316 	blt	r4,zero,691c <__hi0bits+0x54>
    6910:	2110002c 	andhi	r4,r4,16384
    6914:	2000041e 	bne	r4,zero,6928 <__hi0bits+0x60>
    6918:	00800804 	movi	r2,32
    691c:	f800283a 	ret
    6920:	0005883a 	mov	r2,zero
    6924:	003fec06 	br	68d8 <__alt_data_end+0xfffe68d8>
    6928:	10800044 	addi	r2,r2,1
    692c:	f800283a 	ret

00006930 <__lo0bits>:
    6930:	20c00017 	ldw	r3,0(r4)
    6934:	188001cc 	andi	r2,r3,7
    6938:	10000826 	beq	r2,zero,695c <__lo0bits+0x2c>
    693c:	1880004c 	andi	r2,r3,1
    6940:	1000211e 	bne	r2,zero,69c8 <__lo0bits+0x98>
    6944:	1880008c 	andi	r2,r3,2
    6948:	1000211e 	bne	r2,zero,69d0 <__lo0bits+0xa0>
    694c:	1806d0ba 	srli	r3,r3,2
    6950:	00800084 	movi	r2,2
    6954:	20c00015 	stw	r3,0(r4)
    6958:	f800283a 	ret
    695c:	18bfffcc 	andi	r2,r3,65535
    6960:	10001326 	beq	r2,zero,69b0 <__lo0bits+0x80>
    6964:	0005883a 	mov	r2,zero
    6968:	19403fcc 	andi	r5,r3,255
    696c:	2800021e 	bne	r5,zero,6978 <__lo0bits+0x48>
    6970:	1806d23a 	srli	r3,r3,8
    6974:	10800204 	addi	r2,r2,8
    6978:	194003cc 	andi	r5,r3,15
    697c:	2800021e 	bne	r5,zero,6988 <__lo0bits+0x58>
    6980:	1806d13a 	srli	r3,r3,4
    6984:	10800104 	addi	r2,r2,4
    6988:	194000cc 	andi	r5,r3,3
    698c:	2800021e 	bne	r5,zero,6998 <__lo0bits+0x68>
    6990:	1806d0ba 	srli	r3,r3,2
    6994:	10800084 	addi	r2,r2,2
    6998:	1940004c 	andi	r5,r3,1
    699c:	2800081e 	bne	r5,zero,69c0 <__lo0bits+0x90>
    69a0:	1806d07a 	srli	r3,r3,1
    69a4:	1800051e 	bne	r3,zero,69bc <__lo0bits+0x8c>
    69a8:	00800804 	movi	r2,32
    69ac:	f800283a 	ret
    69b0:	1806d43a 	srli	r3,r3,16
    69b4:	00800404 	movi	r2,16
    69b8:	003feb06 	br	6968 <__alt_data_end+0xfffe6968>
    69bc:	10800044 	addi	r2,r2,1
    69c0:	20c00015 	stw	r3,0(r4)
    69c4:	f800283a 	ret
    69c8:	0005883a 	mov	r2,zero
    69cc:	f800283a 	ret
    69d0:	1806d07a 	srli	r3,r3,1
    69d4:	00800044 	movi	r2,1
    69d8:	20c00015 	stw	r3,0(r4)
    69dc:	f800283a 	ret

000069e0 <__i2b>:
    69e0:	defffd04 	addi	sp,sp,-12
    69e4:	dc000015 	stw	r16,0(sp)
    69e8:	04000044 	movi	r16,1
    69ec:	dc400115 	stw	r17,4(sp)
    69f0:	2823883a 	mov	r17,r5
    69f4:	800b883a 	mov	r5,r16
    69f8:	dfc00215 	stw	ra,8(sp)
    69fc:	00065d40 	call	65d4 <_Balloc>
    6a00:	14400515 	stw	r17,20(r2)
    6a04:	14000415 	stw	r16,16(r2)
    6a08:	dfc00217 	ldw	ra,8(sp)
    6a0c:	dc400117 	ldw	r17,4(sp)
    6a10:	dc000017 	ldw	r16,0(sp)
    6a14:	dec00304 	addi	sp,sp,12
    6a18:	f800283a 	ret

00006a1c <__multiply>:
    6a1c:	defffa04 	addi	sp,sp,-24
    6a20:	dcc00315 	stw	r19,12(sp)
    6a24:	dc800215 	stw	r18,8(sp)
    6a28:	34c00417 	ldw	r19,16(r6)
    6a2c:	2c800417 	ldw	r18,16(r5)
    6a30:	dd000415 	stw	r20,16(sp)
    6a34:	dc400115 	stw	r17,4(sp)
    6a38:	dfc00515 	stw	ra,20(sp)
    6a3c:	dc000015 	stw	r16,0(sp)
    6a40:	2829883a 	mov	r20,r5
    6a44:	3023883a 	mov	r17,r6
    6a48:	94c0050e 	bge	r18,r19,6a60 <__multiply+0x44>
    6a4c:	9007883a 	mov	r3,r18
    6a50:	3029883a 	mov	r20,r6
    6a54:	9825883a 	mov	r18,r19
    6a58:	2823883a 	mov	r17,r5
    6a5c:	1827883a 	mov	r19,r3
    6a60:	a0800217 	ldw	r2,8(r20)
    6a64:	94e1883a 	add	r16,r18,r19
    6a68:	a1400117 	ldw	r5,4(r20)
    6a6c:	1400010e 	bge	r2,r16,6a74 <__multiply+0x58>
    6a70:	29400044 	addi	r5,r5,1
    6a74:	00065d40 	call	65d4 <_Balloc>
    6a78:	8415883a 	add	r10,r16,r16
    6a7c:	12c00504 	addi	r11,r2,20
    6a80:	5295883a 	add	r10,r10,r10
    6a84:	5a95883a 	add	r10,r11,r10
    6a88:	5807883a 	mov	r3,r11
    6a8c:	5a80032e 	bgeu	r11,r10,6a9c <__multiply+0x80>
    6a90:	18000015 	stw	zero,0(r3)
    6a94:	18c00104 	addi	r3,r3,4
    6a98:	1abffd36 	bltu	r3,r10,6a90 <__alt_data_end+0xfffe6a90>
    6a9c:	9ce7883a 	add	r19,r19,r19
    6aa0:	94a5883a 	add	r18,r18,r18
    6aa4:	89800504 	addi	r6,r17,20
    6aa8:	9ce7883a 	add	r19,r19,r19
    6aac:	a3400504 	addi	r13,r20,20
    6ab0:	94a5883a 	add	r18,r18,r18
    6ab4:	34d9883a 	add	r12,r6,r19
    6ab8:	6c93883a 	add	r9,r13,r18
    6abc:	3300422e 	bgeu	r6,r12,6bc8 <__multiply+0x1ac>
    6ac0:	37c00017 	ldw	ra,0(r6)
    6ac4:	fbffffcc 	andi	r15,ra,65535
    6ac8:	78001b26 	beq	r15,zero,6b38 <__multiply+0x11c>
    6acc:	5811883a 	mov	r8,r11
    6ad0:	681d883a 	mov	r14,r13
    6ad4:	000f883a 	mov	r7,zero
    6ad8:	71000017 	ldw	r4,0(r14)
    6adc:	40c00017 	ldw	r3,0(r8)
    6ae0:	73800104 	addi	r14,r14,4
    6ae4:	217fffcc 	andi	r5,r4,65535
    6ae8:	2bcb383a 	mul	r5,r5,r15
    6aec:	2008d43a 	srli	r4,r4,16
    6af0:	1c7fffcc 	andi	r17,r3,65535
    6af4:	2c4b883a 	add	r5,r5,r17
    6af8:	29cb883a 	add	r5,r5,r7
    6afc:	23c9383a 	mul	r4,r4,r15
    6b00:	1806d43a 	srli	r3,r3,16
    6b04:	280ed43a 	srli	r7,r5,16
    6b08:	297fffcc 	andi	r5,r5,65535
    6b0c:	20c7883a 	add	r3,r4,r3
    6b10:	19c7883a 	add	r3,r3,r7
    6b14:	1808943a 	slli	r4,r3,16
    6b18:	4023883a 	mov	r17,r8
    6b1c:	180ed43a 	srli	r7,r3,16
    6b20:	214ab03a 	or	r5,r4,r5
    6b24:	41400015 	stw	r5,0(r8)
    6b28:	42000104 	addi	r8,r8,4
    6b2c:	727fea36 	bltu	r14,r9,6ad8 <__alt_data_end+0xfffe6ad8>
    6b30:	89c00115 	stw	r7,4(r17)
    6b34:	37c00017 	ldw	ra,0(r6)
    6b38:	f83ed43a 	srli	ra,ra,16
    6b3c:	f8001f26 	beq	ra,zero,6bbc <__multiply+0x1a0>
    6b40:	58c00017 	ldw	r3,0(r11)
    6b44:	681d883a 	mov	r14,r13
    6b48:	581f883a 	mov	r15,r11
    6b4c:	1811883a 	mov	r8,r3
    6b50:	5825883a 	mov	r18,r11
    6b54:	000f883a 	mov	r7,zero
    6b58:	00000106 	br	6b60 <__multiply+0x144>
    6b5c:	8825883a 	mov	r18,r17
    6b60:	7140000b 	ldhu	r5,0(r14)
    6b64:	4010d43a 	srli	r8,r8,16
    6b68:	193fffcc 	andi	r4,r3,65535
    6b6c:	2fcb383a 	mul	r5,r5,ra
    6b70:	7bc00104 	addi	r15,r15,4
    6b74:	73800104 	addi	r14,r14,4
    6b78:	2a0b883a 	add	r5,r5,r8
    6b7c:	29cb883a 	add	r5,r5,r7
    6b80:	2806943a 	slli	r3,r5,16
    6b84:	94400104 	addi	r17,r18,4
    6b88:	280ad43a 	srli	r5,r5,16
    6b8c:	1908b03a 	or	r4,r3,r4
    6b90:	793fff15 	stw	r4,-4(r15)
    6b94:	70ffff17 	ldw	r3,-4(r14)
    6b98:	8a000017 	ldw	r8,0(r17)
    6b9c:	1806d43a 	srli	r3,r3,16
    6ba0:	413fffcc 	andi	r4,r8,65535
    6ba4:	1fc7383a 	mul	r3,r3,ra
    6ba8:	1907883a 	add	r3,r3,r4
    6bac:	1947883a 	add	r3,r3,r5
    6bb0:	180ed43a 	srli	r7,r3,16
    6bb4:	727fe936 	bltu	r14,r9,6b5c <__alt_data_end+0xfffe6b5c>
    6bb8:	90c00115 	stw	r3,4(r18)
    6bbc:	31800104 	addi	r6,r6,4
    6bc0:	5ac00104 	addi	r11,r11,4
    6bc4:	333fbe36 	bltu	r6,r12,6ac0 <__alt_data_end+0xfffe6ac0>
    6bc8:	0400090e 	bge	zero,r16,6bf0 <__multiply+0x1d4>
    6bcc:	50ffff17 	ldw	r3,-4(r10)
    6bd0:	52bfff04 	addi	r10,r10,-4
    6bd4:	18000326 	beq	r3,zero,6be4 <__multiply+0x1c8>
    6bd8:	00000506 	br	6bf0 <__multiply+0x1d4>
    6bdc:	50c00017 	ldw	r3,0(r10)
    6be0:	1800031e 	bne	r3,zero,6bf0 <__multiply+0x1d4>
    6be4:	843fffc4 	addi	r16,r16,-1
    6be8:	52bfff04 	addi	r10,r10,-4
    6bec:	803ffb1e 	bne	r16,zero,6bdc <__alt_data_end+0xfffe6bdc>
    6bf0:	14000415 	stw	r16,16(r2)
    6bf4:	dfc00517 	ldw	ra,20(sp)
    6bf8:	dd000417 	ldw	r20,16(sp)
    6bfc:	dcc00317 	ldw	r19,12(sp)
    6c00:	dc800217 	ldw	r18,8(sp)
    6c04:	dc400117 	ldw	r17,4(sp)
    6c08:	dc000017 	ldw	r16,0(sp)
    6c0c:	dec00604 	addi	sp,sp,24
    6c10:	f800283a 	ret

00006c14 <__pow5mult>:
    6c14:	defffa04 	addi	sp,sp,-24
    6c18:	dcc00315 	stw	r19,12(sp)
    6c1c:	dc000015 	stw	r16,0(sp)
    6c20:	dfc00515 	stw	ra,20(sp)
    6c24:	dd000415 	stw	r20,16(sp)
    6c28:	dc800215 	stw	r18,8(sp)
    6c2c:	dc400115 	stw	r17,4(sp)
    6c30:	308000cc 	andi	r2,r6,3
    6c34:	3021883a 	mov	r16,r6
    6c38:	2027883a 	mov	r19,r4
    6c3c:	10002f1e 	bne	r2,zero,6cfc <__pow5mult+0xe8>
    6c40:	2825883a 	mov	r18,r5
    6c44:	8021d0ba 	srai	r16,r16,2
    6c48:	80001a26 	beq	r16,zero,6cb4 <__pow5mult+0xa0>
    6c4c:	9c401217 	ldw	r17,72(r19)
    6c50:	8800061e 	bne	r17,zero,6c6c <__pow5mult+0x58>
    6c54:	00003406 	br	6d28 <__pow5mult+0x114>
    6c58:	8021d07a 	srai	r16,r16,1
    6c5c:	80001526 	beq	r16,zero,6cb4 <__pow5mult+0xa0>
    6c60:	88800017 	ldw	r2,0(r17)
    6c64:	10001c26 	beq	r2,zero,6cd8 <__pow5mult+0xc4>
    6c68:	1023883a 	mov	r17,r2
    6c6c:	8080004c 	andi	r2,r16,1
    6c70:	103ff926 	beq	r2,zero,6c58 <__alt_data_end+0xfffe6c58>
    6c74:	880d883a 	mov	r6,r17
    6c78:	900b883a 	mov	r5,r18
    6c7c:	9809883a 	mov	r4,r19
    6c80:	0006a1c0 	call	6a1c <__multiply>
    6c84:	90001b26 	beq	r18,zero,6cf4 <__pow5mult+0xe0>
    6c88:	91000117 	ldw	r4,4(r18)
    6c8c:	98c01317 	ldw	r3,76(r19)
    6c90:	8021d07a 	srai	r16,r16,1
    6c94:	2109883a 	add	r4,r4,r4
    6c98:	2109883a 	add	r4,r4,r4
    6c9c:	1907883a 	add	r3,r3,r4
    6ca0:	19000017 	ldw	r4,0(r3)
    6ca4:	91000015 	stw	r4,0(r18)
    6ca8:	1c800015 	stw	r18,0(r3)
    6cac:	1025883a 	mov	r18,r2
    6cb0:	803feb1e 	bne	r16,zero,6c60 <__alt_data_end+0xfffe6c60>
    6cb4:	9005883a 	mov	r2,r18
    6cb8:	dfc00517 	ldw	ra,20(sp)
    6cbc:	dd000417 	ldw	r20,16(sp)
    6cc0:	dcc00317 	ldw	r19,12(sp)
    6cc4:	dc800217 	ldw	r18,8(sp)
    6cc8:	dc400117 	ldw	r17,4(sp)
    6ccc:	dc000017 	ldw	r16,0(sp)
    6cd0:	dec00604 	addi	sp,sp,24
    6cd4:	f800283a 	ret
    6cd8:	880d883a 	mov	r6,r17
    6cdc:	880b883a 	mov	r5,r17
    6ce0:	9809883a 	mov	r4,r19
    6ce4:	0006a1c0 	call	6a1c <__multiply>
    6ce8:	88800015 	stw	r2,0(r17)
    6cec:	10000015 	stw	zero,0(r2)
    6cf0:	003fdd06 	br	6c68 <__alt_data_end+0xfffe6c68>
    6cf4:	1025883a 	mov	r18,r2
    6cf8:	003fd706 	br	6c58 <__alt_data_end+0xfffe6c58>
    6cfc:	10bfffc4 	addi	r2,r2,-1
    6d00:	1085883a 	add	r2,r2,r2
    6d04:	00c00074 	movhi	r3,1
    6d08:	18fdd504 	addi	r3,r3,-2220
    6d0c:	1085883a 	add	r2,r2,r2
    6d10:	1885883a 	add	r2,r3,r2
    6d14:	11800017 	ldw	r6,0(r2)
    6d18:	000f883a 	mov	r7,zero
    6d1c:	00066a40 	call	66a4 <__multadd>
    6d20:	1025883a 	mov	r18,r2
    6d24:	003fc706 	br	6c44 <__alt_data_end+0xfffe6c44>
    6d28:	05000044 	movi	r20,1
    6d2c:	a00b883a 	mov	r5,r20
    6d30:	9809883a 	mov	r4,r19
    6d34:	00065d40 	call	65d4 <_Balloc>
    6d38:	1023883a 	mov	r17,r2
    6d3c:	00809c44 	movi	r2,625
    6d40:	88800515 	stw	r2,20(r17)
    6d44:	8d000415 	stw	r20,16(r17)
    6d48:	9c401215 	stw	r17,72(r19)
    6d4c:	88000015 	stw	zero,0(r17)
    6d50:	003fc606 	br	6c6c <__alt_data_end+0xfffe6c6c>

00006d54 <__lshift>:
    6d54:	defff904 	addi	sp,sp,-28
    6d58:	dd400515 	stw	r21,20(sp)
    6d5c:	dcc00315 	stw	r19,12(sp)
    6d60:	302bd17a 	srai	r21,r6,5
    6d64:	2cc00417 	ldw	r19,16(r5)
    6d68:	28800217 	ldw	r2,8(r5)
    6d6c:	dd000415 	stw	r20,16(sp)
    6d70:	ace7883a 	add	r19,r21,r19
    6d74:	dc800215 	stw	r18,8(sp)
    6d78:	dc400115 	stw	r17,4(sp)
    6d7c:	dc000015 	stw	r16,0(sp)
    6d80:	dfc00615 	stw	ra,24(sp)
    6d84:	9c000044 	addi	r16,r19,1
    6d88:	2823883a 	mov	r17,r5
    6d8c:	3029883a 	mov	r20,r6
    6d90:	2025883a 	mov	r18,r4
    6d94:	29400117 	ldw	r5,4(r5)
    6d98:	1400030e 	bge	r2,r16,6da8 <__lshift+0x54>
    6d9c:	1085883a 	add	r2,r2,r2
    6da0:	29400044 	addi	r5,r5,1
    6da4:	143ffd16 	blt	r2,r16,6d9c <__alt_data_end+0xfffe6d9c>
    6da8:	9009883a 	mov	r4,r18
    6dac:	00065d40 	call	65d4 <_Balloc>
    6db0:	10c00504 	addi	r3,r2,20
    6db4:	0540070e 	bge	zero,r21,6dd4 <__lshift+0x80>
    6db8:	ad6b883a 	add	r21,r21,r21
    6dbc:	ad6b883a 	add	r21,r21,r21
    6dc0:	1809883a 	mov	r4,r3
    6dc4:	1d47883a 	add	r3,r3,r21
    6dc8:	20000015 	stw	zero,0(r4)
    6dcc:	21000104 	addi	r4,r4,4
    6dd0:	193ffd1e 	bne	r3,r4,6dc8 <__alt_data_end+0xfffe6dc8>
    6dd4:	8a000417 	ldw	r8,16(r17)
    6dd8:	89000504 	addi	r4,r17,20
    6ddc:	a18007cc 	andi	r6,r20,31
    6de0:	4211883a 	add	r8,r8,r8
    6de4:	4211883a 	add	r8,r8,r8
    6de8:	2211883a 	add	r8,r4,r8
    6dec:	30002326 	beq	r6,zero,6e7c <__lshift+0x128>
    6df0:	02400804 	movi	r9,32
    6df4:	4993c83a 	sub	r9,r9,r6
    6df8:	000b883a 	mov	r5,zero
    6dfc:	21c00017 	ldw	r7,0(r4)
    6e00:	1815883a 	mov	r10,r3
    6e04:	18c00104 	addi	r3,r3,4
    6e08:	398e983a 	sll	r7,r7,r6
    6e0c:	21000104 	addi	r4,r4,4
    6e10:	394ab03a 	or	r5,r7,r5
    6e14:	197fff15 	stw	r5,-4(r3)
    6e18:	217fff17 	ldw	r5,-4(r4)
    6e1c:	2a4ad83a 	srl	r5,r5,r9
    6e20:	223ff636 	bltu	r4,r8,6dfc <__alt_data_end+0xfffe6dfc>
    6e24:	51400115 	stw	r5,4(r10)
    6e28:	28001a1e 	bne	r5,zero,6e94 <__lshift+0x140>
    6e2c:	843fffc4 	addi	r16,r16,-1
    6e30:	14000415 	stw	r16,16(r2)
    6e34:	88000826 	beq	r17,zero,6e58 <__lshift+0x104>
    6e38:	89000117 	ldw	r4,4(r17)
    6e3c:	90c01317 	ldw	r3,76(r18)
    6e40:	2109883a 	add	r4,r4,r4
    6e44:	2109883a 	add	r4,r4,r4
    6e48:	1907883a 	add	r3,r3,r4
    6e4c:	19000017 	ldw	r4,0(r3)
    6e50:	89000015 	stw	r4,0(r17)
    6e54:	1c400015 	stw	r17,0(r3)
    6e58:	dfc00617 	ldw	ra,24(sp)
    6e5c:	dd400517 	ldw	r21,20(sp)
    6e60:	dd000417 	ldw	r20,16(sp)
    6e64:	dcc00317 	ldw	r19,12(sp)
    6e68:	dc800217 	ldw	r18,8(sp)
    6e6c:	dc400117 	ldw	r17,4(sp)
    6e70:	dc000017 	ldw	r16,0(sp)
    6e74:	dec00704 	addi	sp,sp,28
    6e78:	f800283a 	ret
    6e7c:	21400017 	ldw	r5,0(r4)
    6e80:	18c00104 	addi	r3,r3,4
    6e84:	21000104 	addi	r4,r4,4
    6e88:	197fff15 	stw	r5,-4(r3)
    6e8c:	223ffb36 	bltu	r4,r8,6e7c <__alt_data_end+0xfffe6e7c>
    6e90:	003fe606 	br	6e2c <__alt_data_end+0xfffe6e2c>
    6e94:	9c000084 	addi	r16,r19,2
    6e98:	003fe406 	br	6e2c <__alt_data_end+0xfffe6e2c>

00006e9c <__mcmp>:
    6e9c:	20800417 	ldw	r2,16(r4)
    6ea0:	28c00417 	ldw	r3,16(r5)
    6ea4:	10c5c83a 	sub	r2,r2,r3
    6ea8:	1000111e 	bne	r2,zero,6ef0 <__mcmp+0x54>
    6eac:	18c7883a 	add	r3,r3,r3
    6eb0:	18c7883a 	add	r3,r3,r3
    6eb4:	21000504 	addi	r4,r4,20
    6eb8:	29400504 	addi	r5,r5,20
    6ebc:	20c5883a 	add	r2,r4,r3
    6ec0:	28cb883a 	add	r5,r5,r3
    6ec4:	00000106 	br	6ecc <__mcmp+0x30>
    6ec8:	20800a2e 	bgeu	r4,r2,6ef4 <__mcmp+0x58>
    6ecc:	10bfff04 	addi	r2,r2,-4
    6ed0:	297fff04 	addi	r5,r5,-4
    6ed4:	11800017 	ldw	r6,0(r2)
    6ed8:	28c00017 	ldw	r3,0(r5)
    6edc:	30fffa26 	beq	r6,r3,6ec8 <__alt_data_end+0xfffe6ec8>
    6ee0:	30c00236 	bltu	r6,r3,6eec <__mcmp+0x50>
    6ee4:	00800044 	movi	r2,1
    6ee8:	f800283a 	ret
    6eec:	00bfffc4 	movi	r2,-1
    6ef0:	f800283a 	ret
    6ef4:	0005883a 	mov	r2,zero
    6ef8:	f800283a 	ret

00006efc <__mdiff>:
    6efc:	28c00417 	ldw	r3,16(r5)
    6f00:	30800417 	ldw	r2,16(r6)
    6f04:	defffa04 	addi	sp,sp,-24
    6f08:	dcc00315 	stw	r19,12(sp)
    6f0c:	dc800215 	stw	r18,8(sp)
    6f10:	dfc00515 	stw	ra,20(sp)
    6f14:	dd000415 	stw	r20,16(sp)
    6f18:	dc400115 	stw	r17,4(sp)
    6f1c:	dc000015 	stw	r16,0(sp)
    6f20:	1887c83a 	sub	r3,r3,r2
    6f24:	2825883a 	mov	r18,r5
    6f28:	3027883a 	mov	r19,r6
    6f2c:	1800141e 	bne	r3,zero,6f80 <__mdiff+0x84>
    6f30:	1085883a 	add	r2,r2,r2
    6f34:	1085883a 	add	r2,r2,r2
    6f38:	2a000504 	addi	r8,r5,20
    6f3c:	34000504 	addi	r16,r6,20
    6f40:	4087883a 	add	r3,r8,r2
    6f44:	8085883a 	add	r2,r16,r2
    6f48:	00000106 	br	6f50 <__mdiff+0x54>
    6f4c:	40c0592e 	bgeu	r8,r3,70b4 <__mdiff+0x1b8>
    6f50:	18ffff04 	addi	r3,r3,-4
    6f54:	10bfff04 	addi	r2,r2,-4
    6f58:	19c00017 	ldw	r7,0(r3)
    6f5c:	11400017 	ldw	r5,0(r2)
    6f60:	397ffa26 	beq	r7,r5,6f4c <__alt_data_end+0xfffe6f4c>
    6f64:	3940592e 	bgeu	r7,r5,70cc <__mdiff+0x1d0>
    6f68:	9005883a 	mov	r2,r18
    6f6c:	4023883a 	mov	r17,r8
    6f70:	9825883a 	mov	r18,r19
    6f74:	05000044 	movi	r20,1
    6f78:	1027883a 	mov	r19,r2
    6f7c:	00000406 	br	6f90 <__mdiff+0x94>
    6f80:	18005616 	blt	r3,zero,70dc <__mdiff+0x1e0>
    6f84:	34400504 	addi	r17,r6,20
    6f88:	2c000504 	addi	r16,r5,20
    6f8c:	0029883a 	mov	r20,zero
    6f90:	91400117 	ldw	r5,4(r18)
    6f94:	00065d40 	call	65d4 <_Balloc>
    6f98:	92400417 	ldw	r9,16(r18)
    6f9c:	9b000417 	ldw	r12,16(r19)
    6fa0:	12c00504 	addi	r11,r2,20
    6fa4:	4a51883a 	add	r8,r9,r9
    6fa8:	6319883a 	add	r12,r12,r12
    6fac:	4211883a 	add	r8,r8,r8
    6fb0:	6319883a 	add	r12,r12,r12
    6fb4:	15000315 	stw	r20,12(r2)
    6fb8:	8211883a 	add	r8,r16,r8
    6fbc:	8b19883a 	add	r12,r17,r12
    6fc0:	0007883a 	mov	r3,zero
    6fc4:	81400017 	ldw	r5,0(r16)
    6fc8:	89c00017 	ldw	r7,0(r17)
    6fcc:	59800104 	addi	r6,r11,4
    6fd0:	293fffcc 	andi	r4,r5,65535
    6fd4:	20c7883a 	add	r3,r4,r3
    6fd8:	393fffcc 	andi	r4,r7,65535
    6fdc:	1909c83a 	sub	r4,r3,r4
    6fe0:	280ad43a 	srli	r5,r5,16
    6fe4:	380ed43a 	srli	r7,r7,16
    6fe8:	2007d43a 	srai	r3,r4,16
    6fec:	213fffcc 	andi	r4,r4,65535
    6ff0:	29cbc83a 	sub	r5,r5,r7
    6ff4:	28c7883a 	add	r3,r5,r3
    6ff8:	180a943a 	slli	r5,r3,16
    6ffc:	8c400104 	addi	r17,r17,4
    7000:	84000104 	addi	r16,r16,4
    7004:	2908b03a 	or	r4,r5,r4
    7008:	59000015 	stw	r4,0(r11)
    700c:	1807d43a 	srai	r3,r3,16
    7010:	3015883a 	mov	r10,r6
    7014:	3017883a 	mov	r11,r6
    7018:	8b3fea36 	bltu	r17,r12,6fc4 <__alt_data_end+0xfffe6fc4>
    701c:	8200162e 	bgeu	r16,r8,7078 <__mdiff+0x17c>
    7020:	8017883a 	mov	r11,r16
    7024:	59400017 	ldw	r5,0(r11)
    7028:	31800104 	addi	r6,r6,4
    702c:	5ac00104 	addi	r11,r11,4
    7030:	293fffcc 	andi	r4,r5,65535
    7034:	20c7883a 	add	r3,r4,r3
    7038:	280ed43a 	srli	r7,r5,16
    703c:	180bd43a 	srai	r5,r3,16
    7040:	193fffcc 	andi	r4,r3,65535
    7044:	3947883a 	add	r3,r7,r5
    7048:	180a943a 	slli	r5,r3,16
    704c:	1807d43a 	srai	r3,r3,16
    7050:	2908b03a 	or	r4,r5,r4
    7054:	313fff15 	stw	r4,-4(r6)
    7058:	5a3ff236 	bltu	r11,r8,7024 <__alt_data_end+0xfffe7024>
    705c:	0406303a 	nor	r3,zero,r16
    7060:	1a07883a 	add	r3,r3,r8
    7064:	1806d0ba 	srli	r3,r3,2
    7068:	18c00044 	addi	r3,r3,1
    706c:	18c7883a 	add	r3,r3,r3
    7070:	18c7883a 	add	r3,r3,r3
    7074:	50d5883a 	add	r10,r10,r3
    7078:	50ffff04 	addi	r3,r10,-4
    707c:	2000041e 	bne	r4,zero,7090 <__mdiff+0x194>
    7080:	18ffff04 	addi	r3,r3,-4
    7084:	19000017 	ldw	r4,0(r3)
    7088:	4a7fffc4 	addi	r9,r9,-1
    708c:	203ffc26 	beq	r4,zero,7080 <__alt_data_end+0xfffe7080>
    7090:	12400415 	stw	r9,16(r2)
    7094:	dfc00517 	ldw	ra,20(sp)
    7098:	dd000417 	ldw	r20,16(sp)
    709c:	dcc00317 	ldw	r19,12(sp)
    70a0:	dc800217 	ldw	r18,8(sp)
    70a4:	dc400117 	ldw	r17,4(sp)
    70a8:	dc000017 	ldw	r16,0(sp)
    70ac:	dec00604 	addi	sp,sp,24
    70b0:	f800283a 	ret
    70b4:	000b883a 	mov	r5,zero
    70b8:	00065d40 	call	65d4 <_Balloc>
    70bc:	00c00044 	movi	r3,1
    70c0:	10c00415 	stw	r3,16(r2)
    70c4:	10000515 	stw	zero,20(r2)
    70c8:	003ff206 	br	7094 <__alt_data_end+0xfffe7094>
    70cc:	8023883a 	mov	r17,r16
    70d0:	0029883a 	mov	r20,zero
    70d4:	4021883a 	mov	r16,r8
    70d8:	003fad06 	br	6f90 <__alt_data_end+0xfffe6f90>
    70dc:	9005883a 	mov	r2,r18
    70e0:	94400504 	addi	r17,r18,20
    70e4:	9c000504 	addi	r16,r19,20
    70e8:	9825883a 	mov	r18,r19
    70ec:	05000044 	movi	r20,1
    70f0:	1027883a 	mov	r19,r2
    70f4:	003fa606 	br	6f90 <__alt_data_end+0xfffe6f90>

000070f8 <__ulp>:
    70f8:	295ffc2c 	andhi	r5,r5,32752
    70fc:	00bf3034 	movhi	r2,64704
    7100:	2887883a 	add	r3,r5,r2
    7104:	00c0020e 	bge	zero,r3,7110 <__ulp+0x18>
    7108:	0005883a 	mov	r2,zero
    710c:	f800283a 	ret
    7110:	00c7c83a 	sub	r3,zero,r3
    7114:	1807d53a 	srai	r3,r3,20
    7118:	008004c4 	movi	r2,19
    711c:	10c00b0e 	bge	r2,r3,714c <__ulp+0x54>
    7120:	18bffb04 	addi	r2,r3,-20
    7124:	01000784 	movi	r4,30
    7128:	0007883a 	mov	r3,zero
    712c:	20800516 	blt	r4,r2,7144 <__ulp+0x4c>
    7130:	010007c4 	movi	r4,31
    7134:	2089c83a 	sub	r4,r4,r2
    7138:	00800044 	movi	r2,1
    713c:	1104983a 	sll	r2,r2,r4
    7140:	f800283a 	ret
    7144:	00800044 	movi	r2,1
    7148:	f800283a 	ret
    714c:	01400234 	movhi	r5,8
    7150:	28c7d83a 	sra	r3,r5,r3
    7154:	0005883a 	mov	r2,zero
    7158:	f800283a 	ret

0000715c <__b2d>:
    715c:	defffa04 	addi	sp,sp,-24
    7160:	dc000015 	stw	r16,0(sp)
    7164:	24000417 	ldw	r16,16(r4)
    7168:	dc400115 	stw	r17,4(sp)
    716c:	24400504 	addi	r17,r4,20
    7170:	8421883a 	add	r16,r16,r16
    7174:	8421883a 	add	r16,r16,r16
    7178:	8c21883a 	add	r16,r17,r16
    717c:	dc800215 	stw	r18,8(sp)
    7180:	84bfff17 	ldw	r18,-4(r16)
    7184:	dd000415 	stw	r20,16(sp)
    7188:	dcc00315 	stw	r19,12(sp)
    718c:	9009883a 	mov	r4,r18
    7190:	2829883a 	mov	r20,r5
    7194:	dfc00515 	stw	ra,20(sp)
    7198:	00068c80 	call	68c8 <__hi0bits>
    719c:	00c00804 	movi	r3,32
    71a0:	1889c83a 	sub	r4,r3,r2
    71a4:	a1000015 	stw	r4,0(r20)
    71a8:	01000284 	movi	r4,10
    71ac:	84ffff04 	addi	r19,r16,-4
    71b0:	20801216 	blt	r4,r2,71fc <__b2d+0xa0>
    71b4:	018002c4 	movi	r6,11
    71b8:	308dc83a 	sub	r6,r6,r2
    71bc:	9186d83a 	srl	r3,r18,r6
    71c0:	18cffc34 	orhi	r3,r3,16368
    71c4:	8cc0212e 	bgeu	r17,r19,724c <__b2d+0xf0>
    71c8:	813ffe17 	ldw	r4,-8(r16)
    71cc:	218cd83a 	srl	r6,r4,r6
    71d0:	10800544 	addi	r2,r2,21
    71d4:	9084983a 	sll	r2,r18,r2
    71d8:	1184b03a 	or	r2,r2,r6
    71dc:	dfc00517 	ldw	ra,20(sp)
    71e0:	dd000417 	ldw	r20,16(sp)
    71e4:	dcc00317 	ldw	r19,12(sp)
    71e8:	dc800217 	ldw	r18,8(sp)
    71ec:	dc400117 	ldw	r17,4(sp)
    71f0:	dc000017 	ldw	r16,0(sp)
    71f4:	dec00604 	addi	sp,sp,24
    71f8:	f800283a 	ret
    71fc:	8cc00f2e 	bgeu	r17,r19,723c <__b2d+0xe0>
    7200:	117ffd44 	addi	r5,r2,-11
    7204:	80bffe17 	ldw	r2,-8(r16)
    7208:	28000e26 	beq	r5,zero,7244 <__b2d+0xe8>
    720c:	1949c83a 	sub	r4,r3,r5
    7210:	9164983a 	sll	r18,r18,r5
    7214:	1106d83a 	srl	r3,r2,r4
    7218:	81bffe04 	addi	r6,r16,-8
    721c:	948ffc34 	orhi	r18,r18,16368
    7220:	90c6b03a 	or	r3,r18,r3
    7224:	89800e2e 	bgeu	r17,r6,7260 <__b2d+0x104>
    7228:	81bffd17 	ldw	r6,-12(r16)
    722c:	1144983a 	sll	r2,r2,r5
    7230:	310ad83a 	srl	r5,r6,r4
    7234:	2884b03a 	or	r2,r5,r2
    7238:	003fe806 	br	71dc <__alt_data_end+0xfffe71dc>
    723c:	10bffd44 	addi	r2,r2,-11
    7240:	1000041e 	bne	r2,zero,7254 <__b2d+0xf8>
    7244:	90cffc34 	orhi	r3,r18,16368
    7248:	003fe406 	br	71dc <__alt_data_end+0xfffe71dc>
    724c:	000d883a 	mov	r6,zero
    7250:	003fdf06 	br	71d0 <__alt_data_end+0xfffe71d0>
    7254:	90a4983a 	sll	r18,r18,r2
    7258:	0005883a 	mov	r2,zero
    725c:	003ff906 	br	7244 <__alt_data_end+0xfffe7244>
    7260:	1144983a 	sll	r2,r2,r5
    7264:	003fdd06 	br	71dc <__alt_data_end+0xfffe71dc>

00007268 <__d2b>:
    7268:	defff804 	addi	sp,sp,-32
    726c:	dc000215 	stw	r16,8(sp)
    7270:	3021883a 	mov	r16,r6
    7274:	dc400315 	stw	r17,12(sp)
    7278:	8022907a 	slli	r17,r16,1
    727c:	dd000615 	stw	r20,24(sp)
    7280:	2829883a 	mov	r20,r5
    7284:	01400044 	movi	r5,1
    7288:	dcc00515 	stw	r19,20(sp)
    728c:	dc800415 	stw	r18,16(sp)
    7290:	dfc00715 	stw	ra,28(sp)
    7294:	3825883a 	mov	r18,r7
    7298:	8822d57a 	srli	r17,r17,21
    729c:	00065d40 	call	65d4 <_Balloc>
    72a0:	1027883a 	mov	r19,r2
    72a4:	00800434 	movhi	r2,16
    72a8:	10bfffc4 	addi	r2,r2,-1
    72ac:	808c703a 	and	r6,r16,r2
    72b0:	88000126 	beq	r17,zero,72b8 <__d2b+0x50>
    72b4:	31800434 	orhi	r6,r6,16
    72b8:	d9800015 	stw	r6,0(sp)
    72bc:	a0002426 	beq	r20,zero,7350 <__d2b+0xe8>
    72c0:	d9000104 	addi	r4,sp,4
    72c4:	dd000115 	stw	r20,4(sp)
    72c8:	00069300 	call	6930 <__lo0bits>
    72cc:	d8c00017 	ldw	r3,0(sp)
    72d0:	10002f1e 	bne	r2,zero,7390 <__d2b+0x128>
    72d4:	d9000117 	ldw	r4,4(sp)
    72d8:	99000515 	stw	r4,20(r19)
    72dc:	1821003a 	cmpeq	r16,r3,zero
    72e0:	01000084 	movi	r4,2
    72e4:	2421c83a 	sub	r16,r4,r16
    72e8:	98c00615 	stw	r3,24(r19)
    72ec:	9c000415 	stw	r16,16(r19)
    72f0:	88001f1e 	bne	r17,zero,7370 <__d2b+0x108>
    72f4:	10bef384 	addi	r2,r2,-1074
    72f8:	90800015 	stw	r2,0(r18)
    72fc:	00900034 	movhi	r2,16384
    7300:	10bfffc4 	addi	r2,r2,-1
    7304:	8085883a 	add	r2,r16,r2
    7308:	1085883a 	add	r2,r2,r2
    730c:	1085883a 	add	r2,r2,r2
    7310:	9885883a 	add	r2,r19,r2
    7314:	11000517 	ldw	r4,20(r2)
    7318:	8020917a 	slli	r16,r16,5
    731c:	00068c80 	call	68c8 <__hi0bits>
    7320:	d8c00817 	ldw	r3,32(sp)
    7324:	8085c83a 	sub	r2,r16,r2
    7328:	18800015 	stw	r2,0(r3)
    732c:	9805883a 	mov	r2,r19
    7330:	dfc00717 	ldw	ra,28(sp)
    7334:	dd000617 	ldw	r20,24(sp)
    7338:	dcc00517 	ldw	r19,20(sp)
    733c:	dc800417 	ldw	r18,16(sp)
    7340:	dc400317 	ldw	r17,12(sp)
    7344:	dc000217 	ldw	r16,8(sp)
    7348:	dec00804 	addi	sp,sp,32
    734c:	f800283a 	ret
    7350:	d809883a 	mov	r4,sp
    7354:	00069300 	call	6930 <__lo0bits>
    7358:	d8c00017 	ldw	r3,0(sp)
    735c:	04000044 	movi	r16,1
    7360:	9c000415 	stw	r16,16(r19)
    7364:	98c00515 	stw	r3,20(r19)
    7368:	10800804 	addi	r2,r2,32
    736c:	883fe126 	beq	r17,zero,72f4 <__alt_data_end+0xfffe72f4>
    7370:	00c00d44 	movi	r3,53
    7374:	8c7ef344 	addi	r17,r17,-1075
    7378:	88a3883a 	add	r17,r17,r2
    737c:	1885c83a 	sub	r2,r3,r2
    7380:	d8c00817 	ldw	r3,32(sp)
    7384:	94400015 	stw	r17,0(r18)
    7388:	18800015 	stw	r2,0(r3)
    738c:	003fe706 	br	732c <__alt_data_end+0xfffe732c>
    7390:	01000804 	movi	r4,32
    7394:	2089c83a 	sub	r4,r4,r2
    7398:	1908983a 	sll	r4,r3,r4
    739c:	d9400117 	ldw	r5,4(sp)
    73a0:	1886d83a 	srl	r3,r3,r2
    73a4:	2148b03a 	or	r4,r4,r5
    73a8:	99000515 	stw	r4,20(r19)
    73ac:	d8c00015 	stw	r3,0(sp)
    73b0:	003fca06 	br	72dc <__alt_data_end+0xfffe72dc>

000073b4 <__ratio>:
    73b4:	defff904 	addi	sp,sp,-28
    73b8:	dc400315 	stw	r17,12(sp)
    73bc:	2823883a 	mov	r17,r5
    73c0:	d9400104 	addi	r5,sp,4
    73c4:	dfc00615 	stw	ra,24(sp)
    73c8:	dcc00515 	stw	r19,20(sp)
    73cc:	dc800415 	stw	r18,16(sp)
    73d0:	2027883a 	mov	r19,r4
    73d4:	dc000215 	stw	r16,8(sp)
    73d8:	000715c0 	call	715c <__b2d>
    73dc:	d80b883a 	mov	r5,sp
    73e0:	8809883a 	mov	r4,r17
    73e4:	1025883a 	mov	r18,r2
    73e8:	1821883a 	mov	r16,r3
    73ec:	000715c0 	call	715c <__b2d>
    73f0:	8a000417 	ldw	r8,16(r17)
    73f4:	99000417 	ldw	r4,16(r19)
    73f8:	d9400117 	ldw	r5,4(sp)
    73fc:	2209c83a 	sub	r4,r4,r8
    7400:	2010917a 	slli	r8,r4,5
    7404:	d9000017 	ldw	r4,0(sp)
    7408:	2909c83a 	sub	r4,r5,r4
    740c:	4109883a 	add	r4,r8,r4
    7410:	01000e0e 	bge	zero,r4,744c <__ratio+0x98>
    7414:	2008953a 	slli	r4,r4,20
    7418:	2421883a 	add	r16,r4,r16
    741c:	100d883a 	mov	r6,r2
    7420:	180f883a 	mov	r7,r3
    7424:	9009883a 	mov	r4,r18
    7428:	800b883a 	mov	r5,r16
    742c:	000b0ec0 	call	b0ec <__divdf3>
    7430:	dfc00617 	ldw	ra,24(sp)
    7434:	dcc00517 	ldw	r19,20(sp)
    7438:	dc800417 	ldw	r18,16(sp)
    743c:	dc400317 	ldw	r17,12(sp)
    7440:	dc000217 	ldw	r16,8(sp)
    7444:	dec00704 	addi	sp,sp,28
    7448:	f800283a 	ret
    744c:	2008953a 	slli	r4,r4,20
    7450:	1907c83a 	sub	r3,r3,r4
    7454:	003ff106 	br	741c <__alt_data_end+0xfffe741c>

00007458 <_mprec_log10>:
    7458:	defffe04 	addi	sp,sp,-8
    745c:	dc000015 	stw	r16,0(sp)
    7460:	dfc00115 	stw	ra,4(sp)
    7464:	008005c4 	movi	r2,23
    7468:	2021883a 	mov	r16,r4
    746c:	11000d0e 	bge	r2,r4,74a4 <_mprec_log10+0x4c>
    7470:	0005883a 	mov	r2,zero
    7474:	00cffc34 	movhi	r3,16368
    7478:	843fffc4 	addi	r16,r16,-1
    747c:	000d883a 	mov	r6,zero
    7480:	01d00934 	movhi	r7,16420
    7484:	1009883a 	mov	r4,r2
    7488:	180b883a 	mov	r5,r3
    748c:	000bc2c0 	call	bc2c <__muldf3>
    7490:	803ff91e 	bne	r16,zero,7478 <__alt_data_end+0xfffe7478>
    7494:	dfc00117 	ldw	ra,4(sp)
    7498:	dc000017 	ldw	r16,0(sp)
    749c:	dec00204 	addi	sp,sp,8
    74a0:	f800283a 	ret
    74a4:	202090fa 	slli	r16,r4,3
    74a8:	00800074 	movhi	r2,1
    74ac:	10bdec04 	addi	r2,r2,-2128
    74b0:	1421883a 	add	r16,r2,r16
    74b4:	80800017 	ldw	r2,0(r16)
    74b8:	80c00117 	ldw	r3,4(r16)
    74bc:	dfc00117 	ldw	ra,4(sp)
    74c0:	dc000017 	ldw	r16,0(sp)
    74c4:	dec00204 	addi	sp,sp,8
    74c8:	f800283a 	ret

000074cc <__copybits>:
    74cc:	297fffc4 	addi	r5,r5,-1
    74d0:	280fd17a 	srai	r7,r5,5
    74d4:	30c00417 	ldw	r3,16(r6)
    74d8:	30800504 	addi	r2,r6,20
    74dc:	39c00044 	addi	r7,r7,1
    74e0:	18c7883a 	add	r3,r3,r3
    74e4:	39cf883a 	add	r7,r7,r7
    74e8:	18c7883a 	add	r3,r3,r3
    74ec:	39cf883a 	add	r7,r7,r7
    74f0:	10c7883a 	add	r3,r2,r3
    74f4:	21cf883a 	add	r7,r4,r7
    74f8:	10c00d2e 	bgeu	r2,r3,7530 <__copybits+0x64>
    74fc:	200b883a 	mov	r5,r4
    7500:	12000017 	ldw	r8,0(r2)
    7504:	29400104 	addi	r5,r5,4
    7508:	10800104 	addi	r2,r2,4
    750c:	2a3fff15 	stw	r8,-4(r5)
    7510:	10fffb36 	bltu	r2,r3,7500 <__alt_data_end+0xfffe7500>
    7514:	1985c83a 	sub	r2,r3,r6
    7518:	10bffac4 	addi	r2,r2,-21
    751c:	1004d0ba 	srli	r2,r2,2
    7520:	10800044 	addi	r2,r2,1
    7524:	1085883a 	add	r2,r2,r2
    7528:	1085883a 	add	r2,r2,r2
    752c:	2089883a 	add	r4,r4,r2
    7530:	21c0032e 	bgeu	r4,r7,7540 <__copybits+0x74>
    7534:	20000015 	stw	zero,0(r4)
    7538:	21000104 	addi	r4,r4,4
    753c:	21fffd36 	bltu	r4,r7,7534 <__alt_data_end+0xfffe7534>
    7540:	f800283a 	ret

00007544 <__any_on>:
    7544:	20c00417 	ldw	r3,16(r4)
    7548:	2805d17a 	srai	r2,r5,5
    754c:	21000504 	addi	r4,r4,20
    7550:	18800d0e 	bge	r3,r2,7588 <__any_on+0x44>
    7554:	18c7883a 	add	r3,r3,r3
    7558:	18c7883a 	add	r3,r3,r3
    755c:	20c7883a 	add	r3,r4,r3
    7560:	20c0192e 	bgeu	r4,r3,75c8 <__any_on+0x84>
    7564:	18bfff17 	ldw	r2,-4(r3)
    7568:	18ffff04 	addi	r3,r3,-4
    756c:	1000041e 	bne	r2,zero,7580 <__any_on+0x3c>
    7570:	20c0142e 	bgeu	r4,r3,75c4 <__any_on+0x80>
    7574:	18ffff04 	addi	r3,r3,-4
    7578:	19400017 	ldw	r5,0(r3)
    757c:	283ffc26 	beq	r5,zero,7570 <__alt_data_end+0xfffe7570>
    7580:	00800044 	movi	r2,1
    7584:	f800283a 	ret
    7588:	10c00a0e 	bge	r2,r3,75b4 <__any_on+0x70>
    758c:	1085883a 	add	r2,r2,r2
    7590:	1085883a 	add	r2,r2,r2
    7594:	294007cc 	andi	r5,r5,31
    7598:	2087883a 	add	r3,r4,r2
    759c:	283ff026 	beq	r5,zero,7560 <__alt_data_end+0xfffe7560>
    75a0:	19800017 	ldw	r6,0(r3)
    75a4:	3144d83a 	srl	r2,r6,r5
    75a8:	114a983a 	sll	r5,r2,r5
    75ac:	317ff41e 	bne	r6,r5,7580 <__alt_data_end+0xfffe7580>
    75b0:	003feb06 	br	7560 <__alt_data_end+0xfffe7560>
    75b4:	1085883a 	add	r2,r2,r2
    75b8:	1085883a 	add	r2,r2,r2
    75bc:	2087883a 	add	r3,r4,r2
    75c0:	003fe706 	br	7560 <__alt_data_end+0xfffe7560>
    75c4:	f800283a 	ret
    75c8:	0005883a 	mov	r2,zero
    75cc:	f800283a 	ret

000075d0 <_realloc_r>:
    75d0:	defff604 	addi	sp,sp,-40
    75d4:	dc800215 	stw	r18,8(sp)
    75d8:	dfc00915 	stw	ra,36(sp)
    75dc:	df000815 	stw	fp,32(sp)
    75e0:	ddc00715 	stw	r23,28(sp)
    75e4:	dd800615 	stw	r22,24(sp)
    75e8:	dd400515 	stw	r21,20(sp)
    75ec:	dd000415 	stw	r20,16(sp)
    75f0:	dcc00315 	stw	r19,12(sp)
    75f4:	dc400115 	stw	r17,4(sp)
    75f8:	dc000015 	stw	r16,0(sp)
    75fc:	3025883a 	mov	r18,r6
    7600:	2800b726 	beq	r5,zero,78e0 <_realloc_r+0x310>
    7604:	282b883a 	mov	r21,r5
    7608:	2029883a 	mov	r20,r4
    760c:	000d4240 	call	d424 <__malloc_lock>
    7610:	a8bfff17 	ldw	r2,-4(r21)
    7614:	043fff04 	movi	r16,-4
    7618:	90c002c4 	addi	r3,r18,11
    761c:	01000584 	movi	r4,22
    7620:	acfffe04 	addi	r19,r21,-8
    7624:	1420703a 	and	r16,r2,r16
    7628:	20c0332e 	bgeu	r4,r3,76f8 <_realloc_r+0x128>
    762c:	047ffe04 	movi	r17,-8
    7630:	1c62703a 	and	r17,r3,r17
    7634:	8807883a 	mov	r3,r17
    7638:	88005816 	blt	r17,zero,779c <_realloc_r+0x1cc>
    763c:	8c805736 	bltu	r17,r18,779c <_realloc_r+0x1cc>
    7640:	80c0300e 	bge	r16,r3,7704 <_realloc_r+0x134>
    7644:	07000074 	movhi	fp,1
    7648:	e73f9a04 	addi	fp,fp,-408
    764c:	e1c00217 	ldw	r7,8(fp)
    7650:	9c09883a 	add	r4,r19,r16
    7654:	22000117 	ldw	r8,4(r4)
    7658:	21c06326 	beq	r4,r7,77e8 <_realloc_r+0x218>
    765c:	017fff84 	movi	r5,-2
    7660:	414a703a 	and	r5,r8,r5
    7664:	214b883a 	add	r5,r4,r5
    7668:	29800117 	ldw	r6,4(r5)
    766c:	3180004c 	andi	r6,r6,1
    7670:	30003f26 	beq	r6,zero,7770 <_realloc_r+0x1a0>
    7674:	1080004c 	andi	r2,r2,1
    7678:	10008326 	beq	r2,zero,7888 <_realloc_r+0x2b8>
    767c:	900b883a 	mov	r5,r18
    7680:	a009883a 	mov	r4,r20
    7684:	00059180 	call	5918 <_malloc_r>
    7688:	1025883a 	mov	r18,r2
    768c:	10011e26 	beq	r2,zero,7b08 <_realloc_r+0x538>
    7690:	a93fff17 	ldw	r4,-4(r21)
    7694:	10fffe04 	addi	r3,r2,-8
    7698:	00bfff84 	movi	r2,-2
    769c:	2084703a 	and	r2,r4,r2
    76a0:	9885883a 	add	r2,r19,r2
    76a4:	1880ee26 	beq	r3,r2,7a60 <_realloc_r+0x490>
    76a8:	81bfff04 	addi	r6,r16,-4
    76ac:	00800904 	movi	r2,36
    76b0:	1180b836 	bltu	r2,r6,7994 <_realloc_r+0x3c4>
    76b4:	00c004c4 	movi	r3,19
    76b8:	19809636 	bltu	r3,r6,7914 <_realloc_r+0x344>
    76bc:	9005883a 	mov	r2,r18
    76c0:	a807883a 	mov	r3,r21
    76c4:	19000017 	ldw	r4,0(r3)
    76c8:	11000015 	stw	r4,0(r2)
    76cc:	19000117 	ldw	r4,4(r3)
    76d0:	11000115 	stw	r4,4(r2)
    76d4:	18c00217 	ldw	r3,8(r3)
    76d8:	10c00215 	stw	r3,8(r2)
    76dc:	a80b883a 	mov	r5,r21
    76e0:	a009883a 	mov	r4,r20
    76e4:	0004d2c0 	call	4d2c <_free_r>
    76e8:	a009883a 	mov	r4,r20
    76ec:	000d4480 	call	d448 <__malloc_unlock>
    76f0:	9005883a 	mov	r2,r18
    76f4:	00001206 	br	7740 <_realloc_r+0x170>
    76f8:	00c00404 	movi	r3,16
    76fc:	1823883a 	mov	r17,r3
    7700:	003fce06 	br	763c <__alt_data_end+0xfffe763c>
    7704:	a825883a 	mov	r18,r21
    7708:	8445c83a 	sub	r2,r16,r17
    770c:	00c003c4 	movi	r3,15
    7710:	18802636 	bltu	r3,r2,77ac <_realloc_r+0x1dc>
    7714:	99800117 	ldw	r6,4(r19)
    7718:	9c07883a 	add	r3,r19,r16
    771c:	3180004c 	andi	r6,r6,1
    7720:	3420b03a 	or	r16,r6,r16
    7724:	9c000115 	stw	r16,4(r19)
    7728:	18800117 	ldw	r2,4(r3)
    772c:	10800054 	ori	r2,r2,1
    7730:	18800115 	stw	r2,4(r3)
    7734:	a009883a 	mov	r4,r20
    7738:	000d4480 	call	d448 <__malloc_unlock>
    773c:	9005883a 	mov	r2,r18
    7740:	dfc00917 	ldw	ra,36(sp)
    7744:	df000817 	ldw	fp,32(sp)
    7748:	ddc00717 	ldw	r23,28(sp)
    774c:	dd800617 	ldw	r22,24(sp)
    7750:	dd400517 	ldw	r21,20(sp)
    7754:	dd000417 	ldw	r20,16(sp)
    7758:	dcc00317 	ldw	r19,12(sp)
    775c:	dc800217 	ldw	r18,8(sp)
    7760:	dc400117 	ldw	r17,4(sp)
    7764:	dc000017 	ldw	r16,0(sp)
    7768:	dec00a04 	addi	sp,sp,40
    776c:	f800283a 	ret
    7770:	017fff04 	movi	r5,-4
    7774:	414a703a 	and	r5,r8,r5
    7778:	814d883a 	add	r6,r16,r5
    777c:	30c01f16 	blt	r6,r3,77fc <_realloc_r+0x22c>
    7780:	20800317 	ldw	r2,12(r4)
    7784:	20c00217 	ldw	r3,8(r4)
    7788:	a825883a 	mov	r18,r21
    778c:	3021883a 	mov	r16,r6
    7790:	18800315 	stw	r2,12(r3)
    7794:	10c00215 	stw	r3,8(r2)
    7798:	003fdb06 	br	7708 <__alt_data_end+0xfffe7708>
    779c:	00800304 	movi	r2,12
    77a0:	a0800015 	stw	r2,0(r20)
    77a4:	0005883a 	mov	r2,zero
    77a8:	003fe506 	br	7740 <__alt_data_end+0xfffe7740>
    77ac:	98c00117 	ldw	r3,4(r19)
    77b0:	9c4b883a 	add	r5,r19,r17
    77b4:	11000054 	ori	r4,r2,1
    77b8:	18c0004c 	andi	r3,r3,1
    77bc:	1c62b03a 	or	r17,r3,r17
    77c0:	9c400115 	stw	r17,4(r19)
    77c4:	29000115 	stw	r4,4(r5)
    77c8:	2885883a 	add	r2,r5,r2
    77cc:	10c00117 	ldw	r3,4(r2)
    77d0:	29400204 	addi	r5,r5,8
    77d4:	a009883a 	mov	r4,r20
    77d8:	18c00054 	ori	r3,r3,1
    77dc:	10c00115 	stw	r3,4(r2)
    77e0:	0004d2c0 	call	4d2c <_free_r>
    77e4:	003fd306 	br	7734 <__alt_data_end+0xfffe7734>
    77e8:	017fff04 	movi	r5,-4
    77ec:	414a703a 	and	r5,r8,r5
    77f0:	89800404 	addi	r6,r17,16
    77f4:	8151883a 	add	r8,r16,r5
    77f8:	4180590e 	bge	r8,r6,7960 <_realloc_r+0x390>
    77fc:	1080004c 	andi	r2,r2,1
    7800:	103f9e1e 	bne	r2,zero,767c <__alt_data_end+0xfffe767c>
    7804:	adbffe17 	ldw	r22,-8(r21)
    7808:	00bfff04 	movi	r2,-4
    780c:	9dadc83a 	sub	r22,r19,r22
    7810:	b1800117 	ldw	r6,4(r22)
    7814:	3084703a 	and	r2,r6,r2
    7818:	20002026 	beq	r4,zero,789c <_realloc_r+0x2cc>
    781c:	80af883a 	add	r23,r16,r2
    7820:	b96f883a 	add	r23,r23,r5
    7824:	21c05f26 	beq	r4,r7,79a4 <_realloc_r+0x3d4>
    7828:	b8c01c16 	blt	r23,r3,789c <_realloc_r+0x2cc>
    782c:	20800317 	ldw	r2,12(r4)
    7830:	20c00217 	ldw	r3,8(r4)
    7834:	81bfff04 	addi	r6,r16,-4
    7838:	01000904 	movi	r4,36
    783c:	18800315 	stw	r2,12(r3)
    7840:	10c00215 	stw	r3,8(r2)
    7844:	b0c00217 	ldw	r3,8(r22)
    7848:	b0800317 	ldw	r2,12(r22)
    784c:	b4800204 	addi	r18,r22,8
    7850:	18800315 	stw	r2,12(r3)
    7854:	10c00215 	stw	r3,8(r2)
    7858:	21801b36 	bltu	r4,r6,78c8 <_realloc_r+0x2f8>
    785c:	008004c4 	movi	r2,19
    7860:	1180352e 	bgeu	r2,r6,7938 <_realloc_r+0x368>
    7864:	a8800017 	ldw	r2,0(r21)
    7868:	b0800215 	stw	r2,8(r22)
    786c:	a8800117 	ldw	r2,4(r21)
    7870:	b0800315 	stw	r2,12(r22)
    7874:	008006c4 	movi	r2,27
    7878:	11807f36 	bltu	r2,r6,7a78 <_realloc_r+0x4a8>
    787c:	b0800404 	addi	r2,r22,16
    7880:	ad400204 	addi	r21,r21,8
    7884:	00002d06 	br	793c <_realloc_r+0x36c>
    7888:	adbffe17 	ldw	r22,-8(r21)
    788c:	00bfff04 	movi	r2,-4
    7890:	9dadc83a 	sub	r22,r19,r22
    7894:	b1000117 	ldw	r4,4(r22)
    7898:	2084703a 	and	r2,r4,r2
    789c:	b03f7726 	beq	r22,zero,767c <__alt_data_end+0xfffe767c>
    78a0:	80af883a 	add	r23,r16,r2
    78a4:	b8ff7516 	blt	r23,r3,767c <__alt_data_end+0xfffe767c>
    78a8:	b0800317 	ldw	r2,12(r22)
    78ac:	b0c00217 	ldw	r3,8(r22)
    78b0:	81bfff04 	addi	r6,r16,-4
    78b4:	01000904 	movi	r4,36
    78b8:	18800315 	stw	r2,12(r3)
    78bc:	10c00215 	stw	r3,8(r2)
    78c0:	b4800204 	addi	r18,r22,8
    78c4:	21bfe52e 	bgeu	r4,r6,785c <__alt_data_end+0xfffe785c>
    78c8:	a80b883a 	mov	r5,r21
    78cc:	9009883a 	mov	r4,r18
    78d0:	00063500 	call	6350 <memmove>
    78d4:	b821883a 	mov	r16,r23
    78d8:	b027883a 	mov	r19,r22
    78dc:	003f8a06 	br	7708 <__alt_data_end+0xfffe7708>
    78e0:	300b883a 	mov	r5,r6
    78e4:	dfc00917 	ldw	ra,36(sp)
    78e8:	df000817 	ldw	fp,32(sp)
    78ec:	ddc00717 	ldw	r23,28(sp)
    78f0:	dd800617 	ldw	r22,24(sp)
    78f4:	dd400517 	ldw	r21,20(sp)
    78f8:	dd000417 	ldw	r20,16(sp)
    78fc:	dcc00317 	ldw	r19,12(sp)
    7900:	dc800217 	ldw	r18,8(sp)
    7904:	dc400117 	ldw	r17,4(sp)
    7908:	dc000017 	ldw	r16,0(sp)
    790c:	dec00a04 	addi	sp,sp,40
    7910:	00059181 	jmpi	5918 <_malloc_r>
    7914:	a8c00017 	ldw	r3,0(r21)
    7918:	90c00015 	stw	r3,0(r18)
    791c:	a8c00117 	ldw	r3,4(r21)
    7920:	90c00115 	stw	r3,4(r18)
    7924:	00c006c4 	movi	r3,27
    7928:	19804536 	bltu	r3,r6,7a40 <_realloc_r+0x470>
    792c:	90800204 	addi	r2,r18,8
    7930:	a8c00204 	addi	r3,r21,8
    7934:	003f6306 	br	76c4 <__alt_data_end+0xfffe76c4>
    7938:	9005883a 	mov	r2,r18
    793c:	a8c00017 	ldw	r3,0(r21)
    7940:	b821883a 	mov	r16,r23
    7944:	b027883a 	mov	r19,r22
    7948:	10c00015 	stw	r3,0(r2)
    794c:	a8c00117 	ldw	r3,4(r21)
    7950:	10c00115 	stw	r3,4(r2)
    7954:	a8c00217 	ldw	r3,8(r21)
    7958:	10c00215 	stw	r3,8(r2)
    795c:	003f6a06 	br	7708 <__alt_data_end+0xfffe7708>
    7960:	9c67883a 	add	r19,r19,r17
    7964:	4445c83a 	sub	r2,r8,r17
    7968:	e4c00215 	stw	r19,8(fp)
    796c:	10800054 	ori	r2,r2,1
    7970:	98800115 	stw	r2,4(r19)
    7974:	a8bfff17 	ldw	r2,-4(r21)
    7978:	a009883a 	mov	r4,r20
    797c:	1080004c 	andi	r2,r2,1
    7980:	1462b03a 	or	r17,r2,r17
    7984:	ac7fff15 	stw	r17,-4(r21)
    7988:	000d4480 	call	d448 <__malloc_unlock>
    798c:	a805883a 	mov	r2,r21
    7990:	003f6b06 	br	7740 <__alt_data_end+0xfffe7740>
    7994:	a80b883a 	mov	r5,r21
    7998:	9009883a 	mov	r4,r18
    799c:	00063500 	call	6350 <memmove>
    79a0:	003f4e06 	br	76dc <__alt_data_end+0xfffe76dc>
    79a4:	89000404 	addi	r4,r17,16
    79a8:	b93fbc16 	blt	r23,r4,789c <__alt_data_end+0xfffe789c>
    79ac:	b0800317 	ldw	r2,12(r22)
    79b0:	b0c00217 	ldw	r3,8(r22)
    79b4:	81bfff04 	addi	r6,r16,-4
    79b8:	01000904 	movi	r4,36
    79bc:	18800315 	stw	r2,12(r3)
    79c0:	10c00215 	stw	r3,8(r2)
    79c4:	b4800204 	addi	r18,r22,8
    79c8:	21804336 	bltu	r4,r6,7ad8 <_realloc_r+0x508>
    79cc:	008004c4 	movi	r2,19
    79d0:	11803f2e 	bgeu	r2,r6,7ad0 <_realloc_r+0x500>
    79d4:	a8800017 	ldw	r2,0(r21)
    79d8:	b0800215 	stw	r2,8(r22)
    79dc:	a8800117 	ldw	r2,4(r21)
    79e0:	b0800315 	stw	r2,12(r22)
    79e4:	008006c4 	movi	r2,27
    79e8:	11803f36 	bltu	r2,r6,7ae8 <_realloc_r+0x518>
    79ec:	b0800404 	addi	r2,r22,16
    79f0:	ad400204 	addi	r21,r21,8
    79f4:	a8c00017 	ldw	r3,0(r21)
    79f8:	10c00015 	stw	r3,0(r2)
    79fc:	a8c00117 	ldw	r3,4(r21)
    7a00:	10c00115 	stw	r3,4(r2)
    7a04:	a8c00217 	ldw	r3,8(r21)
    7a08:	10c00215 	stw	r3,8(r2)
    7a0c:	b447883a 	add	r3,r22,r17
    7a10:	bc45c83a 	sub	r2,r23,r17
    7a14:	e0c00215 	stw	r3,8(fp)
    7a18:	10800054 	ori	r2,r2,1
    7a1c:	18800115 	stw	r2,4(r3)
    7a20:	b0800117 	ldw	r2,4(r22)
    7a24:	a009883a 	mov	r4,r20
    7a28:	1080004c 	andi	r2,r2,1
    7a2c:	1462b03a 	or	r17,r2,r17
    7a30:	b4400115 	stw	r17,4(r22)
    7a34:	000d4480 	call	d448 <__malloc_unlock>
    7a38:	9005883a 	mov	r2,r18
    7a3c:	003f4006 	br	7740 <__alt_data_end+0xfffe7740>
    7a40:	a8c00217 	ldw	r3,8(r21)
    7a44:	90c00215 	stw	r3,8(r18)
    7a48:	a8c00317 	ldw	r3,12(r21)
    7a4c:	90c00315 	stw	r3,12(r18)
    7a50:	30801126 	beq	r6,r2,7a98 <_realloc_r+0x4c8>
    7a54:	90800404 	addi	r2,r18,16
    7a58:	a8c00404 	addi	r3,r21,16
    7a5c:	003f1906 	br	76c4 <__alt_data_end+0xfffe76c4>
    7a60:	90ffff17 	ldw	r3,-4(r18)
    7a64:	00bfff04 	movi	r2,-4
    7a68:	a825883a 	mov	r18,r21
    7a6c:	1884703a 	and	r2,r3,r2
    7a70:	80a1883a 	add	r16,r16,r2
    7a74:	003f2406 	br	7708 <__alt_data_end+0xfffe7708>
    7a78:	a8800217 	ldw	r2,8(r21)
    7a7c:	b0800415 	stw	r2,16(r22)
    7a80:	a8800317 	ldw	r2,12(r21)
    7a84:	b0800515 	stw	r2,20(r22)
    7a88:	31000a26 	beq	r6,r4,7ab4 <_realloc_r+0x4e4>
    7a8c:	b0800604 	addi	r2,r22,24
    7a90:	ad400404 	addi	r21,r21,16
    7a94:	003fa906 	br	793c <__alt_data_end+0xfffe793c>
    7a98:	a9000417 	ldw	r4,16(r21)
    7a9c:	90800604 	addi	r2,r18,24
    7aa0:	a8c00604 	addi	r3,r21,24
    7aa4:	91000415 	stw	r4,16(r18)
    7aa8:	a9000517 	ldw	r4,20(r21)
    7aac:	91000515 	stw	r4,20(r18)
    7ab0:	003f0406 	br	76c4 <__alt_data_end+0xfffe76c4>
    7ab4:	a8c00417 	ldw	r3,16(r21)
    7ab8:	ad400604 	addi	r21,r21,24
    7abc:	b0800804 	addi	r2,r22,32
    7ac0:	b0c00615 	stw	r3,24(r22)
    7ac4:	a8ffff17 	ldw	r3,-4(r21)
    7ac8:	b0c00715 	stw	r3,28(r22)
    7acc:	003f9b06 	br	793c <__alt_data_end+0xfffe793c>
    7ad0:	9005883a 	mov	r2,r18
    7ad4:	003fc706 	br	79f4 <__alt_data_end+0xfffe79f4>
    7ad8:	a80b883a 	mov	r5,r21
    7adc:	9009883a 	mov	r4,r18
    7ae0:	00063500 	call	6350 <memmove>
    7ae4:	003fc906 	br	7a0c <__alt_data_end+0xfffe7a0c>
    7ae8:	a8800217 	ldw	r2,8(r21)
    7aec:	b0800415 	stw	r2,16(r22)
    7af0:	a8800317 	ldw	r2,12(r21)
    7af4:	b0800515 	stw	r2,20(r22)
    7af8:	31000726 	beq	r6,r4,7b18 <_realloc_r+0x548>
    7afc:	b0800604 	addi	r2,r22,24
    7b00:	ad400404 	addi	r21,r21,16
    7b04:	003fbb06 	br	79f4 <__alt_data_end+0xfffe79f4>
    7b08:	a009883a 	mov	r4,r20
    7b0c:	000d4480 	call	d448 <__malloc_unlock>
    7b10:	0005883a 	mov	r2,zero
    7b14:	003f0a06 	br	7740 <__alt_data_end+0xfffe7740>
    7b18:	a8c00417 	ldw	r3,16(r21)
    7b1c:	ad400604 	addi	r21,r21,24
    7b20:	b0800804 	addi	r2,r22,32
    7b24:	b0c00615 	stw	r3,24(r22)
    7b28:	a8ffff17 	ldw	r3,-4(r21)
    7b2c:	b0c00715 	stw	r3,28(r22)
    7b30:	003fb006 	br	79f4 <__alt_data_end+0xfffe79f4>

00007b34 <__fpclassifyd>:
    7b34:	00a00034 	movhi	r2,32768
    7b38:	10bfffc4 	addi	r2,r2,-1
    7b3c:	2884703a 	and	r2,r5,r2
    7b40:	10000726 	beq	r2,zero,7b60 <__fpclassifyd+0x2c>
    7b44:	00fffc34 	movhi	r3,65520
    7b48:	019ff834 	movhi	r6,32736
    7b4c:	28c7883a 	add	r3,r5,r3
    7b50:	31bfffc4 	addi	r6,r6,-1
    7b54:	30c00536 	bltu	r6,r3,7b6c <__fpclassifyd+0x38>
    7b58:	00800104 	movi	r2,4
    7b5c:	f800283a 	ret
    7b60:	2000021e 	bne	r4,zero,7b6c <__fpclassifyd+0x38>
    7b64:	00800084 	movi	r2,2
    7b68:	f800283a 	ret
    7b6c:	00dffc34 	movhi	r3,32752
    7b70:	019ff834 	movhi	r6,32736
    7b74:	28cb883a 	add	r5,r5,r3
    7b78:	31bfffc4 	addi	r6,r6,-1
    7b7c:	317ff62e 	bgeu	r6,r5,7b58 <__alt_data_end+0xfffe7b58>
    7b80:	01400434 	movhi	r5,16
    7b84:	297fffc4 	addi	r5,r5,-1
    7b88:	28800236 	bltu	r5,r2,7b94 <__fpclassifyd+0x60>
    7b8c:	008000c4 	movi	r2,3
    7b90:	f800283a 	ret
    7b94:	10c00226 	beq	r2,r3,7ba0 <__fpclassifyd+0x6c>
    7b98:	0005883a 	mov	r2,zero
    7b9c:	f800283a 	ret
    7ba0:	2005003a 	cmpeq	r2,r4,zero
    7ba4:	f800283a 	ret

00007ba8 <_sbrk_r>:
    7ba8:	defffd04 	addi	sp,sp,-12
    7bac:	dc000015 	stw	r16,0(sp)
    7bb0:	04000074 	movhi	r16,1
    7bb4:	dc400115 	stw	r17,4(sp)
    7bb8:	840bef04 	addi	r16,r16,12220
    7bbc:	2023883a 	mov	r17,r4
    7bc0:	2809883a 	mov	r4,r5
    7bc4:	dfc00215 	stw	ra,8(sp)
    7bc8:	80000015 	stw	zero,0(r16)
    7bcc:	000d6080 	call	d608 <sbrk>
    7bd0:	00ffffc4 	movi	r3,-1
    7bd4:	10c00526 	beq	r2,r3,7bec <_sbrk_r+0x44>
    7bd8:	dfc00217 	ldw	ra,8(sp)
    7bdc:	dc400117 	ldw	r17,4(sp)
    7be0:	dc000017 	ldw	r16,0(sp)
    7be4:	dec00304 	addi	sp,sp,12
    7be8:	f800283a 	ret
    7bec:	80c00017 	ldw	r3,0(r16)
    7bf0:	183ff926 	beq	r3,zero,7bd8 <__alt_data_end+0xfffe7bd8>
    7bf4:	88c00015 	stw	r3,0(r17)
    7bf8:	003ff706 	br	7bd8 <__alt_data_end+0xfffe7bd8>

00007bfc <__sread>:
    7bfc:	defffe04 	addi	sp,sp,-8
    7c00:	dc000015 	stw	r16,0(sp)
    7c04:	2821883a 	mov	r16,r5
    7c08:	2940038f 	ldh	r5,14(r5)
    7c0c:	dfc00115 	stw	ra,4(sp)
    7c10:	00099f00 	call	99f0 <_read_r>
    7c14:	10000716 	blt	r2,zero,7c34 <__sread+0x38>
    7c18:	80c01417 	ldw	r3,80(r16)
    7c1c:	1887883a 	add	r3,r3,r2
    7c20:	80c01415 	stw	r3,80(r16)
    7c24:	dfc00117 	ldw	ra,4(sp)
    7c28:	dc000017 	ldw	r16,0(sp)
    7c2c:	dec00204 	addi	sp,sp,8
    7c30:	f800283a 	ret
    7c34:	80c0030b 	ldhu	r3,12(r16)
    7c38:	18fbffcc 	andi	r3,r3,61439
    7c3c:	80c0030d 	sth	r3,12(r16)
    7c40:	dfc00117 	ldw	ra,4(sp)
    7c44:	dc000017 	ldw	r16,0(sp)
    7c48:	dec00204 	addi	sp,sp,8
    7c4c:	f800283a 	ret

00007c50 <__seofread>:
    7c50:	0005883a 	mov	r2,zero
    7c54:	f800283a 	ret

00007c58 <__swrite>:
    7c58:	2880030b 	ldhu	r2,12(r5)
    7c5c:	defffb04 	addi	sp,sp,-20
    7c60:	dcc00315 	stw	r19,12(sp)
    7c64:	dc800215 	stw	r18,8(sp)
    7c68:	dc400115 	stw	r17,4(sp)
    7c6c:	dc000015 	stw	r16,0(sp)
    7c70:	dfc00415 	stw	ra,16(sp)
    7c74:	10c0400c 	andi	r3,r2,256
    7c78:	2821883a 	mov	r16,r5
    7c7c:	2023883a 	mov	r17,r4
    7c80:	3025883a 	mov	r18,r6
    7c84:	3827883a 	mov	r19,r7
    7c88:	18000526 	beq	r3,zero,7ca0 <__swrite+0x48>
    7c8c:	2940038f 	ldh	r5,14(r5)
    7c90:	01c00084 	movi	r7,2
    7c94:	000d883a 	mov	r6,zero
    7c98:	00099900 	call	9990 <_lseek_r>
    7c9c:	8080030b 	ldhu	r2,12(r16)
    7ca0:	8140038f 	ldh	r5,14(r16)
    7ca4:	10bbffcc 	andi	r2,r2,61439
    7ca8:	980f883a 	mov	r7,r19
    7cac:	900d883a 	mov	r6,r18
    7cb0:	8809883a 	mov	r4,r17
    7cb4:	8080030d 	sth	r2,12(r16)
    7cb8:	dfc00417 	ldw	ra,16(sp)
    7cbc:	dcc00317 	ldw	r19,12(sp)
    7cc0:	dc800217 	ldw	r18,8(sp)
    7cc4:	dc400117 	ldw	r17,4(sp)
    7cc8:	dc000017 	ldw	r16,0(sp)
    7ccc:	dec00504 	addi	sp,sp,20
    7cd0:	000945c1 	jmpi	945c <_write_r>

00007cd4 <__sseek>:
    7cd4:	defffe04 	addi	sp,sp,-8
    7cd8:	dc000015 	stw	r16,0(sp)
    7cdc:	2821883a 	mov	r16,r5
    7ce0:	2940038f 	ldh	r5,14(r5)
    7ce4:	dfc00115 	stw	ra,4(sp)
    7ce8:	00099900 	call	9990 <_lseek_r>
    7cec:	00ffffc4 	movi	r3,-1
    7cf0:	10c00826 	beq	r2,r3,7d14 <__sseek+0x40>
    7cf4:	80c0030b 	ldhu	r3,12(r16)
    7cf8:	80801415 	stw	r2,80(r16)
    7cfc:	18c40014 	ori	r3,r3,4096
    7d00:	80c0030d 	sth	r3,12(r16)
    7d04:	dfc00117 	ldw	ra,4(sp)
    7d08:	dc000017 	ldw	r16,0(sp)
    7d0c:	dec00204 	addi	sp,sp,8
    7d10:	f800283a 	ret
    7d14:	80c0030b 	ldhu	r3,12(r16)
    7d18:	18fbffcc 	andi	r3,r3,61439
    7d1c:	80c0030d 	sth	r3,12(r16)
    7d20:	dfc00117 	ldw	ra,4(sp)
    7d24:	dc000017 	ldw	r16,0(sp)
    7d28:	dec00204 	addi	sp,sp,8
    7d2c:	f800283a 	ret

00007d30 <__sclose>:
    7d30:	2940038f 	ldh	r5,14(r5)
    7d34:	00094bc1 	jmpi	94bc <_close_r>

00007d38 <strcmp>:
    7d38:	2144b03a 	or	r2,r4,r5
    7d3c:	108000cc 	andi	r2,r2,3
    7d40:	1000171e 	bne	r2,zero,7da0 <strcmp+0x68>
    7d44:	20800017 	ldw	r2,0(r4)
    7d48:	28c00017 	ldw	r3,0(r5)
    7d4c:	10c0141e 	bne	r2,r3,7da0 <strcmp+0x68>
    7d50:	027fbff4 	movhi	r9,65279
    7d54:	4a7fbfc4 	addi	r9,r9,-257
    7d58:	0086303a 	nor	r3,zero,r2
    7d5c:	02202074 	movhi	r8,32897
    7d60:	1245883a 	add	r2,r2,r9
    7d64:	42202004 	addi	r8,r8,-32640
    7d68:	10c4703a 	and	r2,r2,r3
    7d6c:	1204703a 	and	r2,r2,r8
    7d70:	10000226 	beq	r2,zero,7d7c <strcmp+0x44>
    7d74:	00002306 	br	7e04 <strcmp+0xcc>
    7d78:	1000221e 	bne	r2,zero,7e04 <strcmp+0xcc>
    7d7c:	21000104 	addi	r4,r4,4
    7d80:	20c00017 	ldw	r3,0(r4)
    7d84:	29400104 	addi	r5,r5,4
    7d88:	29800017 	ldw	r6,0(r5)
    7d8c:	1a4f883a 	add	r7,r3,r9
    7d90:	00c4303a 	nor	r2,zero,r3
    7d94:	3884703a 	and	r2,r7,r2
    7d98:	1204703a 	and	r2,r2,r8
    7d9c:	19bff626 	beq	r3,r6,7d78 <__alt_data_end+0xfffe7d78>
    7da0:	20800003 	ldbu	r2,0(r4)
    7da4:	10c03fcc 	andi	r3,r2,255
    7da8:	18c0201c 	xori	r3,r3,128
    7dac:	18ffe004 	addi	r3,r3,-128
    7db0:	18000c26 	beq	r3,zero,7de4 <strcmp+0xac>
    7db4:	29800007 	ldb	r6,0(r5)
    7db8:	19800326 	beq	r3,r6,7dc8 <strcmp+0x90>
    7dbc:	00001306 	br	7e0c <strcmp+0xd4>
    7dc0:	29800007 	ldb	r6,0(r5)
    7dc4:	11800b1e 	bne	r2,r6,7df4 <strcmp+0xbc>
    7dc8:	21000044 	addi	r4,r4,1
    7dcc:	20c00003 	ldbu	r3,0(r4)
    7dd0:	29400044 	addi	r5,r5,1
    7dd4:	18803fcc 	andi	r2,r3,255
    7dd8:	1080201c 	xori	r2,r2,128
    7ddc:	10bfe004 	addi	r2,r2,-128
    7de0:	103ff71e 	bne	r2,zero,7dc0 <__alt_data_end+0xfffe7dc0>
    7de4:	0007883a 	mov	r3,zero
    7de8:	28800003 	ldbu	r2,0(r5)
    7dec:	1885c83a 	sub	r2,r3,r2
    7df0:	f800283a 	ret
    7df4:	28800003 	ldbu	r2,0(r5)
    7df8:	18c03fcc 	andi	r3,r3,255
    7dfc:	1885c83a 	sub	r2,r3,r2
    7e00:	f800283a 	ret
    7e04:	0005883a 	mov	r2,zero
    7e08:	f800283a 	ret
    7e0c:	10c03fcc 	andi	r3,r2,255
    7e10:	003ff506 	br	7de8 <__alt_data_end+0xfffe7de8>

00007e14 <__sprint_r.part.0>:
    7e14:	28801917 	ldw	r2,100(r5)
    7e18:	defff604 	addi	sp,sp,-40
    7e1c:	dd400515 	stw	r21,20(sp)
    7e20:	dfc00915 	stw	ra,36(sp)
    7e24:	df000815 	stw	fp,32(sp)
    7e28:	ddc00715 	stw	r23,28(sp)
    7e2c:	dd800615 	stw	r22,24(sp)
    7e30:	dd000415 	stw	r20,16(sp)
    7e34:	dcc00315 	stw	r19,12(sp)
    7e38:	dc800215 	stw	r18,8(sp)
    7e3c:	dc400115 	stw	r17,4(sp)
    7e40:	dc000015 	stw	r16,0(sp)
    7e44:	1088000c 	andi	r2,r2,8192
    7e48:	302b883a 	mov	r21,r6
    7e4c:	10002e26 	beq	r2,zero,7f08 <__sprint_r.part.0+0xf4>
    7e50:	30800217 	ldw	r2,8(r6)
    7e54:	35800017 	ldw	r22,0(r6)
    7e58:	10002926 	beq	r2,zero,7f00 <__sprint_r.part.0+0xec>
    7e5c:	2827883a 	mov	r19,r5
    7e60:	2029883a 	mov	r20,r4
    7e64:	b5c00104 	addi	r23,r22,4
    7e68:	04bfffc4 	movi	r18,-1
    7e6c:	bc400017 	ldw	r17,0(r23)
    7e70:	b4000017 	ldw	r16,0(r22)
    7e74:	0039883a 	mov	fp,zero
    7e78:	8822d0ba 	srli	r17,r17,2
    7e7c:	8800031e 	bne	r17,zero,7e8c <__sprint_r.part.0+0x78>
    7e80:	00001806 	br	7ee4 <__sprint_r.part.0+0xd0>
    7e84:	84000104 	addi	r16,r16,4
    7e88:	8f001526 	beq	r17,fp,7ee0 <__sprint_r.part.0+0xcc>
    7e8c:	81400017 	ldw	r5,0(r16)
    7e90:	980d883a 	mov	r6,r19
    7e94:	a009883a 	mov	r4,r20
    7e98:	000983c0 	call	983c <_fputwc_r>
    7e9c:	e7000044 	addi	fp,fp,1
    7ea0:	14bff81e 	bne	r2,r18,7e84 <__alt_data_end+0xfffe7e84>
    7ea4:	9005883a 	mov	r2,r18
    7ea8:	a8000215 	stw	zero,8(r21)
    7eac:	a8000115 	stw	zero,4(r21)
    7eb0:	dfc00917 	ldw	ra,36(sp)
    7eb4:	df000817 	ldw	fp,32(sp)
    7eb8:	ddc00717 	ldw	r23,28(sp)
    7ebc:	dd800617 	ldw	r22,24(sp)
    7ec0:	dd400517 	ldw	r21,20(sp)
    7ec4:	dd000417 	ldw	r20,16(sp)
    7ec8:	dcc00317 	ldw	r19,12(sp)
    7ecc:	dc800217 	ldw	r18,8(sp)
    7ed0:	dc400117 	ldw	r17,4(sp)
    7ed4:	dc000017 	ldw	r16,0(sp)
    7ed8:	dec00a04 	addi	sp,sp,40
    7edc:	f800283a 	ret
    7ee0:	a8800217 	ldw	r2,8(r21)
    7ee4:	8c63883a 	add	r17,r17,r17
    7ee8:	8c63883a 	add	r17,r17,r17
    7eec:	1445c83a 	sub	r2,r2,r17
    7ef0:	a8800215 	stw	r2,8(r21)
    7ef4:	b5800204 	addi	r22,r22,8
    7ef8:	bdc00204 	addi	r23,r23,8
    7efc:	103fdb1e 	bne	r2,zero,7e6c <__alt_data_end+0xfffe7e6c>
    7f00:	0005883a 	mov	r2,zero
    7f04:	003fe806 	br	7ea8 <__alt_data_end+0xfffe7ea8>
    7f08:	000503c0 	call	503c <__sfvwrite_r>
    7f0c:	003fe606 	br	7ea8 <__alt_data_end+0xfffe7ea8>

00007f10 <__sprint_r>:
    7f10:	30c00217 	ldw	r3,8(r6)
    7f14:	18000126 	beq	r3,zero,7f1c <__sprint_r+0xc>
    7f18:	0007e141 	jmpi	7e14 <__sprint_r.part.0>
    7f1c:	30000115 	stw	zero,4(r6)
    7f20:	0005883a 	mov	r2,zero
    7f24:	f800283a 	ret

00007f28 <___vfiprintf_internal_r>:
    7f28:	deffc904 	addi	sp,sp,-220
    7f2c:	df003515 	stw	fp,212(sp)
    7f30:	dd003115 	stw	r20,196(sp)
    7f34:	dfc03615 	stw	ra,216(sp)
    7f38:	ddc03415 	stw	r23,208(sp)
    7f3c:	dd803315 	stw	r22,204(sp)
    7f40:	dd403215 	stw	r21,200(sp)
    7f44:	dcc03015 	stw	r19,192(sp)
    7f48:	dc802f15 	stw	r18,188(sp)
    7f4c:	dc402e15 	stw	r17,184(sp)
    7f50:	dc002d15 	stw	r16,180(sp)
    7f54:	d9002015 	stw	r4,128(sp)
    7f58:	d9c02215 	stw	r7,136(sp)
    7f5c:	2829883a 	mov	r20,r5
    7f60:	3039883a 	mov	fp,r6
    7f64:	20000226 	beq	r4,zero,7f70 <___vfiprintf_internal_r+0x48>
    7f68:	20800e17 	ldw	r2,56(r4)
    7f6c:	1000cf26 	beq	r2,zero,82ac <___vfiprintf_internal_r+0x384>
    7f70:	a080030b 	ldhu	r2,12(r20)
    7f74:	10c8000c 	andi	r3,r2,8192
    7f78:	1800061e 	bne	r3,zero,7f94 <___vfiprintf_internal_r+0x6c>
    7f7c:	a1001917 	ldw	r4,100(r20)
    7f80:	00f7ffc4 	movi	r3,-8193
    7f84:	10880014 	ori	r2,r2,8192
    7f88:	20c6703a 	and	r3,r4,r3
    7f8c:	a080030d 	sth	r2,12(r20)
    7f90:	a0c01915 	stw	r3,100(r20)
    7f94:	10c0020c 	andi	r3,r2,8
    7f98:	1800a926 	beq	r3,zero,8240 <___vfiprintf_internal_r+0x318>
    7f9c:	a0c00417 	ldw	r3,16(r20)
    7fa0:	1800a726 	beq	r3,zero,8240 <___vfiprintf_internal_r+0x318>
    7fa4:	1080068c 	andi	r2,r2,26
    7fa8:	00c00284 	movi	r3,10
    7fac:	10c0ac26 	beq	r2,r3,8260 <___vfiprintf_internal_r+0x338>
    7fb0:	da801a04 	addi	r10,sp,104
    7fb4:	da801e15 	stw	r10,120(sp)
    7fb8:	d8801e17 	ldw	r2,120(sp)
    7fbc:	da8019c4 	addi	r10,sp,103
    7fc0:	05800074 	movhi	r22,1
    7fc4:	05c00074 	movhi	r23,1
    7fc8:	da801f15 	stw	r10,124(sp)
    7fcc:	1295c83a 	sub	r10,r2,r10
    7fd0:	b5be2204 	addi	r22,r22,-1912
    7fd4:	bdfe1e04 	addi	r23,r23,-1928
    7fd8:	dec01a15 	stw	sp,104(sp)
    7fdc:	d8001c15 	stw	zero,112(sp)
    7fe0:	d8001b15 	stw	zero,108(sp)
    7fe4:	d8002615 	stw	zero,152(sp)
    7fe8:	d8002315 	stw	zero,140(sp)
    7fec:	da802715 	stw	r10,156(sp)
    7ff0:	d811883a 	mov	r8,sp
    7ff4:	dd002115 	stw	r20,132(sp)
    7ff8:	e021883a 	mov	r16,fp
    7ffc:	80800007 	ldb	r2,0(r16)
    8000:	1003ea26 	beq	r2,zero,8fac <___vfiprintf_internal_r+0x1084>
    8004:	00c00944 	movi	r3,37
    8008:	8025883a 	mov	r18,r16
    800c:	10c0021e 	bne	r2,r3,8018 <___vfiprintf_internal_r+0xf0>
    8010:	00001606 	br	806c <___vfiprintf_internal_r+0x144>
    8014:	10c00326 	beq	r2,r3,8024 <___vfiprintf_internal_r+0xfc>
    8018:	94800044 	addi	r18,r18,1
    801c:	90800007 	ldb	r2,0(r18)
    8020:	103ffc1e 	bne	r2,zero,8014 <__alt_data_end+0xfffe8014>
    8024:	9423c83a 	sub	r17,r18,r16
    8028:	88001026 	beq	r17,zero,806c <___vfiprintf_internal_r+0x144>
    802c:	d8c01c17 	ldw	r3,112(sp)
    8030:	d8801b17 	ldw	r2,108(sp)
    8034:	44000015 	stw	r16,0(r8)
    8038:	88c7883a 	add	r3,r17,r3
    803c:	10800044 	addi	r2,r2,1
    8040:	44400115 	stw	r17,4(r8)
    8044:	d8c01c15 	stw	r3,112(sp)
    8048:	d8801b15 	stw	r2,108(sp)
    804c:	010001c4 	movi	r4,7
    8050:	2080760e 	bge	r4,r2,822c <___vfiprintf_internal_r+0x304>
    8054:	1803821e 	bne	r3,zero,8e60 <___vfiprintf_internal_r+0xf38>
    8058:	da802317 	ldw	r10,140(sp)
    805c:	d8001b15 	stw	zero,108(sp)
    8060:	d811883a 	mov	r8,sp
    8064:	5455883a 	add	r10,r10,r17
    8068:	da802315 	stw	r10,140(sp)
    806c:	90800007 	ldb	r2,0(r18)
    8070:	10044626 	beq	r2,zero,918c <___vfiprintf_internal_r+0x1264>
    8074:	90c00047 	ldb	r3,1(r18)
    8078:	94000044 	addi	r16,r18,1
    807c:	d8001d85 	stb	zero,118(sp)
    8080:	0009883a 	mov	r4,zero
    8084:	000f883a 	mov	r7,zero
    8088:	027fffc4 	movi	r9,-1
    808c:	0023883a 	mov	r17,zero
    8090:	0029883a 	mov	r20,zero
    8094:	01401604 	movi	r5,88
    8098:	01800244 	movi	r6,9
    809c:	03400a84 	movi	r13,42
    80a0:	03001b04 	movi	r12,108
    80a4:	84000044 	addi	r16,r16,1
    80a8:	18bff804 	addi	r2,r3,-32
    80ac:	28827336 	bltu	r5,r2,8a7c <___vfiprintf_internal_r+0xb54>
    80b0:	100490ba 	slli	r2,r2,2
    80b4:	02800074 	movhi	r10,1
    80b8:	52a03204 	addi	r10,r10,-32568
    80bc:	1285883a 	add	r2,r2,r10
    80c0:	10800017 	ldw	r2,0(r2)
    80c4:	1000683a 	jmp	r2
    80c8:	000087b0 	cmpltui	zero,zero,542
    80cc:	00008a7c 	xorhi	zero,zero,553
    80d0:	00008a7c 	xorhi	zero,zero,553
    80d4:	000087d0 	cmplti	zero,zero,543
    80d8:	00008a7c 	xorhi	zero,zero,553
    80dc:	00008a7c 	xorhi	zero,zero,553
    80e0:	00008a7c 	xorhi	zero,zero,553
    80e4:	00008a7c 	xorhi	zero,zero,553
    80e8:	00008a7c 	xorhi	zero,zero,553
    80ec:	00008a7c 	xorhi	zero,zero,553
    80f0:	000089b8 	rdprs	zero,zero,550
    80f4:	000089d4 	movui	zero,551
    80f8:	00008a7c 	xorhi	zero,zero,553
    80fc:	000082bc 	xorhi	zero,zero,522
    8100:	000089e4 	muli	zero,zero,551
    8104:	00008a7c 	xorhi	zero,zero,553
    8108:	000087dc 	xori	zero,zero,543
    810c:	000087e8 	cmpgeui	zero,zero,543
    8110:	000087e8 	cmpgeui	zero,zero,543
    8114:	000087e8 	cmpgeui	zero,zero,543
    8118:	000087e8 	cmpgeui	zero,zero,543
    811c:	000087e8 	cmpgeui	zero,zero,543
    8120:	000087e8 	cmpgeui	zero,zero,543
    8124:	000087e8 	cmpgeui	zero,zero,543
    8128:	000087e8 	cmpgeui	zero,zero,543
    812c:	000087e8 	cmpgeui	zero,zero,543
    8130:	00008a7c 	xorhi	zero,zero,553
    8134:	00008a7c 	xorhi	zero,zero,553
    8138:	00008a7c 	xorhi	zero,zero,553
    813c:	00008a7c 	xorhi	zero,zero,553
    8140:	00008a7c 	xorhi	zero,zero,553
    8144:	00008a7c 	xorhi	zero,zero,553
    8148:	00008a7c 	xorhi	zero,zero,553
    814c:	00008a7c 	xorhi	zero,zero,553
    8150:	00008a7c 	xorhi	zero,zero,553
    8154:	00008a7c 	xorhi	zero,zero,553
    8158:	00008814 	movui	zero,544
    815c:	00008a7c 	xorhi	zero,zero,553
    8160:	00008a7c 	xorhi	zero,zero,553
    8164:	00008a7c 	xorhi	zero,zero,553
    8168:	00008a7c 	xorhi	zero,zero,553
    816c:	00008a7c 	xorhi	zero,zero,553
    8170:	00008a7c 	xorhi	zero,zero,553
    8174:	00008a7c 	xorhi	zero,zero,553
    8178:	00008a7c 	xorhi	zero,zero,553
    817c:	00008a7c 	xorhi	zero,zero,553
    8180:	00008a7c 	xorhi	zero,zero,553
    8184:	0000884c 	andi	zero,zero,545
    8188:	00008a7c 	xorhi	zero,zero,553
    818c:	00008a7c 	xorhi	zero,zero,553
    8190:	00008a7c 	xorhi	zero,zero,553
    8194:	00008a7c 	xorhi	zero,zero,553
    8198:	00008a7c 	xorhi	zero,zero,553
    819c:	000088a4 	muli	zero,zero,546
    81a0:	00008a7c 	xorhi	zero,zero,553
    81a4:	00008a7c 	xorhi	zero,zero,553
    81a8:	00008914 	movui	zero,548
    81ac:	00008a7c 	xorhi	zero,zero,553
    81b0:	00008a7c 	xorhi	zero,zero,553
    81b4:	00008a7c 	xorhi	zero,zero,553
    81b8:	00008a7c 	xorhi	zero,zero,553
    81bc:	00008a7c 	xorhi	zero,zero,553
    81c0:	00008a7c 	xorhi	zero,zero,553
    81c4:	00008a7c 	xorhi	zero,zero,553
    81c8:	00008a7c 	xorhi	zero,zero,553
    81cc:	00008a7c 	xorhi	zero,zero,553
    81d0:	00008a7c 	xorhi	zero,zero,553
    81d4:	000086c0 	call	86c <puts+0x4>
    81d8:	000086ec 	andhi	zero,zero,539
    81dc:	00008a7c 	xorhi	zero,zero,553
    81e0:	00008a7c 	xorhi	zero,zero,553
    81e4:	00008a7c 	xorhi	zero,zero,553
    81e8:	00008a24 	muli	zero,zero,552
    81ec:	000086ec 	andhi	zero,zero,539
    81f0:	00008a7c 	xorhi	zero,zero,553
    81f4:	00008a7c 	xorhi	zero,zero,553
    81f8:	00008580 	call	858 <_puts_r+0xb0>
    81fc:	00008a7c 	xorhi	zero,zero,553
    8200:	00008590 	cmplti	zero,zero,534
    8204:	000085cc 	andi	zero,zero,535
    8208:	000082c8 	cmpgei	zero,zero,523
    820c:	00008574 	movhi	zero,533
    8210:	00008a7c 	xorhi	zero,zero,553
    8214:	00008950 	cmplti	zero,zero,549
    8218:	00008a7c 	xorhi	zero,zero,553
    821c:	000089a8 	cmpgeui	zero,zero,550
    8220:	00008a7c 	xorhi	zero,zero,553
    8224:	00008a7c 	xorhi	zero,zero,553
    8228:	0000866c 	andhi	zero,zero,537
    822c:	42000204 	addi	r8,r8,8
    8230:	da802317 	ldw	r10,140(sp)
    8234:	5455883a 	add	r10,r10,r17
    8238:	da802315 	stw	r10,140(sp)
    823c:	003f8b06 	br	806c <__alt_data_end+0xfffe806c>
    8240:	d9002017 	ldw	r4,128(sp)
    8244:	a00b883a 	mov	r5,r20
    8248:	0002be40 	call	2be4 <__swsetup_r>
    824c:	1003b11e 	bne	r2,zero,9114 <___vfiprintf_internal_r+0x11ec>
    8250:	a080030b 	ldhu	r2,12(r20)
    8254:	00c00284 	movi	r3,10
    8258:	1080068c 	andi	r2,r2,26
    825c:	10ff541e 	bne	r2,r3,7fb0 <__alt_data_end+0xfffe7fb0>
    8260:	a080038f 	ldh	r2,14(r20)
    8264:	103f5216 	blt	r2,zero,7fb0 <__alt_data_end+0xfffe7fb0>
    8268:	d9c02217 	ldw	r7,136(sp)
    826c:	d9002017 	ldw	r4,128(sp)
    8270:	e00d883a 	mov	r6,fp
    8274:	a00b883a 	mov	r5,r20
    8278:	00093a00 	call	93a0 <__sbprintf>
    827c:	dfc03617 	ldw	ra,216(sp)
    8280:	df003517 	ldw	fp,212(sp)
    8284:	ddc03417 	ldw	r23,208(sp)
    8288:	dd803317 	ldw	r22,204(sp)
    828c:	dd403217 	ldw	r21,200(sp)
    8290:	dd003117 	ldw	r20,196(sp)
    8294:	dcc03017 	ldw	r19,192(sp)
    8298:	dc802f17 	ldw	r18,188(sp)
    829c:	dc402e17 	ldw	r17,184(sp)
    82a0:	dc002d17 	ldw	r16,180(sp)
    82a4:	dec03704 	addi	sp,sp,220
    82a8:	f800283a 	ret
    82ac:	0004bb80 	call	4bb8 <__sinit>
    82b0:	003f2f06 	br	7f70 <__alt_data_end+0xfffe7f70>
    82b4:	0463c83a 	sub	r17,zero,r17
    82b8:	d8802215 	stw	r2,136(sp)
    82bc:	a5000114 	ori	r20,r20,4
    82c0:	80c00007 	ldb	r3,0(r16)
    82c4:	003f7706 	br	80a4 <__alt_data_end+0xfffe80a4>
    82c8:	00800c04 	movi	r2,48
    82cc:	da802217 	ldw	r10,136(sp)
    82d0:	d8801d05 	stb	r2,116(sp)
    82d4:	00801e04 	movi	r2,120
    82d8:	d8801d45 	stb	r2,117(sp)
    82dc:	d8001d85 	stb	zero,118(sp)
    82e0:	50c00104 	addi	r3,r10,4
    82e4:	54800017 	ldw	r18,0(r10)
    82e8:	0027883a 	mov	r19,zero
    82ec:	a0800094 	ori	r2,r20,2
    82f0:	48030b16 	blt	r9,zero,8f20 <___vfiprintf_internal_r+0xff8>
    82f4:	00bfdfc4 	movi	r2,-129
    82f8:	a096703a 	and	r11,r20,r2
    82fc:	d8c02215 	stw	r3,136(sp)
    8300:	5d000094 	ori	r20,r11,2
    8304:	90032b1e 	bne	r18,zero,8fb4 <___vfiprintf_internal_r+0x108c>
    8308:	00800074 	movhi	r2,1
    830c:	10bdbd04 	addi	r2,r2,-2316
    8310:	d8802615 	stw	r2,152(sp)
    8314:	0039883a 	mov	fp,zero
    8318:	48017b1e 	bne	r9,zero,8908 <___vfiprintf_internal_r+0x9e0>
    831c:	0013883a 	mov	r9,zero
    8320:	0027883a 	mov	r19,zero
    8324:	dd401a04 	addi	r21,sp,104
    8328:	4825883a 	mov	r18,r9
    832c:	4cc0010e 	bge	r9,r19,8334 <___vfiprintf_internal_r+0x40c>
    8330:	9825883a 	mov	r18,r19
    8334:	e7003fcc 	andi	fp,fp,255
    8338:	e700201c 	xori	fp,fp,128
    833c:	e73fe004 	addi	fp,fp,-128
    8340:	e0000126 	beq	fp,zero,8348 <___vfiprintf_internal_r+0x420>
    8344:	94800044 	addi	r18,r18,1
    8348:	a380008c 	andi	r14,r20,2
    834c:	70000126 	beq	r14,zero,8354 <___vfiprintf_internal_r+0x42c>
    8350:	94800084 	addi	r18,r18,2
    8354:	a700210c 	andi	fp,r20,132
    8358:	e001df1e 	bne	fp,zero,8ad8 <___vfiprintf_internal_r+0xbb0>
    835c:	8c87c83a 	sub	r3,r17,r18
    8360:	00c1dd0e 	bge	zero,r3,8ad8 <___vfiprintf_internal_r+0xbb0>
    8364:	01c00404 	movi	r7,16
    8368:	d8801c17 	ldw	r2,112(sp)
    836c:	38c3ad0e 	bge	r7,r3,9224 <___vfiprintf_internal_r+0x12fc>
    8370:	02800074 	movhi	r10,1
    8374:	52be2204 	addi	r10,r10,-1912
    8378:	dc002915 	stw	r16,164(sp)
    837c:	d9801b17 	ldw	r6,108(sp)
    8380:	da802415 	stw	r10,144(sp)
    8384:	03c001c4 	movi	r15,7
    8388:	da402515 	stw	r9,148(sp)
    838c:	db802815 	stw	r14,160(sp)
    8390:	1821883a 	mov	r16,r3
    8394:	00000506 	br	83ac <___vfiprintf_internal_r+0x484>
    8398:	31400084 	addi	r5,r6,2
    839c:	42000204 	addi	r8,r8,8
    83a0:	200d883a 	mov	r6,r4
    83a4:	843ffc04 	addi	r16,r16,-16
    83a8:	3c000d0e 	bge	r7,r16,83e0 <___vfiprintf_internal_r+0x4b8>
    83ac:	10800404 	addi	r2,r2,16
    83b0:	31000044 	addi	r4,r6,1
    83b4:	45800015 	stw	r22,0(r8)
    83b8:	41c00115 	stw	r7,4(r8)
    83bc:	d8801c15 	stw	r2,112(sp)
    83c0:	d9001b15 	stw	r4,108(sp)
    83c4:	793ff40e 	bge	r15,r4,8398 <__alt_data_end+0xfffe8398>
    83c8:	1001b51e 	bne	r2,zero,8aa0 <___vfiprintf_internal_r+0xb78>
    83cc:	843ffc04 	addi	r16,r16,-16
    83d0:	000d883a 	mov	r6,zero
    83d4:	01400044 	movi	r5,1
    83d8:	d811883a 	mov	r8,sp
    83dc:	3c3ff316 	blt	r7,r16,83ac <__alt_data_end+0xfffe83ac>
    83e0:	8007883a 	mov	r3,r16
    83e4:	da402517 	ldw	r9,148(sp)
    83e8:	db802817 	ldw	r14,160(sp)
    83ec:	dc002917 	ldw	r16,164(sp)
    83f0:	da802417 	ldw	r10,144(sp)
    83f4:	1885883a 	add	r2,r3,r2
    83f8:	40c00115 	stw	r3,4(r8)
    83fc:	42800015 	stw	r10,0(r8)
    8400:	d8801c15 	stw	r2,112(sp)
    8404:	d9401b15 	stw	r5,108(sp)
    8408:	00c001c4 	movi	r3,7
    840c:	19426016 	blt	r3,r5,8d90 <___vfiprintf_internal_r+0xe68>
    8410:	d8c01d87 	ldb	r3,118(sp)
    8414:	42000204 	addi	r8,r8,8
    8418:	29000044 	addi	r4,r5,1
    841c:	1801b31e 	bne	r3,zero,8aec <___vfiprintf_internal_r+0xbc4>
    8420:	7001c026 	beq	r14,zero,8b24 <___vfiprintf_internal_r+0xbfc>
    8424:	d8c01d04 	addi	r3,sp,116
    8428:	10800084 	addi	r2,r2,2
    842c:	40c00015 	stw	r3,0(r8)
    8430:	00c00084 	movi	r3,2
    8434:	40c00115 	stw	r3,4(r8)
    8438:	d8801c15 	stw	r2,112(sp)
    843c:	d9001b15 	stw	r4,108(sp)
    8440:	00c001c4 	movi	r3,7
    8444:	1902650e 	bge	r3,r4,8ddc <___vfiprintf_internal_r+0xeb4>
    8448:	10029a1e 	bne	r2,zero,8eb4 <___vfiprintf_internal_r+0xf8c>
    844c:	00c02004 	movi	r3,128
    8450:	01000044 	movi	r4,1
    8454:	000b883a 	mov	r5,zero
    8458:	d811883a 	mov	r8,sp
    845c:	e0c1b31e 	bne	fp,r3,8b2c <___vfiprintf_internal_r+0xc04>
    8460:	8cb9c83a 	sub	fp,r17,r18
    8464:	0701b10e 	bge	zero,fp,8b2c <___vfiprintf_internal_r+0xc04>
    8468:	01c00404 	movi	r7,16
    846c:	3f03890e 	bge	r7,fp,9294 <___vfiprintf_internal_r+0x136c>
    8470:	00c00074 	movhi	r3,1
    8474:	18fe1e04 	addi	r3,r3,-1928
    8478:	d8c02415 	stw	r3,144(sp)
    847c:	8007883a 	mov	r3,r16
    8480:	034001c4 	movi	r13,7
    8484:	e021883a 	mov	r16,fp
    8488:	da402515 	stw	r9,148(sp)
    848c:	1839883a 	mov	fp,r3
    8490:	00000506 	br	84a8 <___vfiprintf_internal_r+0x580>
    8494:	29800084 	addi	r6,r5,2
    8498:	42000204 	addi	r8,r8,8
    849c:	180b883a 	mov	r5,r3
    84a0:	843ffc04 	addi	r16,r16,-16
    84a4:	3c000d0e 	bge	r7,r16,84dc <___vfiprintf_internal_r+0x5b4>
    84a8:	10800404 	addi	r2,r2,16
    84ac:	28c00044 	addi	r3,r5,1
    84b0:	45c00015 	stw	r23,0(r8)
    84b4:	41c00115 	stw	r7,4(r8)
    84b8:	d8801c15 	stw	r2,112(sp)
    84bc:	d8c01b15 	stw	r3,108(sp)
    84c0:	68fff40e 	bge	r13,r3,8494 <__alt_data_end+0xfffe8494>
    84c4:	1002241e 	bne	r2,zero,8d58 <___vfiprintf_internal_r+0xe30>
    84c8:	843ffc04 	addi	r16,r16,-16
    84cc:	01800044 	movi	r6,1
    84d0:	000b883a 	mov	r5,zero
    84d4:	d811883a 	mov	r8,sp
    84d8:	3c3ff316 	blt	r7,r16,84a8 <__alt_data_end+0xfffe84a8>
    84dc:	da402517 	ldw	r9,148(sp)
    84e0:	e007883a 	mov	r3,fp
    84e4:	8039883a 	mov	fp,r16
    84e8:	1821883a 	mov	r16,r3
    84ec:	d8c02417 	ldw	r3,144(sp)
    84f0:	1705883a 	add	r2,r2,fp
    84f4:	47000115 	stw	fp,4(r8)
    84f8:	40c00015 	stw	r3,0(r8)
    84fc:	d8801c15 	stw	r2,112(sp)
    8500:	d9801b15 	stw	r6,108(sp)
    8504:	00c001c4 	movi	r3,7
    8508:	19827616 	blt	r3,r6,8ee4 <___vfiprintf_internal_r+0xfbc>
    850c:	4cf9c83a 	sub	fp,r9,r19
    8510:	42000204 	addi	r8,r8,8
    8514:	31000044 	addi	r4,r6,1
    8518:	300b883a 	mov	r5,r6
    851c:	07018516 	blt	zero,fp,8b34 <___vfiprintf_internal_r+0xc0c>
    8520:	9885883a 	add	r2,r19,r2
    8524:	45400015 	stw	r21,0(r8)
    8528:	44c00115 	stw	r19,4(r8)
    852c:	d8801c15 	stw	r2,112(sp)
    8530:	d9001b15 	stw	r4,108(sp)
    8534:	00c001c4 	movi	r3,7
    8538:	1901dd0e 	bge	r3,r4,8cb0 <___vfiprintf_internal_r+0xd88>
    853c:	1002401e 	bne	r2,zero,8e40 <___vfiprintf_internal_r+0xf18>
    8540:	d8001b15 	stw	zero,108(sp)
    8544:	a2c0010c 	andi	r11,r20,4
    8548:	58000226 	beq	r11,zero,8554 <___vfiprintf_internal_r+0x62c>
    854c:	8ca7c83a 	sub	r19,r17,r18
    8550:	04c2f216 	blt	zero,r19,911c <___vfiprintf_internal_r+0x11f4>
    8554:	8c80010e 	bge	r17,r18,855c <___vfiprintf_internal_r+0x634>
    8558:	9023883a 	mov	r17,r18
    855c:	da802317 	ldw	r10,140(sp)
    8560:	5455883a 	add	r10,r10,r17
    8564:	da802315 	stw	r10,140(sp)
    8568:	d8001b15 	stw	zero,108(sp)
    856c:	d811883a 	mov	r8,sp
    8570:	003ea206 	br	7ffc <__alt_data_end+0xfffe7ffc>
    8574:	a5000814 	ori	r20,r20,32
    8578:	80c00007 	ldb	r3,0(r16)
    857c:	003ec906 	br	80a4 <__alt_data_end+0xfffe80a4>
    8580:	80c00007 	ldb	r3,0(r16)
    8584:	1b030926 	beq	r3,r12,91ac <___vfiprintf_internal_r+0x1284>
    8588:	a5000414 	ori	r20,r20,16
    858c:	003ec506 	br	80a4 <__alt_data_end+0xfffe80a4>
    8590:	21003fcc 	andi	r4,r4,255
    8594:	20035e1e 	bne	r4,zero,9310 <___vfiprintf_internal_r+0x13e8>
    8598:	a080080c 	andi	r2,r20,32
    859c:	1002a526 	beq	r2,zero,9034 <___vfiprintf_internal_r+0x110c>
    85a0:	da802217 	ldw	r10,136(sp)
    85a4:	50800017 	ldw	r2,0(r10)
    85a8:	da802317 	ldw	r10,140(sp)
    85ac:	5007d7fa 	srai	r3,r10,31
    85b0:	da802217 	ldw	r10,136(sp)
    85b4:	10c00115 	stw	r3,4(r2)
    85b8:	52800104 	addi	r10,r10,4
    85bc:	da802215 	stw	r10,136(sp)
    85c0:	da802317 	ldw	r10,140(sp)
    85c4:	12800015 	stw	r10,0(r2)
    85c8:	003e8c06 	br	7ffc <__alt_data_end+0xfffe7ffc>
    85cc:	21003fcc 	andi	r4,r4,255
    85d0:	2003511e 	bne	r4,zero,9318 <___vfiprintf_internal_r+0x13f0>
    85d4:	a080080c 	andi	r2,r20,32
    85d8:	1000a126 	beq	r2,zero,8860 <___vfiprintf_internal_r+0x938>
    85dc:	da802217 	ldw	r10,136(sp)
    85e0:	d8001d85 	stb	zero,118(sp)
    85e4:	50800204 	addi	r2,r10,8
    85e8:	54800017 	ldw	r18,0(r10)
    85ec:	54c00117 	ldw	r19,4(r10)
    85f0:	4802b416 	blt	r9,zero,90c4 <___vfiprintf_internal_r+0x119c>
    85f4:	013fdfc4 	movi	r4,-129
    85f8:	94c6b03a 	or	r3,r18,r19
    85fc:	d8802215 	stw	r2,136(sp)
    8600:	a128703a 	and	r20,r20,r4
    8604:	1800a226 	beq	r3,zero,8890 <___vfiprintf_internal_r+0x968>
    8608:	0039883a 	mov	fp,zero
    860c:	dd401a04 	addi	r21,sp,104
    8610:	9006d0fa 	srli	r3,r18,3
    8614:	9808977a 	slli	r4,r19,29
    8618:	9826d0fa 	srli	r19,r19,3
    861c:	948001cc 	andi	r18,r18,7
    8620:	90800c04 	addi	r2,r18,48
    8624:	ad7fffc4 	addi	r21,r21,-1
    8628:	20e4b03a 	or	r18,r4,r3
    862c:	a8800005 	stb	r2,0(r21)
    8630:	94c6b03a 	or	r3,r18,r19
    8634:	183ff61e 	bne	r3,zero,8610 <__alt_data_end+0xfffe8610>
    8638:	a0c0004c 	andi	r3,r20,1
    863c:	18005926 	beq	r3,zero,87a4 <___vfiprintf_internal_r+0x87c>
    8640:	10803fcc 	andi	r2,r2,255
    8644:	1080201c 	xori	r2,r2,128
    8648:	10bfe004 	addi	r2,r2,-128
    864c:	00c00c04 	movi	r3,48
    8650:	10c05426 	beq	r2,r3,87a4 <___vfiprintf_internal_r+0x87c>
    8654:	da801e17 	ldw	r10,120(sp)
    8658:	a8bfffc4 	addi	r2,r21,-1
    865c:	a8ffffc5 	stb	r3,-1(r21)
    8660:	50a7c83a 	sub	r19,r10,r2
    8664:	102b883a 	mov	r21,r2
    8668:	003f2f06 	br	8328 <__alt_data_end+0xfffe8328>
    866c:	21003fcc 	andi	r4,r4,255
    8670:	2003421e 	bne	r4,zero,937c <___vfiprintf_internal_r+0x1454>
    8674:	00800074 	movhi	r2,1
    8678:	10bdbd04 	addi	r2,r2,-2316
    867c:	d8802615 	stw	r2,152(sp)
    8680:	a080080c 	andi	r2,r20,32
    8684:	1000aa26 	beq	r2,zero,8930 <___vfiprintf_internal_r+0xa08>
    8688:	da802217 	ldw	r10,136(sp)
    868c:	54800017 	ldw	r18,0(r10)
    8690:	54c00117 	ldw	r19,4(r10)
    8694:	52800204 	addi	r10,r10,8
    8698:	da802215 	stw	r10,136(sp)
    869c:	a080004c 	andi	r2,r20,1
    86a0:	1001d226 	beq	r2,zero,8dec <___vfiprintf_internal_r+0xec4>
    86a4:	94c4b03a 	or	r2,r18,r19
    86a8:	1002351e 	bne	r2,zero,8f80 <___vfiprintf_internal_r+0x1058>
    86ac:	d8001d85 	stb	zero,118(sp)
    86b0:	48022216 	blt	r9,zero,8f3c <___vfiprintf_internal_r+0x1014>
    86b4:	00bfdfc4 	movi	r2,-129
    86b8:	a0a8703a 	and	r20,r20,r2
    86bc:	003f1506 	br	8314 <__alt_data_end+0xfffe8314>
    86c0:	da802217 	ldw	r10,136(sp)
    86c4:	04800044 	movi	r18,1
    86c8:	d8001d85 	stb	zero,118(sp)
    86cc:	50800017 	ldw	r2,0(r10)
    86d0:	52800104 	addi	r10,r10,4
    86d4:	da802215 	stw	r10,136(sp)
    86d8:	d8801005 	stb	r2,64(sp)
    86dc:	9027883a 	mov	r19,r18
    86e0:	dd401004 	addi	r21,sp,64
    86e4:	0013883a 	mov	r9,zero
    86e8:	003f1706 	br	8348 <__alt_data_end+0xfffe8348>
    86ec:	21003fcc 	andi	r4,r4,255
    86f0:	2003201e 	bne	r4,zero,9374 <___vfiprintf_internal_r+0x144c>
    86f4:	a080080c 	andi	r2,r20,32
    86f8:	10004b26 	beq	r2,zero,8828 <___vfiprintf_internal_r+0x900>
    86fc:	da802217 	ldw	r10,136(sp)
    8700:	50800117 	ldw	r2,4(r10)
    8704:	54800017 	ldw	r18,0(r10)
    8708:	52800204 	addi	r10,r10,8
    870c:	da802215 	stw	r10,136(sp)
    8710:	1027883a 	mov	r19,r2
    8714:	10022c16 	blt	r2,zero,8fc8 <___vfiprintf_internal_r+0x10a0>
    8718:	df001d83 	ldbu	fp,118(sp)
    871c:	48007216 	blt	r9,zero,88e8 <___vfiprintf_internal_r+0x9c0>
    8720:	00ffdfc4 	movi	r3,-129
    8724:	94c4b03a 	or	r2,r18,r19
    8728:	a0e8703a 	and	r20,r20,r3
    872c:	1000cc26 	beq	r2,zero,8a60 <___vfiprintf_internal_r+0xb38>
    8730:	98021026 	beq	r19,zero,8f74 <___vfiprintf_internal_r+0x104c>
    8734:	dc402415 	stw	r17,144(sp)
    8738:	dc002515 	stw	r16,148(sp)
    873c:	9823883a 	mov	r17,r19
    8740:	9021883a 	mov	r16,r18
    8744:	dd401a04 	addi	r21,sp,104
    8748:	4825883a 	mov	r18,r9
    874c:	4027883a 	mov	r19,r8
    8750:	8009883a 	mov	r4,r16
    8754:	880b883a 	mov	r5,r17
    8758:	01800284 	movi	r6,10
    875c:	000f883a 	mov	r7,zero
    8760:	000a3080 	call	a308 <__umoddi3>
    8764:	10800c04 	addi	r2,r2,48
    8768:	ad7fffc4 	addi	r21,r21,-1
    876c:	8009883a 	mov	r4,r16
    8770:	880b883a 	mov	r5,r17
    8774:	a8800005 	stb	r2,0(r21)
    8778:	01800284 	movi	r6,10
    877c:	000f883a 	mov	r7,zero
    8780:	0009d900 	call	9d90 <__udivdi3>
    8784:	1021883a 	mov	r16,r2
    8788:	10c4b03a 	or	r2,r2,r3
    878c:	1823883a 	mov	r17,r3
    8790:	103fef1e 	bne	r2,zero,8750 <__alt_data_end+0xfffe8750>
    8794:	dc402417 	ldw	r17,144(sp)
    8798:	dc002517 	ldw	r16,148(sp)
    879c:	9013883a 	mov	r9,r18
    87a0:	9811883a 	mov	r8,r19
    87a4:	da801e17 	ldw	r10,120(sp)
    87a8:	5567c83a 	sub	r19,r10,r21
    87ac:	003ede06 	br	8328 <__alt_data_end+0xfffe8328>
    87b0:	38803fcc 	andi	r2,r7,255
    87b4:	1080201c 	xori	r2,r2,128
    87b8:	10bfe004 	addi	r2,r2,-128
    87bc:	1002371e 	bne	r2,zero,909c <___vfiprintf_internal_r+0x1174>
    87c0:	01000044 	movi	r4,1
    87c4:	01c00804 	movi	r7,32
    87c8:	80c00007 	ldb	r3,0(r16)
    87cc:	003e3506 	br	80a4 <__alt_data_end+0xfffe80a4>
    87d0:	a5000054 	ori	r20,r20,1
    87d4:	80c00007 	ldb	r3,0(r16)
    87d8:	003e3206 	br	80a4 <__alt_data_end+0xfffe80a4>
    87dc:	a5002014 	ori	r20,r20,128
    87e0:	80c00007 	ldb	r3,0(r16)
    87e4:	003e2f06 	br	80a4 <__alt_data_end+0xfffe80a4>
    87e8:	8015883a 	mov	r10,r16
    87ec:	0023883a 	mov	r17,zero
    87f0:	18bff404 	addi	r2,r3,-48
    87f4:	50c00007 	ldb	r3,0(r10)
    87f8:	8c4002a4 	muli	r17,r17,10
    87fc:	84000044 	addi	r16,r16,1
    8800:	8015883a 	mov	r10,r16
    8804:	1463883a 	add	r17,r2,r17
    8808:	18bff404 	addi	r2,r3,-48
    880c:	30bff92e 	bgeu	r6,r2,87f4 <__alt_data_end+0xfffe87f4>
    8810:	003e2506 	br	80a8 <__alt_data_end+0xfffe80a8>
    8814:	21003fcc 	andi	r4,r4,255
    8818:	2002d41e 	bne	r4,zero,936c <___vfiprintf_internal_r+0x1444>
    881c:	a5000414 	ori	r20,r20,16
    8820:	a080080c 	andi	r2,r20,32
    8824:	103fb51e 	bne	r2,zero,86fc <__alt_data_end+0xfffe86fc>
    8828:	a080040c 	andi	r2,r20,16
    882c:	1001f826 	beq	r2,zero,9010 <___vfiprintf_internal_r+0x10e8>
    8830:	da802217 	ldw	r10,136(sp)
    8834:	54800017 	ldw	r18,0(r10)
    8838:	52800104 	addi	r10,r10,4
    883c:	da802215 	stw	r10,136(sp)
    8840:	9027d7fa 	srai	r19,r18,31
    8844:	9805883a 	mov	r2,r19
    8848:	003fb206 	br	8714 <__alt_data_end+0xfffe8714>
    884c:	21003fcc 	andi	r4,r4,255
    8850:	2002c41e 	bne	r4,zero,9364 <___vfiprintf_internal_r+0x143c>
    8854:	a5000414 	ori	r20,r20,16
    8858:	a080080c 	andi	r2,r20,32
    885c:	103f5f1e 	bne	r2,zero,85dc <__alt_data_end+0xfffe85dc>
    8860:	a080040c 	andi	r2,r20,16
    8864:	10020f26 	beq	r2,zero,90a4 <___vfiprintf_internal_r+0x117c>
    8868:	da802217 	ldw	r10,136(sp)
    886c:	d8001d85 	stb	zero,118(sp)
    8870:	0027883a 	mov	r19,zero
    8874:	50800104 	addi	r2,r10,4
    8878:	54800017 	ldw	r18,0(r10)
    887c:	48021116 	blt	r9,zero,90c4 <___vfiprintf_internal_r+0x119c>
    8880:	00ffdfc4 	movi	r3,-129
    8884:	d8802215 	stw	r2,136(sp)
    8888:	a0e8703a 	and	r20,r20,r3
    888c:	903f5e1e 	bne	r18,zero,8608 <__alt_data_end+0xfffe8608>
    8890:	0039883a 	mov	fp,zero
    8894:	4802a626 	beq	r9,zero,9330 <___vfiprintf_internal_r+0x1408>
    8898:	0025883a 	mov	r18,zero
    889c:	0027883a 	mov	r19,zero
    88a0:	003f5a06 	br	860c <__alt_data_end+0xfffe860c>
    88a4:	21003fcc 	andi	r4,r4,255
    88a8:	20029f1e 	bne	r4,zero,9328 <___vfiprintf_internal_r+0x1400>
    88ac:	a5000414 	ori	r20,r20,16
    88b0:	a080080c 	andi	r2,r20,32
    88b4:	10005e1e 	bne	r2,zero,8a30 <___vfiprintf_internal_r+0xb08>
    88b8:	a080040c 	andi	r2,r20,16
    88bc:	1001a21e 	bne	r2,zero,8f48 <___vfiprintf_internal_r+0x1020>
    88c0:	a080100c 	andi	r2,r20,64
    88c4:	d8001d85 	stb	zero,118(sp)
    88c8:	da802217 	ldw	r10,136(sp)
    88cc:	1002231e 	bne	r2,zero,915c <___vfiprintf_internal_r+0x1234>
    88d0:	50800104 	addi	r2,r10,4
    88d4:	54800017 	ldw	r18,0(r10)
    88d8:	0027883a 	mov	r19,zero
    88dc:	4801a00e 	bge	r9,zero,8f60 <___vfiprintf_internal_r+0x1038>
    88e0:	d8802215 	stw	r2,136(sp)
    88e4:	0039883a 	mov	fp,zero
    88e8:	94c4b03a 	or	r2,r18,r19
    88ec:	103f901e 	bne	r2,zero,8730 <__alt_data_end+0xfffe8730>
    88f0:	00800044 	movi	r2,1
    88f4:	10803fcc 	andi	r2,r2,255
    88f8:	00c00044 	movi	r3,1
    88fc:	10c05926 	beq	r2,r3,8a64 <___vfiprintf_internal_r+0xb3c>
    8900:	00c00084 	movi	r3,2
    8904:	10ffe41e 	bne	r2,r3,8898 <__alt_data_end+0xfffe8898>
    8908:	0025883a 	mov	r18,zero
    890c:	0027883a 	mov	r19,zero
    8910:	00013d06 	br	8e08 <___vfiprintf_internal_r+0xee0>
    8914:	21003fcc 	andi	r4,r4,255
    8918:	2002811e 	bne	r4,zero,9320 <___vfiprintf_internal_r+0x13f8>
    891c:	00800074 	movhi	r2,1
    8920:	10bdb804 	addi	r2,r2,-2336
    8924:	d8802615 	stw	r2,152(sp)
    8928:	a080080c 	andi	r2,r20,32
    892c:	103f561e 	bne	r2,zero,8688 <__alt_data_end+0xfffe8688>
    8930:	a080040c 	andi	r2,r20,16
    8934:	1001d126 	beq	r2,zero,907c <___vfiprintf_internal_r+0x1154>
    8938:	da802217 	ldw	r10,136(sp)
    893c:	0027883a 	mov	r19,zero
    8940:	54800017 	ldw	r18,0(r10)
    8944:	52800104 	addi	r10,r10,4
    8948:	da802215 	stw	r10,136(sp)
    894c:	003f5306 	br	869c <__alt_data_end+0xfffe869c>
    8950:	da802217 	ldw	r10,136(sp)
    8954:	d8001d85 	stb	zero,118(sp)
    8958:	55400017 	ldw	r21,0(r10)
    895c:	50c00104 	addi	r3,r10,4
    8960:	a8024226 	beq	r21,zero,926c <___vfiprintf_internal_r+0x1344>
    8964:	48021816 	blt	r9,zero,91c8 <___vfiprintf_internal_r+0x12a0>
    8968:	480d883a 	mov	r6,r9
    896c:	000b883a 	mov	r5,zero
    8970:	a809883a 	mov	r4,r21
    8974:	d8c02a15 	stw	r3,168(sp)
    8978:	da002b15 	stw	r8,172(sp)
    897c:	da402c15 	stw	r9,176(sp)
    8980:	00061240 	call	6124 <memchr>
    8984:	d8c02a17 	ldw	r3,168(sp)
    8988:	da002b17 	ldw	r8,172(sp)
    898c:	da402c17 	ldw	r9,176(sp)
    8990:	10024826 	beq	r2,zero,92b4 <___vfiprintf_internal_r+0x138c>
    8994:	1567c83a 	sub	r19,r2,r21
    8998:	df001d83 	ldbu	fp,118(sp)
    899c:	d8c02215 	stw	r3,136(sp)
    89a0:	0013883a 	mov	r9,zero
    89a4:	003e6006 	br	8328 <__alt_data_end+0xfffe8328>
    89a8:	21003fcc 	andi	r4,r4,255
    89ac:	203fc026 	beq	r4,zero,88b0 <__alt_data_end+0xfffe88b0>
    89b0:	d9c01d85 	stb	r7,118(sp)
    89b4:	003fbe06 	br	88b0 <__alt_data_end+0xfffe88b0>
    89b8:	da802217 	ldw	r10,136(sp)
    89bc:	54400017 	ldw	r17,0(r10)
    89c0:	50800104 	addi	r2,r10,4
    89c4:	883e3b16 	blt	r17,zero,82b4 <__alt_data_end+0xfffe82b4>
    89c8:	d8802215 	stw	r2,136(sp)
    89cc:	80c00007 	ldb	r3,0(r16)
    89d0:	003db406 	br	80a4 <__alt_data_end+0xfffe80a4>
    89d4:	01000044 	movi	r4,1
    89d8:	01c00ac4 	movi	r7,43
    89dc:	80c00007 	ldb	r3,0(r16)
    89e0:	003db006 	br	80a4 <__alt_data_end+0xfffe80a4>
    89e4:	80c00007 	ldb	r3,0(r16)
    89e8:	82800044 	addi	r10,r16,1
    89ec:	1b423c26 	beq	r3,r13,92e0 <___vfiprintf_internal_r+0x13b8>
    89f0:	18bff404 	addi	r2,r3,-48
    89f4:	0013883a 	mov	r9,zero
    89f8:	30822b36 	bltu	r6,r2,92a8 <___vfiprintf_internal_r+0x1380>
    89fc:	50c00007 	ldb	r3,0(r10)
    8a00:	4a4002a4 	muli	r9,r9,10
    8a04:	54000044 	addi	r16,r10,1
    8a08:	8015883a 	mov	r10,r16
    8a0c:	4893883a 	add	r9,r9,r2
    8a10:	18bff404 	addi	r2,r3,-48
    8a14:	30bff92e 	bgeu	r6,r2,89fc <__alt_data_end+0xfffe89fc>
    8a18:	483da30e 	bge	r9,zero,80a8 <__alt_data_end+0xfffe80a8>
    8a1c:	027fffc4 	movi	r9,-1
    8a20:	003da106 	br	80a8 <__alt_data_end+0xfffe80a8>
    8a24:	a5001014 	ori	r20,r20,64
    8a28:	80c00007 	ldb	r3,0(r16)
    8a2c:	003d9d06 	br	80a4 <__alt_data_end+0xfffe80a4>
    8a30:	da802217 	ldw	r10,136(sp)
    8a34:	d8001d85 	stb	zero,118(sp)
    8a38:	50c00204 	addi	r3,r10,8
    8a3c:	54800017 	ldw	r18,0(r10)
    8a40:	54c00117 	ldw	r19,4(r10)
    8a44:	4801ca16 	blt	r9,zero,9170 <___vfiprintf_internal_r+0x1248>
    8a48:	013fdfc4 	movi	r4,-129
    8a4c:	94c4b03a 	or	r2,r18,r19
    8a50:	d8c02215 	stw	r3,136(sp)
    8a54:	a128703a 	and	r20,r20,r4
    8a58:	0039883a 	mov	fp,zero
    8a5c:	103f341e 	bne	r2,zero,8730 <__alt_data_end+0xfffe8730>
    8a60:	483e2e26 	beq	r9,zero,831c <__alt_data_end+0xfffe831c>
    8a64:	0025883a 	mov	r18,zero
    8a68:	94800c04 	addi	r18,r18,48
    8a6c:	dc8019c5 	stb	r18,103(sp)
    8a70:	dcc02717 	ldw	r19,156(sp)
    8a74:	dd4019c4 	addi	r21,sp,103
    8a78:	003e2b06 	br	8328 <__alt_data_end+0xfffe8328>
    8a7c:	21003fcc 	andi	r4,r4,255
    8a80:	2002361e 	bne	r4,zero,935c <___vfiprintf_internal_r+0x1434>
    8a84:	1801c126 	beq	r3,zero,918c <___vfiprintf_internal_r+0x1264>
    8a88:	04800044 	movi	r18,1
    8a8c:	d8c01005 	stb	r3,64(sp)
    8a90:	d8001d85 	stb	zero,118(sp)
    8a94:	9027883a 	mov	r19,r18
    8a98:	dd401004 	addi	r21,sp,64
    8a9c:	003f1106 	br	86e4 <__alt_data_end+0xfffe86e4>
    8aa0:	d9402117 	ldw	r5,132(sp)
    8aa4:	d9002017 	ldw	r4,128(sp)
    8aa8:	d9801a04 	addi	r6,sp,104
    8aac:	d9c02b15 	stw	r7,172(sp)
    8ab0:	dbc02a15 	stw	r15,168(sp)
    8ab4:	0007e140 	call	7e14 <__sprint_r.part.0>
    8ab8:	d9c02b17 	ldw	r7,172(sp)
    8abc:	dbc02a17 	ldw	r15,168(sp)
    8ac0:	10006d1e 	bne	r2,zero,8c78 <___vfiprintf_internal_r+0xd50>
    8ac4:	d9801b17 	ldw	r6,108(sp)
    8ac8:	d8801c17 	ldw	r2,112(sp)
    8acc:	d811883a 	mov	r8,sp
    8ad0:	31400044 	addi	r5,r6,1
    8ad4:	003e3306 	br	83a4 <__alt_data_end+0xfffe83a4>
    8ad8:	d9401b17 	ldw	r5,108(sp)
    8adc:	d8801c17 	ldw	r2,112(sp)
    8ae0:	29000044 	addi	r4,r5,1
    8ae4:	d8c01d87 	ldb	r3,118(sp)
    8ae8:	183e4d26 	beq	r3,zero,8420 <__alt_data_end+0xfffe8420>
    8aec:	00c00044 	movi	r3,1
    8af0:	d9401d84 	addi	r5,sp,118
    8af4:	10c5883a 	add	r2,r2,r3
    8af8:	41400015 	stw	r5,0(r8)
    8afc:	40c00115 	stw	r3,4(r8)
    8b00:	d8801c15 	stw	r2,112(sp)
    8b04:	d9001b15 	stw	r4,108(sp)
    8b08:	014001c4 	movi	r5,7
    8b0c:	2900a90e 	bge	r5,r4,8db4 <___vfiprintf_internal_r+0xe8c>
    8b10:	1000da1e 	bne	r2,zero,8e7c <___vfiprintf_internal_r+0xf54>
    8b14:	7000ab1e 	bne	r14,zero,8dc4 <___vfiprintf_internal_r+0xe9c>
    8b18:	000b883a 	mov	r5,zero
    8b1c:	1809883a 	mov	r4,r3
    8b20:	d811883a 	mov	r8,sp
    8b24:	00c02004 	movi	r3,128
    8b28:	e0fe4d26 	beq	fp,r3,8460 <__alt_data_end+0xfffe8460>
    8b2c:	4cf9c83a 	sub	fp,r9,r19
    8b30:	073e7b0e 	bge	zero,fp,8520 <__alt_data_end+0xfffe8520>
    8b34:	01c00404 	movi	r7,16
    8b38:	3f01900e 	bge	r7,fp,917c <___vfiprintf_internal_r+0x1254>
    8b3c:	00c00074 	movhi	r3,1
    8b40:	18fe1e04 	addi	r3,r3,-1928
    8b44:	d8c02415 	stw	r3,144(sp)
    8b48:	034001c4 	movi	r13,7
    8b4c:	00000506 	br	8b64 <___vfiprintf_internal_r+0xc3c>
    8b50:	29000084 	addi	r4,r5,2
    8b54:	42000204 	addi	r8,r8,8
    8b58:	180b883a 	mov	r5,r3
    8b5c:	e73ffc04 	addi	fp,fp,-16
    8b60:	3f000d0e 	bge	r7,fp,8b98 <___vfiprintf_internal_r+0xc70>
    8b64:	10800404 	addi	r2,r2,16
    8b68:	28c00044 	addi	r3,r5,1
    8b6c:	45c00015 	stw	r23,0(r8)
    8b70:	41c00115 	stw	r7,4(r8)
    8b74:	d8801c15 	stw	r2,112(sp)
    8b78:	d8c01b15 	stw	r3,108(sp)
    8b7c:	68fff40e 	bge	r13,r3,8b50 <__alt_data_end+0xfffe8b50>
    8b80:	1000101e 	bne	r2,zero,8bc4 <___vfiprintf_internal_r+0xc9c>
    8b84:	e73ffc04 	addi	fp,fp,-16
    8b88:	01000044 	movi	r4,1
    8b8c:	000b883a 	mov	r5,zero
    8b90:	d811883a 	mov	r8,sp
    8b94:	3f3ff316 	blt	r7,fp,8b64 <__alt_data_end+0xfffe8b64>
    8b98:	da802417 	ldw	r10,144(sp)
    8b9c:	1705883a 	add	r2,r2,fp
    8ba0:	47000115 	stw	fp,4(r8)
    8ba4:	42800015 	stw	r10,0(r8)
    8ba8:	d8801c15 	stw	r2,112(sp)
    8bac:	d9001b15 	stw	r4,108(sp)
    8bb0:	00c001c4 	movi	r3,7
    8bb4:	19003616 	blt	r3,r4,8c90 <___vfiprintf_internal_r+0xd68>
    8bb8:	42000204 	addi	r8,r8,8
    8bbc:	21000044 	addi	r4,r4,1
    8bc0:	003e5706 	br	8520 <__alt_data_end+0xfffe8520>
    8bc4:	d9402117 	ldw	r5,132(sp)
    8bc8:	d9002017 	ldw	r4,128(sp)
    8bcc:	d9801a04 	addi	r6,sp,104
    8bd0:	d9c02b15 	stw	r7,172(sp)
    8bd4:	db402a15 	stw	r13,168(sp)
    8bd8:	0007e140 	call	7e14 <__sprint_r.part.0>
    8bdc:	d9c02b17 	ldw	r7,172(sp)
    8be0:	db402a17 	ldw	r13,168(sp)
    8be4:	1000241e 	bne	r2,zero,8c78 <___vfiprintf_internal_r+0xd50>
    8be8:	d9401b17 	ldw	r5,108(sp)
    8bec:	d8801c17 	ldw	r2,112(sp)
    8bf0:	d811883a 	mov	r8,sp
    8bf4:	29000044 	addi	r4,r5,1
    8bf8:	003fd806 	br	8b5c <__alt_data_end+0xfffe8b5c>
    8bfc:	d9401b17 	ldw	r5,108(sp)
    8c00:	00c00074 	movhi	r3,1
    8c04:	18fe2204 	addi	r3,r3,-1912
    8c08:	d8c02415 	stw	r3,144(sp)
    8c0c:	29400044 	addi	r5,r5,1
    8c10:	d8c02417 	ldw	r3,144(sp)
    8c14:	14c5883a 	add	r2,r2,r19
    8c18:	44c00115 	stw	r19,4(r8)
    8c1c:	40c00015 	stw	r3,0(r8)
    8c20:	d8801c15 	stw	r2,112(sp)
    8c24:	d9401b15 	stw	r5,108(sp)
    8c28:	00c001c4 	movi	r3,7
    8c2c:	1940070e 	bge	r3,r5,8c4c <___vfiprintf_internal_r+0xd24>
    8c30:	103e4826 	beq	r2,zero,8554 <__alt_data_end+0xfffe8554>
    8c34:	d9402117 	ldw	r5,132(sp)
    8c38:	d9002017 	ldw	r4,128(sp)
    8c3c:	d9801a04 	addi	r6,sp,104
    8c40:	0007e140 	call	7e14 <__sprint_r.part.0>
    8c44:	10000c1e 	bne	r2,zero,8c78 <___vfiprintf_internal_r+0xd50>
    8c48:	d8801c17 	ldw	r2,112(sp)
    8c4c:	8c80010e 	bge	r17,r18,8c54 <___vfiprintf_internal_r+0xd2c>
    8c50:	9023883a 	mov	r17,r18
    8c54:	da802317 	ldw	r10,140(sp)
    8c58:	5455883a 	add	r10,r10,r17
    8c5c:	da802315 	stw	r10,140(sp)
    8c60:	103e4126 	beq	r2,zero,8568 <__alt_data_end+0xfffe8568>
    8c64:	d9402117 	ldw	r5,132(sp)
    8c68:	d9002017 	ldw	r4,128(sp)
    8c6c:	d9801a04 	addi	r6,sp,104
    8c70:	0007e140 	call	7e14 <__sprint_r.part.0>
    8c74:	103e3c26 	beq	r2,zero,8568 <__alt_data_end+0xfffe8568>
    8c78:	dd002117 	ldw	r20,132(sp)
    8c7c:	a080030b 	ldhu	r2,12(r20)
    8c80:	1080100c 	andi	r2,r2,64
    8c84:	1001231e 	bne	r2,zero,9114 <___vfiprintf_internal_r+0x11ec>
    8c88:	d8802317 	ldw	r2,140(sp)
    8c8c:	003d7b06 	br	827c <__alt_data_end+0xfffe827c>
    8c90:	1000991e 	bne	r2,zero,8ef8 <___vfiprintf_internal_r+0xfd0>
    8c94:	00c00044 	movi	r3,1
    8c98:	9805883a 	mov	r2,r19
    8c9c:	dd400015 	stw	r21,0(sp)
    8ca0:	dcc00115 	stw	r19,4(sp)
    8ca4:	dcc01c15 	stw	r19,112(sp)
    8ca8:	d8c01b15 	stw	r3,108(sp)
    8cac:	d811883a 	mov	r8,sp
    8cb0:	42000204 	addi	r8,r8,8
    8cb4:	a2c0010c 	andi	r11,r20,4
    8cb8:	583fe426 	beq	r11,zero,8c4c <__alt_data_end+0xfffe8c4c>
    8cbc:	8ca7c83a 	sub	r19,r17,r18
    8cc0:	04ffe20e 	bge	zero,r19,8c4c <__alt_data_end+0xfffe8c4c>
    8cc4:	01c00404 	movi	r7,16
    8cc8:	3cffcc0e 	bge	r7,r19,8bfc <__alt_data_end+0xfffe8bfc>
    8ccc:	02800074 	movhi	r10,1
    8cd0:	52be2204 	addi	r10,r10,-1912
    8cd4:	d9001b17 	ldw	r4,108(sp)
    8cd8:	da802415 	stw	r10,144(sp)
    8cdc:	382b883a 	mov	r21,r7
    8ce0:	050001c4 	movi	r20,7
    8ce4:	df002017 	ldw	fp,128(sp)
    8ce8:	00000506 	br	8d00 <___vfiprintf_internal_r+0xdd8>
    8cec:	21400084 	addi	r5,r4,2
    8cf0:	42000204 	addi	r8,r8,8
    8cf4:	1809883a 	mov	r4,r3
    8cf8:	9cfffc04 	addi	r19,r19,-16
    8cfc:	acffc40e 	bge	r21,r19,8c10 <__alt_data_end+0xfffe8c10>
    8d00:	10800404 	addi	r2,r2,16
    8d04:	20c00044 	addi	r3,r4,1
    8d08:	45800015 	stw	r22,0(r8)
    8d0c:	45400115 	stw	r21,4(r8)
    8d10:	d8801c15 	stw	r2,112(sp)
    8d14:	d8c01b15 	stw	r3,108(sp)
    8d18:	a0fff40e 	bge	r20,r3,8cec <__alt_data_end+0xfffe8cec>
    8d1c:	1000041e 	bne	r2,zero,8d30 <___vfiprintf_internal_r+0xe08>
    8d20:	01400044 	movi	r5,1
    8d24:	0009883a 	mov	r4,zero
    8d28:	d811883a 	mov	r8,sp
    8d2c:	003ff206 	br	8cf8 <__alt_data_end+0xfffe8cf8>
    8d30:	d9402117 	ldw	r5,132(sp)
    8d34:	d9801a04 	addi	r6,sp,104
    8d38:	e009883a 	mov	r4,fp
    8d3c:	0007e140 	call	7e14 <__sprint_r.part.0>
    8d40:	103fcd1e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8d44:	d9001b17 	ldw	r4,108(sp)
    8d48:	d8801c17 	ldw	r2,112(sp)
    8d4c:	d811883a 	mov	r8,sp
    8d50:	21400044 	addi	r5,r4,1
    8d54:	003fe806 	br	8cf8 <__alt_data_end+0xfffe8cf8>
    8d58:	d9402117 	ldw	r5,132(sp)
    8d5c:	d9002017 	ldw	r4,128(sp)
    8d60:	d9801a04 	addi	r6,sp,104
    8d64:	d9c02b15 	stw	r7,172(sp)
    8d68:	db402a15 	stw	r13,168(sp)
    8d6c:	0007e140 	call	7e14 <__sprint_r.part.0>
    8d70:	d9c02b17 	ldw	r7,172(sp)
    8d74:	db402a17 	ldw	r13,168(sp)
    8d78:	103fbf1e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8d7c:	d9401b17 	ldw	r5,108(sp)
    8d80:	d8801c17 	ldw	r2,112(sp)
    8d84:	d811883a 	mov	r8,sp
    8d88:	29800044 	addi	r6,r5,1
    8d8c:	003dc406 	br	84a0 <__alt_data_end+0xfffe84a0>
    8d90:	1000d21e 	bne	r2,zero,90dc <___vfiprintf_internal_r+0x11b4>
    8d94:	d8c01d87 	ldb	r3,118(sp)
    8d98:	18009526 	beq	r3,zero,8ff0 <___vfiprintf_internal_r+0x10c8>
    8d9c:	00800044 	movi	r2,1
    8da0:	d8c01d84 	addi	r3,sp,118
    8da4:	1009883a 	mov	r4,r2
    8da8:	d8c00015 	stw	r3,0(sp)
    8dac:	d8800115 	stw	r2,4(sp)
    8db0:	d811883a 	mov	r8,sp
    8db4:	200b883a 	mov	r5,r4
    8db8:	42000204 	addi	r8,r8,8
    8dbc:	21000044 	addi	r4,r4,1
    8dc0:	003d9706 	br	8420 <__alt_data_end+0xfffe8420>
    8dc4:	d9001d04 	addi	r4,sp,116
    8dc8:	00800084 	movi	r2,2
    8dcc:	d9000015 	stw	r4,0(sp)
    8dd0:	d8800115 	stw	r2,4(sp)
    8dd4:	1809883a 	mov	r4,r3
    8dd8:	d811883a 	mov	r8,sp
    8ddc:	200b883a 	mov	r5,r4
    8de0:	42000204 	addi	r8,r8,8
    8de4:	21000044 	addi	r4,r4,1
    8de8:	003f4e06 	br	8b24 <__alt_data_end+0xfffe8b24>
    8dec:	d8001d85 	stb	zero,118(sp)
    8df0:	48005016 	blt	r9,zero,8f34 <___vfiprintf_internal_r+0x100c>
    8df4:	00ffdfc4 	movi	r3,-129
    8df8:	94c4b03a 	or	r2,r18,r19
    8dfc:	a0e8703a 	and	r20,r20,r3
    8e00:	103d4426 	beq	r2,zero,8314 <__alt_data_end+0xfffe8314>
    8e04:	0039883a 	mov	fp,zero
    8e08:	d9002617 	ldw	r4,152(sp)
    8e0c:	dd401a04 	addi	r21,sp,104
    8e10:	908003cc 	andi	r2,r18,15
    8e14:	9806973a 	slli	r3,r19,28
    8e18:	2085883a 	add	r2,r4,r2
    8e1c:	9024d13a 	srli	r18,r18,4
    8e20:	10800003 	ldbu	r2,0(r2)
    8e24:	9826d13a 	srli	r19,r19,4
    8e28:	ad7fffc4 	addi	r21,r21,-1
    8e2c:	1ca4b03a 	or	r18,r3,r18
    8e30:	a8800005 	stb	r2,0(r21)
    8e34:	94c4b03a 	or	r2,r18,r19
    8e38:	103ff51e 	bne	r2,zero,8e10 <__alt_data_end+0xfffe8e10>
    8e3c:	003e5906 	br	87a4 <__alt_data_end+0xfffe87a4>
    8e40:	d9402117 	ldw	r5,132(sp)
    8e44:	d9002017 	ldw	r4,128(sp)
    8e48:	d9801a04 	addi	r6,sp,104
    8e4c:	0007e140 	call	7e14 <__sprint_r.part.0>
    8e50:	103f891e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8e54:	d8801c17 	ldw	r2,112(sp)
    8e58:	d811883a 	mov	r8,sp
    8e5c:	003f9506 	br	8cb4 <__alt_data_end+0xfffe8cb4>
    8e60:	d9402117 	ldw	r5,132(sp)
    8e64:	d9002017 	ldw	r4,128(sp)
    8e68:	d9801a04 	addi	r6,sp,104
    8e6c:	0007e140 	call	7e14 <__sprint_r.part.0>
    8e70:	103f811e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8e74:	d811883a 	mov	r8,sp
    8e78:	003ced06 	br	8230 <__alt_data_end+0xfffe8230>
    8e7c:	d9402117 	ldw	r5,132(sp)
    8e80:	d9002017 	ldw	r4,128(sp)
    8e84:	d9801a04 	addi	r6,sp,104
    8e88:	da402c15 	stw	r9,176(sp)
    8e8c:	db802a15 	stw	r14,168(sp)
    8e90:	0007e140 	call	7e14 <__sprint_r.part.0>
    8e94:	da402c17 	ldw	r9,176(sp)
    8e98:	db802a17 	ldw	r14,168(sp)
    8e9c:	103f761e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8ea0:	d9401b17 	ldw	r5,108(sp)
    8ea4:	d8801c17 	ldw	r2,112(sp)
    8ea8:	d811883a 	mov	r8,sp
    8eac:	29000044 	addi	r4,r5,1
    8eb0:	003d5b06 	br	8420 <__alt_data_end+0xfffe8420>
    8eb4:	d9402117 	ldw	r5,132(sp)
    8eb8:	d9002017 	ldw	r4,128(sp)
    8ebc:	d9801a04 	addi	r6,sp,104
    8ec0:	da402c15 	stw	r9,176(sp)
    8ec4:	0007e140 	call	7e14 <__sprint_r.part.0>
    8ec8:	da402c17 	ldw	r9,176(sp)
    8ecc:	103f6a1e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8ed0:	d9401b17 	ldw	r5,108(sp)
    8ed4:	d8801c17 	ldw	r2,112(sp)
    8ed8:	d811883a 	mov	r8,sp
    8edc:	29000044 	addi	r4,r5,1
    8ee0:	003f1006 	br	8b24 <__alt_data_end+0xfffe8b24>
    8ee4:	1000c31e 	bne	r2,zero,91f4 <___vfiprintf_internal_r+0x12cc>
    8ee8:	01000044 	movi	r4,1
    8eec:	000b883a 	mov	r5,zero
    8ef0:	d811883a 	mov	r8,sp
    8ef4:	003f0d06 	br	8b2c <__alt_data_end+0xfffe8b2c>
    8ef8:	d9402117 	ldw	r5,132(sp)
    8efc:	d9002017 	ldw	r4,128(sp)
    8f00:	d9801a04 	addi	r6,sp,104
    8f04:	0007e140 	call	7e14 <__sprint_r.part.0>
    8f08:	103f5b1e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    8f0c:	d9001b17 	ldw	r4,108(sp)
    8f10:	d8801c17 	ldw	r2,112(sp)
    8f14:	d811883a 	mov	r8,sp
    8f18:	21000044 	addi	r4,r4,1
    8f1c:	003d8006 	br	8520 <__alt_data_end+0xfffe8520>
    8f20:	01000074 	movhi	r4,1
    8f24:	213dbd04 	addi	r4,r4,-2316
    8f28:	d9002615 	stw	r4,152(sp)
    8f2c:	d8c02215 	stw	r3,136(sp)
    8f30:	1029883a 	mov	r20,r2
    8f34:	94c4b03a 	or	r2,r18,r19
    8f38:	103fb21e 	bne	r2,zero,8e04 <__alt_data_end+0xfffe8e04>
    8f3c:	0039883a 	mov	fp,zero
    8f40:	00800084 	movi	r2,2
    8f44:	003e6b06 	br	88f4 <__alt_data_end+0xfffe88f4>
    8f48:	da802217 	ldw	r10,136(sp)
    8f4c:	d8001d85 	stb	zero,118(sp)
    8f50:	0027883a 	mov	r19,zero
    8f54:	50800104 	addi	r2,r10,4
    8f58:	54800017 	ldw	r18,0(r10)
    8f5c:	483e6016 	blt	r9,zero,88e0 <__alt_data_end+0xfffe88e0>
    8f60:	00ffdfc4 	movi	r3,-129
    8f64:	d8802215 	stw	r2,136(sp)
    8f68:	a0e8703a 	and	r20,r20,r3
    8f6c:	0039883a 	mov	fp,zero
    8f70:	903ebb26 	beq	r18,zero,8a60 <__alt_data_end+0xfffe8a60>
    8f74:	00800244 	movi	r2,9
    8f78:	14bdee36 	bltu	r2,r18,8734 <__alt_data_end+0xfffe8734>
    8f7c:	003eba06 	br	8a68 <__alt_data_end+0xfffe8a68>
    8f80:	00800c04 	movi	r2,48
    8f84:	d8c01d45 	stb	r3,117(sp)
    8f88:	d8801d05 	stb	r2,116(sp)
    8f8c:	d8001d85 	stb	zero,118(sp)
    8f90:	a0c00094 	ori	r3,r20,2
    8f94:	4800a916 	blt	r9,zero,923c <___vfiprintf_internal_r+0x1314>
    8f98:	00bfdfc4 	movi	r2,-129
    8f9c:	a096703a 	and	r11,r20,r2
    8fa0:	5d000094 	ori	r20,r11,2
    8fa4:	0039883a 	mov	fp,zero
    8fa8:	003f9706 	br	8e08 <__alt_data_end+0xfffe8e08>
    8fac:	8025883a 	mov	r18,r16
    8fb0:	003c2e06 	br	806c <__alt_data_end+0xfffe806c>
    8fb4:	00800074 	movhi	r2,1
    8fb8:	10bdbd04 	addi	r2,r2,-2316
    8fbc:	0039883a 	mov	fp,zero
    8fc0:	d8802615 	stw	r2,152(sp)
    8fc4:	003f9006 	br	8e08 <__alt_data_end+0xfffe8e08>
    8fc8:	04a5c83a 	sub	r18,zero,r18
    8fcc:	07000b44 	movi	fp,45
    8fd0:	9004c03a 	cmpne	r2,r18,zero
    8fd4:	04e7c83a 	sub	r19,zero,r19
    8fd8:	df001d85 	stb	fp,118(sp)
    8fdc:	98a7c83a 	sub	r19,r19,r2
    8fe0:	48009f16 	blt	r9,zero,9260 <___vfiprintf_internal_r+0x1338>
    8fe4:	00bfdfc4 	movi	r2,-129
    8fe8:	a0a8703a 	and	r20,r20,r2
    8fec:	003dd006 	br	8730 <__alt_data_end+0xfffe8730>
    8ff0:	70004c26 	beq	r14,zero,9124 <___vfiprintf_internal_r+0x11fc>
    8ff4:	00800084 	movi	r2,2
    8ff8:	d8c01d04 	addi	r3,sp,116
    8ffc:	d8c00015 	stw	r3,0(sp)
    9000:	d8800115 	stw	r2,4(sp)
    9004:	01000044 	movi	r4,1
    9008:	d811883a 	mov	r8,sp
    900c:	003f7306 	br	8ddc <__alt_data_end+0xfffe8ddc>
    9010:	a080100c 	andi	r2,r20,64
    9014:	da802217 	ldw	r10,136(sp)
    9018:	103e0626 	beq	r2,zero,8834 <__alt_data_end+0xfffe8834>
    901c:	5480000f 	ldh	r18,0(r10)
    9020:	52800104 	addi	r10,r10,4
    9024:	da802215 	stw	r10,136(sp)
    9028:	9027d7fa 	srai	r19,r18,31
    902c:	9805883a 	mov	r2,r19
    9030:	003db806 	br	8714 <__alt_data_end+0xfffe8714>
    9034:	a080040c 	andi	r2,r20,16
    9038:	1000091e 	bne	r2,zero,9060 <___vfiprintf_internal_r+0x1138>
    903c:	a2c0100c 	andi	r11,r20,64
    9040:	58000726 	beq	r11,zero,9060 <___vfiprintf_internal_r+0x1138>
    9044:	da802217 	ldw	r10,136(sp)
    9048:	50800017 	ldw	r2,0(r10)
    904c:	52800104 	addi	r10,r10,4
    9050:	da802215 	stw	r10,136(sp)
    9054:	da802317 	ldw	r10,140(sp)
    9058:	1280000d 	sth	r10,0(r2)
    905c:	003be706 	br	7ffc <__alt_data_end+0xfffe7ffc>
    9060:	da802217 	ldw	r10,136(sp)
    9064:	50800017 	ldw	r2,0(r10)
    9068:	52800104 	addi	r10,r10,4
    906c:	da802215 	stw	r10,136(sp)
    9070:	da802317 	ldw	r10,140(sp)
    9074:	12800015 	stw	r10,0(r2)
    9078:	003be006 	br	7ffc <__alt_data_end+0xfffe7ffc>
    907c:	a080100c 	andi	r2,r20,64
    9080:	da802217 	ldw	r10,136(sp)
    9084:	10003026 	beq	r2,zero,9148 <___vfiprintf_internal_r+0x1220>
    9088:	5480000b 	ldhu	r18,0(r10)
    908c:	52800104 	addi	r10,r10,4
    9090:	0027883a 	mov	r19,zero
    9094:	da802215 	stw	r10,136(sp)
    9098:	003d8006 	br	869c <__alt_data_end+0xfffe869c>
    909c:	80c00007 	ldb	r3,0(r16)
    90a0:	003c0006 	br	80a4 <__alt_data_end+0xfffe80a4>
    90a4:	a080100c 	andi	r2,r20,64
    90a8:	d8001d85 	stb	zero,118(sp)
    90ac:	da802217 	ldw	r10,136(sp)
    90b0:	1000201e 	bne	r2,zero,9134 <___vfiprintf_internal_r+0x120c>
    90b4:	50800104 	addi	r2,r10,4
    90b8:	54800017 	ldw	r18,0(r10)
    90bc:	0027883a 	mov	r19,zero
    90c0:	483def0e 	bge	r9,zero,8880 <__alt_data_end+0xfffe8880>
    90c4:	94c6b03a 	or	r3,r18,r19
    90c8:	d8802215 	stw	r2,136(sp)
    90cc:	183d4e1e 	bne	r3,zero,8608 <__alt_data_end+0xfffe8608>
    90d0:	0039883a 	mov	fp,zero
    90d4:	0005883a 	mov	r2,zero
    90d8:	003e0606 	br	88f4 <__alt_data_end+0xfffe88f4>
    90dc:	d9402117 	ldw	r5,132(sp)
    90e0:	d9002017 	ldw	r4,128(sp)
    90e4:	d9801a04 	addi	r6,sp,104
    90e8:	da402c15 	stw	r9,176(sp)
    90ec:	db802a15 	stw	r14,168(sp)
    90f0:	0007e140 	call	7e14 <__sprint_r.part.0>
    90f4:	da402c17 	ldw	r9,176(sp)
    90f8:	db802a17 	ldw	r14,168(sp)
    90fc:	103ede1e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    9100:	d9401b17 	ldw	r5,108(sp)
    9104:	d8801c17 	ldw	r2,112(sp)
    9108:	d811883a 	mov	r8,sp
    910c:	29000044 	addi	r4,r5,1
    9110:	003e7406 	br	8ae4 <__alt_data_end+0xfffe8ae4>
    9114:	00bfffc4 	movi	r2,-1
    9118:	003c5806 	br	827c <__alt_data_end+0xfffe827c>
    911c:	d811883a 	mov	r8,sp
    9120:	003ee806 	br	8cc4 <__alt_data_end+0xfffe8cc4>
    9124:	000b883a 	mov	r5,zero
    9128:	01000044 	movi	r4,1
    912c:	d811883a 	mov	r8,sp
    9130:	003e7c06 	br	8b24 <__alt_data_end+0xfffe8b24>
    9134:	50800104 	addi	r2,r10,4
    9138:	5480000b 	ldhu	r18,0(r10)
    913c:	0027883a 	mov	r19,zero
    9140:	483dcf0e 	bge	r9,zero,8880 <__alt_data_end+0xfffe8880>
    9144:	003fdf06 	br	90c4 <__alt_data_end+0xfffe90c4>
    9148:	54800017 	ldw	r18,0(r10)
    914c:	52800104 	addi	r10,r10,4
    9150:	0027883a 	mov	r19,zero
    9154:	da802215 	stw	r10,136(sp)
    9158:	003d5006 	br	869c <__alt_data_end+0xfffe869c>
    915c:	50800104 	addi	r2,r10,4
    9160:	5480000b 	ldhu	r18,0(r10)
    9164:	0027883a 	mov	r19,zero
    9168:	483f7d0e 	bge	r9,zero,8f60 <__alt_data_end+0xfffe8f60>
    916c:	003ddc06 	br	88e0 <__alt_data_end+0xfffe88e0>
    9170:	d8c02215 	stw	r3,136(sp)
    9174:	0039883a 	mov	fp,zero
    9178:	003ddb06 	br	88e8 <__alt_data_end+0xfffe88e8>
    917c:	02800074 	movhi	r10,1
    9180:	52be1e04 	addi	r10,r10,-1928
    9184:	da802415 	stw	r10,144(sp)
    9188:	003e8306 	br	8b98 <__alt_data_end+0xfffe8b98>
    918c:	d8801c17 	ldw	r2,112(sp)
    9190:	dd002117 	ldw	r20,132(sp)
    9194:	103eb926 	beq	r2,zero,8c7c <__alt_data_end+0xfffe8c7c>
    9198:	d9002017 	ldw	r4,128(sp)
    919c:	d9801a04 	addi	r6,sp,104
    91a0:	a00b883a 	mov	r5,r20
    91a4:	0007e140 	call	7e14 <__sprint_r.part.0>
    91a8:	003eb406 	br	8c7c <__alt_data_end+0xfffe8c7c>
    91ac:	80c00043 	ldbu	r3,1(r16)
    91b0:	a5000814 	ori	r20,r20,32
    91b4:	84000044 	addi	r16,r16,1
    91b8:	18c03fcc 	andi	r3,r3,255
    91bc:	18c0201c 	xori	r3,r3,128
    91c0:	18ffe004 	addi	r3,r3,-128
    91c4:	003bb706 	br	80a4 <__alt_data_end+0xfffe80a4>
    91c8:	a809883a 	mov	r4,r21
    91cc:	d8c02a15 	stw	r3,168(sp)
    91d0:	da002b15 	stw	r8,172(sp)
    91d4:	000087c0 	call	87c <strlen>
    91d8:	d8c02a17 	ldw	r3,168(sp)
    91dc:	1027883a 	mov	r19,r2
    91e0:	df001d83 	ldbu	fp,118(sp)
    91e4:	d8c02215 	stw	r3,136(sp)
    91e8:	0013883a 	mov	r9,zero
    91ec:	da002b17 	ldw	r8,172(sp)
    91f0:	003c4d06 	br	8328 <__alt_data_end+0xfffe8328>
    91f4:	d9402117 	ldw	r5,132(sp)
    91f8:	d9002017 	ldw	r4,128(sp)
    91fc:	d9801a04 	addi	r6,sp,104
    9200:	da402c15 	stw	r9,176(sp)
    9204:	0007e140 	call	7e14 <__sprint_r.part.0>
    9208:	da402c17 	ldw	r9,176(sp)
    920c:	103e9a1e 	bne	r2,zero,8c78 <__alt_data_end+0xfffe8c78>
    9210:	d9401b17 	ldw	r5,108(sp)
    9214:	d8801c17 	ldw	r2,112(sp)
    9218:	d811883a 	mov	r8,sp
    921c:	29000044 	addi	r4,r5,1
    9220:	003e4206 	br	8b2c <__alt_data_end+0xfffe8b2c>
    9224:	d9401b17 	ldw	r5,108(sp)
    9228:	01000074 	movhi	r4,1
    922c:	213e2204 	addi	r4,r4,-1912
    9230:	d9002415 	stw	r4,144(sp)
    9234:	29400044 	addi	r5,r5,1
    9238:	003c6d06 	br	83f0 <__alt_data_end+0xfffe83f0>
    923c:	0039883a 	mov	fp,zero
    9240:	00800084 	movi	r2,2
    9244:	10803fcc 	andi	r2,r2,255
    9248:	01000044 	movi	r4,1
    924c:	11001e26 	beq	r2,r4,92c8 <___vfiprintf_internal_r+0x13a0>
    9250:	01000084 	movi	r4,2
    9254:	11001e1e 	bne	r2,r4,92d0 <___vfiprintf_internal_r+0x13a8>
    9258:	1829883a 	mov	r20,r3
    925c:	003eea06 	br	8e08 <__alt_data_end+0xfffe8e08>
    9260:	a007883a 	mov	r3,r20
    9264:	00800044 	movi	r2,1
    9268:	003ff606 	br	9244 <__alt_data_end+0xfffe9244>
    926c:	00800184 	movi	r2,6
    9270:	1240012e 	bgeu	r2,r9,9278 <___vfiprintf_internal_r+0x1350>
    9274:	1013883a 	mov	r9,r2
    9278:	4827883a 	mov	r19,r9
    927c:	4825883a 	mov	r18,r9
    9280:	48001516 	blt	r9,zero,92d8 <___vfiprintf_internal_r+0x13b0>
    9284:	05400074 	movhi	r21,1
    9288:	d8c02215 	stw	r3,136(sp)
    928c:	ad7dc204 	addi	r21,r21,-2296
    9290:	003d1406 	br	86e4 <__alt_data_end+0xfffe86e4>
    9294:	02800074 	movhi	r10,1
    9298:	52be1e04 	addi	r10,r10,-1928
    929c:	da802415 	stw	r10,144(sp)
    92a0:	200d883a 	mov	r6,r4
    92a4:	003c9106 	br	84ec <__alt_data_end+0xfffe84ec>
    92a8:	5021883a 	mov	r16,r10
    92ac:	0013883a 	mov	r9,zero
    92b0:	003b7d06 	br	80a8 <__alt_data_end+0xfffe80a8>
    92b4:	4827883a 	mov	r19,r9
    92b8:	df001d83 	ldbu	fp,118(sp)
    92bc:	d8c02215 	stw	r3,136(sp)
    92c0:	0013883a 	mov	r9,zero
    92c4:	003c1806 	br	8328 <__alt_data_end+0xfffe8328>
    92c8:	1829883a 	mov	r20,r3
    92cc:	003d1806 	br	8730 <__alt_data_end+0xfffe8730>
    92d0:	1829883a 	mov	r20,r3
    92d4:	003ccd06 	br	860c <__alt_data_end+0xfffe860c>
    92d8:	0025883a 	mov	r18,zero
    92dc:	003fe906 	br	9284 <__alt_data_end+0xfffe9284>
    92e0:	d8802217 	ldw	r2,136(sp)
    92e4:	80c00043 	ldbu	r3,1(r16)
    92e8:	5021883a 	mov	r16,r10
    92ec:	12400017 	ldw	r9,0(r2)
    92f0:	10800104 	addi	r2,r2,4
    92f4:	d8802215 	stw	r2,136(sp)
    92f8:	483faf0e 	bge	r9,zero,91b8 <__alt_data_end+0xfffe91b8>
    92fc:	18c03fcc 	andi	r3,r3,255
    9300:	18c0201c 	xori	r3,r3,128
    9304:	027fffc4 	movi	r9,-1
    9308:	18ffe004 	addi	r3,r3,-128
    930c:	003b6506 	br	80a4 <__alt_data_end+0xfffe80a4>
    9310:	d9c01d85 	stb	r7,118(sp)
    9314:	003ca006 	br	8598 <__alt_data_end+0xfffe8598>
    9318:	d9c01d85 	stb	r7,118(sp)
    931c:	003cad06 	br	85d4 <__alt_data_end+0xfffe85d4>
    9320:	d9c01d85 	stb	r7,118(sp)
    9324:	003d7d06 	br	891c <__alt_data_end+0xfffe891c>
    9328:	d9c01d85 	stb	r7,118(sp)
    932c:	003d5f06 	br	88ac <__alt_data_end+0xfffe88ac>
    9330:	a080004c 	andi	r2,r20,1
    9334:	0039883a 	mov	fp,zero
    9338:	10000526 	beq	r2,zero,9350 <___vfiprintf_internal_r+0x1428>
    933c:	00800c04 	movi	r2,48
    9340:	d88019c5 	stb	r2,103(sp)
    9344:	dcc02717 	ldw	r19,156(sp)
    9348:	dd4019c4 	addi	r21,sp,103
    934c:	003bf606 	br	8328 <__alt_data_end+0xfffe8328>
    9350:	0027883a 	mov	r19,zero
    9354:	dd401a04 	addi	r21,sp,104
    9358:	003bf306 	br	8328 <__alt_data_end+0xfffe8328>
    935c:	d9c01d85 	stb	r7,118(sp)
    9360:	003dc806 	br	8a84 <__alt_data_end+0xfffe8a84>
    9364:	d9c01d85 	stb	r7,118(sp)
    9368:	003d3a06 	br	8854 <__alt_data_end+0xfffe8854>
    936c:	d9c01d85 	stb	r7,118(sp)
    9370:	003d2a06 	br	881c <__alt_data_end+0xfffe881c>
    9374:	d9c01d85 	stb	r7,118(sp)
    9378:	003cde06 	br	86f4 <__alt_data_end+0xfffe86f4>
    937c:	d9c01d85 	stb	r7,118(sp)
    9380:	003cbc06 	br	8674 <__alt_data_end+0xfffe8674>

00009384 <__vfiprintf_internal>:
    9384:	00800074 	movhi	r2,1
    9388:	10851f04 	addi	r2,r2,5244
    938c:	300f883a 	mov	r7,r6
    9390:	280d883a 	mov	r6,r5
    9394:	200b883a 	mov	r5,r4
    9398:	11000017 	ldw	r4,0(r2)
    939c:	0007f281 	jmpi	7f28 <___vfiprintf_internal_r>

000093a0 <__sbprintf>:
    93a0:	2880030b 	ldhu	r2,12(r5)
    93a4:	2ac01917 	ldw	r11,100(r5)
    93a8:	2a80038b 	ldhu	r10,14(r5)
    93ac:	2a400717 	ldw	r9,28(r5)
    93b0:	2a000917 	ldw	r8,36(r5)
    93b4:	defee204 	addi	sp,sp,-1144
    93b8:	00c10004 	movi	r3,1024
    93bc:	dc011a15 	stw	r16,1128(sp)
    93c0:	10bfff4c 	andi	r2,r2,65533
    93c4:	2821883a 	mov	r16,r5
    93c8:	d8cb883a 	add	r5,sp,r3
    93cc:	dc811c15 	stw	r18,1136(sp)
    93d0:	dc411b15 	stw	r17,1132(sp)
    93d4:	dfc11d15 	stw	ra,1140(sp)
    93d8:	2025883a 	mov	r18,r4
    93dc:	d881030d 	sth	r2,1036(sp)
    93e0:	dac11915 	stw	r11,1124(sp)
    93e4:	da81038d 	sth	r10,1038(sp)
    93e8:	da410715 	stw	r9,1052(sp)
    93ec:	da010915 	stw	r8,1060(sp)
    93f0:	dec10015 	stw	sp,1024(sp)
    93f4:	dec10415 	stw	sp,1040(sp)
    93f8:	d8c10215 	stw	r3,1032(sp)
    93fc:	d8c10515 	stw	r3,1044(sp)
    9400:	d8010615 	stw	zero,1048(sp)
    9404:	0007f280 	call	7f28 <___vfiprintf_internal_r>
    9408:	1023883a 	mov	r17,r2
    940c:	10000416 	blt	r2,zero,9420 <__sbprintf+0x80>
    9410:	d9410004 	addi	r5,sp,1024
    9414:	9009883a 	mov	r4,r18
    9418:	00047dc0 	call	47dc <_fflush_r>
    941c:	10000d1e 	bne	r2,zero,9454 <__sbprintf+0xb4>
    9420:	d881030b 	ldhu	r2,1036(sp)
    9424:	1080100c 	andi	r2,r2,64
    9428:	10000326 	beq	r2,zero,9438 <__sbprintf+0x98>
    942c:	8080030b 	ldhu	r2,12(r16)
    9430:	10801014 	ori	r2,r2,64
    9434:	8080030d 	sth	r2,12(r16)
    9438:	8805883a 	mov	r2,r17
    943c:	dfc11d17 	ldw	ra,1140(sp)
    9440:	dc811c17 	ldw	r18,1136(sp)
    9444:	dc411b17 	ldw	r17,1132(sp)
    9448:	dc011a17 	ldw	r16,1128(sp)
    944c:	dec11e04 	addi	sp,sp,1144
    9450:	f800283a 	ret
    9454:	047fffc4 	movi	r17,-1
    9458:	003ff106 	br	9420 <__alt_data_end+0xfffe9420>

0000945c <_write_r>:
    945c:	defffd04 	addi	sp,sp,-12
    9460:	2805883a 	mov	r2,r5
    9464:	dc000015 	stw	r16,0(sp)
    9468:	04000074 	movhi	r16,1
    946c:	dc400115 	stw	r17,4(sp)
    9470:	300b883a 	mov	r5,r6
    9474:	840bef04 	addi	r16,r16,12220
    9478:	2023883a 	mov	r17,r4
    947c:	380d883a 	mov	r6,r7
    9480:	1009883a 	mov	r4,r2
    9484:	dfc00215 	stw	ra,8(sp)
    9488:	80000015 	stw	zero,0(r16)
    948c:	000d6f40 	call	d6f4 <write>
    9490:	00ffffc4 	movi	r3,-1
    9494:	10c00526 	beq	r2,r3,94ac <_write_r+0x50>
    9498:	dfc00217 	ldw	ra,8(sp)
    949c:	dc400117 	ldw	r17,4(sp)
    94a0:	dc000017 	ldw	r16,0(sp)
    94a4:	dec00304 	addi	sp,sp,12
    94a8:	f800283a 	ret
    94ac:	80c00017 	ldw	r3,0(r16)
    94b0:	183ff926 	beq	r3,zero,9498 <__alt_data_end+0xfffe9498>
    94b4:	88c00015 	stw	r3,0(r17)
    94b8:	003ff706 	br	9498 <__alt_data_end+0xfffe9498>

000094bc <_close_r>:
    94bc:	defffd04 	addi	sp,sp,-12
    94c0:	dc000015 	stw	r16,0(sp)
    94c4:	04000074 	movhi	r16,1
    94c8:	dc400115 	stw	r17,4(sp)
    94cc:	840bef04 	addi	r16,r16,12220
    94d0:	2023883a 	mov	r17,r4
    94d4:	2809883a 	mov	r4,r5
    94d8:	dfc00215 	stw	ra,8(sp)
    94dc:	80000015 	stw	zero,0(r16)
    94e0:	000cee40 	call	cee4 <close>
    94e4:	00ffffc4 	movi	r3,-1
    94e8:	10c00526 	beq	r2,r3,9500 <_close_r+0x44>
    94ec:	dfc00217 	ldw	ra,8(sp)
    94f0:	dc400117 	ldw	r17,4(sp)
    94f4:	dc000017 	ldw	r16,0(sp)
    94f8:	dec00304 	addi	sp,sp,12
    94fc:	f800283a 	ret
    9500:	80c00017 	ldw	r3,0(r16)
    9504:	183ff926 	beq	r3,zero,94ec <__alt_data_end+0xfffe94ec>
    9508:	88c00015 	stw	r3,0(r17)
    950c:	003ff706 	br	94ec <__alt_data_end+0xfffe94ec>

00009510 <_calloc_r>:
    9510:	298b383a 	mul	r5,r5,r6
    9514:	defffe04 	addi	sp,sp,-8
    9518:	dfc00115 	stw	ra,4(sp)
    951c:	dc000015 	stw	r16,0(sp)
    9520:	00059180 	call	5918 <_malloc_r>
    9524:	10002926 	beq	r2,zero,95cc <_calloc_r+0xbc>
    9528:	11bfff17 	ldw	r6,-4(r2)
    952c:	1021883a 	mov	r16,r2
    9530:	00bfff04 	movi	r2,-4
    9534:	308c703a 	and	r6,r6,r2
    9538:	00c00904 	movi	r3,36
    953c:	308d883a 	add	r6,r6,r2
    9540:	19801636 	bltu	r3,r6,959c <_calloc_r+0x8c>
    9544:	008004c4 	movi	r2,19
    9548:	11800b2e 	bgeu	r2,r6,9578 <_calloc_r+0x68>
    954c:	80000015 	stw	zero,0(r16)
    9550:	80000115 	stw	zero,4(r16)
    9554:	008006c4 	movi	r2,27
    9558:	11801a2e 	bgeu	r2,r6,95c4 <_calloc_r+0xb4>
    955c:	80000215 	stw	zero,8(r16)
    9560:	80000315 	stw	zero,12(r16)
    9564:	30c0151e 	bne	r6,r3,95bc <_calloc_r+0xac>
    9568:	80000415 	stw	zero,16(r16)
    956c:	80800604 	addi	r2,r16,24
    9570:	80000515 	stw	zero,20(r16)
    9574:	00000106 	br	957c <_calloc_r+0x6c>
    9578:	8005883a 	mov	r2,r16
    957c:	10000015 	stw	zero,0(r2)
    9580:	10000115 	stw	zero,4(r2)
    9584:	10000215 	stw	zero,8(r2)
    9588:	8005883a 	mov	r2,r16
    958c:	dfc00117 	ldw	ra,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00204 	addi	sp,sp,8
    9598:	f800283a 	ret
    959c:	000b883a 	mov	r5,zero
    95a0:	8009883a 	mov	r4,r16
    95a4:	00064ac0 	call	64ac <memset>
    95a8:	8005883a 	mov	r2,r16
    95ac:	dfc00117 	ldw	ra,4(sp)
    95b0:	dc000017 	ldw	r16,0(sp)
    95b4:	dec00204 	addi	sp,sp,8
    95b8:	f800283a 	ret
    95bc:	80800404 	addi	r2,r16,16
    95c0:	003fee06 	br	957c <__alt_data_end+0xfffe957c>
    95c4:	80800204 	addi	r2,r16,8
    95c8:	003fec06 	br	957c <__alt_data_end+0xfffe957c>
    95cc:	0005883a 	mov	r2,zero
    95d0:	003fee06 	br	958c <__alt_data_end+0xfffe958c>

000095d4 <_fclose_r>:
    95d4:	28003926 	beq	r5,zero,96bc <_fclose_r+0xe8>
    95d8:	defffc04 	addi	sp,sp,-16
    95dc:	dc400115 	stw	r17,4(sp)
    95e0:	dc000015 	stw	r16,0(sp)
    95e4:	dfc00315 	stw	ra,12(sp)
    95e8:	dc800215 	stw	r18,8(sp)
    95ec:	2023883a 	mov	r17,r4
    95f0:	2821883a 	mov	r16,r5
    95f4:	20000226 	beq	r4,zero,9600 <_fclose_r+0x2c>
    95f8:	20800e17 	ldw	r2,56(r4)
    95fc:	10002726 	beq	r2,zero,969c <_fclose_r+0xc8>
    9600:	8080030f 	ldh	r2,12(r16)
    9604:	1000071e 	bne	r2,zero,9624 <_fclose_r+0x50>
    9608:	0005883a 	mov	r2,zero
    960c:	dfc00317 	ldw	ra,12(sp)
    9610:	dc800217 	ldw	r18,8(sp)
    9614:	dc400117 	ldw	r17,4(sp)
    9618:	dc000017 	ldw	r16,0(sp)
    961c:	dec00404 	addi	sp,sp,16
    9620:	f800283a 	ret
    9624:	800b883a 	mov	r5,r16
    9628:	8809883a 	mov	r4,r17
    962c:	00045c00 	call	45c0 <__sflush_r>
    9630:	1025883a 	mov	r18,r2
    9634:	80800b17 	ldw	r2,44(r16)
    9638:	10000426 	beq	r2,zero,964c <_fclose_r+0x78>
    963c:	81400717 	ldw	r5,28(r16)
    9640:	8809883a 	mov	r4,r17
    9644:	103ee83a 	callr	r2
    9648:	10001616 	blt	r2,zero,96a4 <_fclose_r+0xd0>
    964c:	8080030b 	ldhu	r2,12(r16)
    9650:	1080200c 	andi	r2,r2,128
    9654:	1000151e 	bne	r2,zero,96ac <_fclose_r+0xd8>
    9658:	81400c17 	ldw	r5,48(r16)
    965c:	28000526 	beq	r5,zero,9674 <_fclose_r+0xa0>
    9660:	80801004 	addi	r2,r16,64
    9664:	28800226 	beq	r5,r2,9670 <_fclose_r+0x9c>
    9668:	8809883a 	mov	r4,r17
    966c:	0004d2c0 	call	4d2c <_free_r>
    9670:	80000c15 	stw	zero,48(r16)
    9674:	81401117 	ldw	r5,68(r16)
    9678:	28000326 	beq	r5,zero,9688 <_fclose_r+0xb4>
    967c:	8809883a 	mov	r4,r17
    9680:	0004d2c0 	call	4d2c <_free_r>
    9684:	80001115 	stw	zero,68(r16)
    9688:	0004bc80 	call	4bc8 <__sfp_lock_acquire>
    968c:	8000030d 	sth	zero,12(r16)
    9690:	0004bcc0 	call	4bcc <__sfp_lock_release>
    9694:	9005883a 	mov	r2,r18
    9698:	003fdc06 	br	960c <__alt_data_end+0xfffe960c>
    969c:	0004bb80 	call	4bb8 <__sinit>
    96a0:	003fd706 	br	9600 <__alt_data_end+0xfffe9600>
    96a4:	04bfffc4 	movi	r18,-1
    96a8:	003fe806 	br	964c <__alt_data_end+0xfffe964c>
    96ac:	81400417 	ldw	r5,16(r16)
    96b0:	8809883a 	mov	r4,r17
    96b4:	0004d2c0 	call	4d2c <_free_r>
    96b8:	003fe706 	br	9658 <__alt_data_end+0xfffe9658>
    96bc:	0005883a 	mov	r2,zero
    96c0:	f800283a 	ret

000096c4 <fclose>:
    96c4:	00800074 	movhi	r2,1
    96c8:	10851f04 	addi	r2,r2,5244
    96cc:	200b883a 	mov	r5,r4
    96d0:	11000017 	ldw	r4,0(r2)
    96d4:	00095d41 	jmpi	95d4 <_fclose_r>

000096d8 <__fputwc>:
    96d8:	defff804 	addi	sp,sp,-32
    96dc:	dcc00415 	stw	r19,16(sp)
    96e0:	dc800315 	stw	r18,12(sp)
    96e4:	dc000115 	stw	r16,4(sp)
    96e8:	dfc00715 	stw	ra,28(sp)
    96ec:	dd400615 	stw	r21,24(sp)
    96f0:	dd000515 	stw	r20,20(sp)
    96f4:	dc400215 	stw	r17,8(sp)
    96f8:	2027883a 	mov	r19,r4
    96fc:	2825883a 	mov	r18,r5
    9700:	3021883a 	mov	r16,r6
    9704:	00057080 	call	5708 <__locale_mb_cur_max>
    9708:	00c00044 	movi	r3,1
    970c:	10c03e26 	beq	r2,r3,9808 <__fputwc+0x130>
    9710:	81c01704 	addi	r7,r16,92
    9714:	900d883a 	mov	r6,r18
    9718:	d80b883a 	mov	r5,sp
    971c:	9809883a 	mov	r4,r19
    9720:	0009ba80 	call	9ba8 <_wcrtomb_r>
    9724:	1029883a 	mov	r20,r2
    9728:	00bfffc4 	movi	r2,-1
    972c:	a0802026 	beq	r20,r2,97b0 <__fputwc+0xd8>
    9730:	d9400003 	ldbu	r5,0(sp)
    9734:	a0001c26 	beq	r20,zero,97a8 <__fputwc+0xd0>
    9738:	0023883a 	mov	r17,zero
    973c:	05400284 	movi	r21,10
    9740:	00000906 	br	9768 <__fputwc+0x90>
    9744:	80800017 	ldw	r2,0(r16)
    9748:	11400005 	stb	r5,0(r2)
    974c:	80c00017 	ldw	r3,0(r16)
    9750:	18c00044 	addi	r3,r3,1
    9754:	80c00015 	stw	r3,0(r16)
    9758:	8c400044 	addi	r17,r17,1
    975c:	dc45883a 	add	r2,sp,r17
    9760:	8d00112e 	bgeu	r17,r20,97a8 <__fputwc+0xd0>
    9764:	11400003 	ldbu	r5,0(r2)
    9768:	80c00217 	ldw	r3,8(r16)
    976c:	18ffffc4 	addi	r3,r3,-1
    9770:	80c00215 	stw	r3,8(r16)
    9774:	183ff30e 	bge	r3,zero,9744 <__alt_data_end+0xfffe9744>
    9778:	80800617 	ldw	r2,24(r16)
    977c:	18801916 	blt	r3,r2,97e4 <__fputwc+0x10c>
    9780:	80800017 	ldw	r2,0(r16)
    9784:	11400005 	stb	r5,0(r2)
    9788:	80800017 	ldw	r2,0(r16)
    978c:	10c00003 	ldbu	r3,0(r2)
    9790:	10800044 	addi	r2,r2,1
    9794:	1d402326 	beq	r3,r21,9824 <__fputwc+0x14c>
    9798:	80800015 	stw	r2,0(r16)
    979c:	8c400044 	addi	r17,r17,1
    97a0:	dc45883a 	add	r2,sp,r17
    97a4:	8d3fef36 	bltu	r17,r20,9764 <__alt_data_end+0xfffe9764>
    97a8:	9005883a 	mov	r2,r18
    97ac:	00000406 	br	97c0 <__fputwc+0xe8>
    97b0:	80c0030b 	ldhu	r3,12(r16)
    97b4:	a005883a 	mov	r2,r20
    97b8:	18c01014 	ori	r3,r3,64
    97bc:	80c0030d 	sth	r3,12(r16)
    97c0:	dfc00717 	ldw	ra,28(sp)
    97c4:	dd400617 	ldw	r21,24(sp)
    97c8:	dd000517 	ldw	r20,20(sp)
    97cc:	dcc00417 	ldw	r19,16(sp)
    97d0:	dc800317 	ldw	r18,12(sp)
    97d4:	dc400217 	ldw	r17,8(sp)
    97d8:	dc000117 	ldw	r16,4(sp)
    97dc:	dec00804 	addi	sp,sp,32
    97e0:	f800283a 	ret
    97e4:	800d883a 	mov	r6,r16
    97e8:	29403fcc 	andi	r5,r5,255
    97ec:	9809883a 	mov	r4,r19
    97f0:	0009a500 	call	9a50 <__swbuf_r>
    97f4:	10bfffe0 	cmpeqi	r2,r2,-1
    97f8:	10803fcc 	andi	r2,r2,255
    97fc:	103fd626 	beq	r2,zero,9758 <__alt_data_end+0xfffe9758>
    9800:	00bfffc4 	movi	r2,-1
    9804:	003fee06 	br	97c0 <__alt_data_end+0xfffe97c0>
    9808:	90ffffc4 	addi	r3,r18,-1
    980c:	01003f84 	movi	r4,254
    9810:	20ffbf36 	bltu	r4,r3,9710 <__alt_data_end+0xfffe9710>
    9814:	900b883a 	mov	r5,r18
    9818:	dc800005 	stb	r18,0(sp)
    981c:	1029883a 	mov	r20,r2
    9820:	003fc506 	br	9738 <__alt_data_end+0xfffe9738>
    9824:	800d883a 	mov	r6,r16
    9828:	a80b883a 	mov	r5,r21
    982c:	9809883a 	mov	r4,r19
    9830:	0009a500 	call	9a50 <__swbuf_r>
    9834:	10bfffe0 	cmpeqi	r2,r2,-1
    9838:	003fef06 	br	97f8 <__alt_data_end+0xfffe97f8>

0000983c <_fputwc_r>:
    983c:	3080030b 	ldhu	r2,12(r6)
    9840:	10c8000c 	andi	r3,r2,8192
    9844:	1800051e 	bne	r3,zero,985c <_fputwc_r+0x20>
    9848:	30c01917 	ldw	r3,100(r6)
    984c:	10880014 	ori	r2,r2,8192
    9850:	3080030d 	sth	r2,12(r6)
    9854:	18880014 	ori	r2,r3,8192
    9858:	30801915 	stw	r2,100(r6)
    985c:	00096d81 	jmpi	96d8 <__fputwc>

00009860 <fputwc>:
    9860:	00800074 	movhi	r2,1
    9864:	defffc04 	addi	sp,sp,-16
    9868:	10851f04 	addi	r2,r2,5244
    986c:	dc000115 	stw	r16,4(sp)
    9870:	14000017 	ldw	r16,0(r2)
    9874:	dc400215 	stw	r17,8(sp)
    9878:	dfc00315 	stw	ra,12(sp)
    987c:	2023883a 	mov	r17,r4
    9880:	80000226 	beq	r16,zero,988c <fputwc+0x2c>
    9884:	80800e17 	ldw	r2,56(r16)
    9888:	10001026 	beq	r2,zero,98cc <fputwc+0x6c>
    988c:	2880030b 	ldhu	r2,12(r5)
    9890:	10c8000c 	andi	r3,r2,8192
    9894:	1800051e 	bne	r3,zero,98ac <fputwc+0x4c>
    9898:	28c01917 	ldw	r3,100(r5)
    989c:	10880014 	ori	r2,r2,8192
    98a0:	2880030d 	sth	r2,12(r5)
    98a4:	18880014 	ori	r2,r3,8192
    98a8:	28801915 	stw	r2,100(r5)
    98ac:	280d883a 	mov	r6,r5
    98b0:	8009883a 	mov	r4,r16
    98b4:	880b883a 	mov	r5,r17
    98b8:	dfc00317 	ldw	ra,12(sp)
    98bc:	dc400217 	ldw	r17,8(sp)
    98c0:	dc000117 	ldw	r16,4(sp)
    98c4:	dec00404 	addi	sp,sp,16
    98c8:	00096d81 	jmpi	96d8 <__fputwc>
    98cc:	8009883a 	mov	r4,r16
    98d0:	d9400015 	stw	r5,0(sp)
    98d4:	0004bb80 	call	4bb8 <__sinit>
    98d8:	d9400017 	ldw	r5,0(sp)
    98dc:	003feb06 	br	988c <__alt_data_end+0xfffe988c>

000098e0 <_fstat_r>:
    98e0:	defffd04 	addi	sp,sp,-12
    98e4:	2805883a 	mov	r2,r5
    98e8:	dc000015 	stw	r16,0(sp)
    98ec:	04000074 	movhi	r16,1
    98f0:	dc400115 	stw	r17,4(sp)
    98f4:	840bef04 	addi	r16,r16,12220
    98f8:	2023883a 	mov	r17,r4
    98fc:	300b883a 	mov	r5,r6
    9900:	1009883a 	mov	r4,r2
    9904:	dfc00215 	stw	ra,8(sp)
    9908:	80000015 	stw	zero,0(r16)
    990c:	000d01c0 	call	d01c <fstat>
    9910:	00ffffc4 	movi	r3,-1
    9914:	10c00526 	beq	r2,r3,992c <_fstat_r+0x4c>
    9918:	dfc00217 	ldw	ra,8(sp)
    991c:	dc400117 	ldw	r17,4(sp)
    9920:	dc000017 	ldw	r16,0(sp)
    9924:	dec00304 	addi	sp,sp,12
    9928:	f800283a 	ret
    992c:	80c00017 	ldw	r3,0(r16)
    9930:	183ff926 	beq	r3,zero,9918 <__alt_data_end+0xfffe9918>
    9934:	88c00015 	stw	r3,0(r17)
    9938:	003ff706 	br	9918 <__alt_data_end+0xfffe9918>

0000993c <_isatty_r>:
    993c:	defffd04 	addi	sp,sp,-12
    9940:	dc000015 	stw	r16,0(sp)
    9944:	04000074 	movhi	r16,1
    9948:	dc400115 	stw	r17,4(sp)
    994c:	840bef04 	addi	r16,r16,12220
    9950:	2023883a 	mov	r17,r4
    9954:	2809883a 	mov	r4,r5
    9958:	dfc00215 	stw	ra,8(sp)
    995c:	80000015 	stw	zero,0(r16)
    9960:	000d1080 	call	d108 <isatty>
    9964:	00ffffc4 	movi	r3,-1
    9968:	10c00526 	beq	r2,r3,9980 <_isatty_r+0x44>
    996c:	dfc00217 	ldw	ra,8(sp)
    9970:	dc400117 	ldw	r17,4(sp)
    9974:	dc000017 	ldw	r16,0(sp)
    9978:	dec00304 	addi	sp,sp,12
    997c:	f800283a 	ret
    9980:	80c00017 	ldw	r3,0(r16)
    9984:	183ff926 	beq	r3,zero,996c <__alt_data_end+0xfffe996c>
    9988:	88c00015 	stw	r3,0(r17)
    998c:	003ff706 	br	996c <__alt_data_end+0xfffe996c>

00009990 <_lseek_r>:
    9990:	defffd04 	addi	sp,sp,-12
    9994:	2805883a 	mov	r2,r5
    9998:	dc000015 	stw	r16,0(sp)
    999c:	04000074 	movhi	r16,1
    99a0:	dc400115 	stw	r17,4(sp)
    99a4:	300b883a 	mov	r5,r6
    99a8:	840bef04 	addi	r16,r16,12220
    99ac:	2023883a 	mov	r17,r4
    99b0:	380d883a 	mov	r6,r7
    99b4:	1009883a 	mov	r4,r2
    99b8:	dfc00215 	stw	ra,8(sp)
    99bc:	80000015 	stw	zero,0(r16)
    99c0:	000d2d40 	call	d2d4 <lseek>
    99c4:	00ffffc4 	movi	r3,-1
    99c8:	10c00526 	beq	r2,r3,99e0 <_lseek_r+0x50>
    99cc:	dfc00217 	ldw	ra,8(sp)
    99d0:	dc400117 	ldw	r17,4(sp)
    99d4:	dc000017 	ldw	r16,0(sp)
    99d8:	dec00304 	addi	sp,sp,12
    99dc:	f800283a 	ret
    99e0:	80c00017 	ldw	r3,0(r16)
    99e4:	183ff926 	beq	r3,zero,99cc <__alt_data_end+0xfffe99cc>
    99e8:	88c00015 	stw	r3,0(r17)
    99ec:	003ff706 	br	99cc <__alt_data_end+0xfffe99cc>

000099f0 <_read_r>:
    99f0:	defffd04 	addi	sp,sp,-12
    99f4:	2805883a 	mov	r2,r5
    99f8:	dc000015 	stw	r16,0(sp)
    99fc:	04000074 	movhi	r16,1
    9a00:	dc400115 	stw	r17,4(sp)
    9a04:	300b883a 	mov	r5,r6
    9a08:	840bef04 	addi	r16,r16,12220
    9a0c:	2023883a 	mov	r17,r4
    9a10:	380d883a 	mov	r6,r7
    9a14:	1009883a 	mov	r4,r2
    9a18:	dfc00215 	stw	ra,8(sp)
    9a1c:	80000015 	stw	zero,0(r16)
    9a20:	000d4a80 	call	d4a8 <read>
    9a24:	00ffffc4 	movi	r3,-1
    9a28:	10c00526 	beq	r2,r3,9a40 <_read_r+0x50>
    9a2c:	dfc00217 	ldw	ra,8(sp)
    9a30:	dc400117 	ldw	r17,4(sp)
    9a34:	dc000017 	ldw	r16,0(sp)
    9a38:	dec00304 	addi	sp,sp,12
    9a3c:	f800283a 	ret
    9a40:	80c00017 	ldw	r3,0(r16)
    9a44:	183ff926 	beq	r3,zero,9a2c <__alt_data_end+0xfffe9a2c>
    9a48:	88c00015 	stw	r3,0(r17)
    9a4c:	003ff706 	br	9a2c <__alt_data_end+0xfffe9a2c>

00009a50 <__swbuf_r>:
    9a50:	defffb04 	addi	sp,sp,-20
    9a54:	dcc00315 	stw	r19,12(sp)
    9a58:	dc800215 	stw	r18,8(sp)
    9a5c:	dc000015 	stw	r16,0(sp)
    9a60:	dfc00415 	stw	ra,16(sp)
    9a64:	dc400115 	stw	r17,4(sp)
    9a68:	2025883a 	mov	r18,r4
    9a6c:	2827883a 	mov	r19,r5
    9a70:	3021883a 	mov	r16,r6
    9a74:	20000226 	beq	r4,zero,9a80 <__swbuf_r+0x30>
    9a78:	20800e17 	ldw	r2,56(r4)
    9a7c:	10004226 	beq	r2,zero,9b88 <__swbuf_r+0x138>
    9a80:	80800617 	ldw	r2,24(r16)
    9a84:	8100030b 	ldhu	r4,12(r16)
    9a88:	80800215 	stw	r2,8(r16)
    9a8c:	2080020c 	andi	r2,r4,8
    9a90:	10003626 	beq	r2,zero,9b6c <__swbuf_r+0x11c>
    9a94:	80c00417 	ldw	r3,16(r16)
    9a98:	18003426 	beq	r3,zero,9b6c <__swbuf_r+0x11c>
    9a9c:	2088000c 	andi	r2,r4,8192
    9aa0:	9c403fcc 	andi	r17,r19,255
    9aa4:	10001a26 	beq	r2,zero,9b10 <__swbuf_r+0xc0>
    9aa8:	80800017 	ldw	r2,0(r16)
    9aac:	81000517 	ldw	r4,20(r16)
    9ab0:	10c7c83a 	sub	r3,r2,r3
    9ab4:	1900200e 	bge	r3,r4,9b38 <__swbuf_r+0xe8>
    9ab8:	18c00044 	addi	r3,r3,1
    9abc:	81000217 	ldw	r4,8(r16)
    9ac0:	11400044 	addi	r5,r2,1
    9ac4:	81400015 	stw	r5,0(r16)
    9ac8:	213fffc4 	addi	r4,r4,-1
    9acc:	81000215 	stw	r4,8(r16)
    9ad0:	14c00005 	stb	r19,0(r2)
    9ad4:	80800517 	ldw	r2,20(r16)
    9ad8:	10c01e26 	beq	r2,r3,9b54 <__swbuf_r+0x104>
    9adc:	8080030b 	ldhu	r2,12(r16)
    9ae0:	1080004c 	andi	r2,r2,1
    9ae4:	10000226 	beq	r2,zero,9af0 <__swbuf_r+0xa0>
    9ae8:	00800284 	movi	r2,10
    9aec:	88801926 	beq	r17,r2,9b54 <__swbuf_r+0x104>
    9af0:	8805883a 	mov	r2,r17
    9af4:	dfc00417 	ldw	ra,16(sp)
    9af8:	dcc00317 	ldw	r19,12(sp)
    9afc:	dc800217 	ldw	r18,8(sp)
    9b00:	dc400117 	ldw	r17,4(sp)
    9b04:	dc000017 	ldw	r16,0(sp)
    9b08:	dec00504 	addi	sp,sp,20
    9b0c:	f800283a 	ret
    9b10:	81401917 	ldw	r5,100(r16)
    9b14:	00b7ffc4 	movi	r2,-8193
    9b18:	21080014 	ori	r4,r4,8192
    9b1c:	2884703a 	and	r2,r5,r2
    9b20:	80801915 	stw	r2,100(r16)
    9b24:	80800017 	ldw	r2,0(r16)
    9b28:	8100030d 	sth	r4,12(r16)
    9b2c:	81000517 	ldw	r4,20(r16)
    9b30:	10c7c83a 	sub	r3,r2,r3
    9b34:	193fe016 	blt	r3,r4,9ab8 <__alt_data_end+0xfffe9ab8>
    9b38:	800b883a 	mov	r5,r16
    9b3c:	9009883a 	mov	r4,r18
    9b40:	00047dc0 	call	47dc <_fflush_r>
    9b44:	1000071e 	bne	r2,zero,9b64 <__swbuf_r+0x114>
    9b48:	80800017 	ldw	r2,0(r16)
    9b4c:	00c00044 	movi	r3,1
    9b50:	003fda06 	br	9abc <__alt_data_end+0xfffe9abc>
    9b54:	800b883a 	mov	r5,r16
    9b58:	9009883a 	mov	r4,r18
    9b5c:	00047dc0 	call	47dc <_fflush_r>
    9b60:	103fe326 	beq	r2,zero,9af0 <__alt_data_end+0xfffe9af0>
    9b64:	00bfffc4 	movi	r2,-1
    9b68:	003fe206 	br	9af4 <__alt_data_end+0xfffe9af4>
    9b6c:	800b883a 	mov	r5,r16
    9b70:	9009883a 	mov	r4,r18
    9b74:	0002be40 	call	2be4 <__swsetup_r>
    9b78:	103ffa1e 	bne	r2,zero,9b64 <__alt_data_end+0xfffe9b64>
    9b7c:	8100030b 	ldhu	r4,12(r16)
    9b80:	80c00417 	ldw	r3,16(r16)
    9b84:	003fc506 	br	9a9c <__alt_data_end+0xfffe9a9c>
    9b88:	0004bb80 	call	4bb8 <__sinit>
    9b8c:	003fbc06 	br	9a80 <__alt_data_end+0xfffe9a80>

00009b90 <__swbuf>:
    9b90:	00800074 	movhi	r2,1
    9b94:	10851f04 	addi	r2,r2,5244
    9b98:	280d883a 	mov	r6,r5
    9b9c:	200b883a 	mov	r5,r4
    9ba0:	11000017 	ldw	r4,0(r2)
    9ba4:	0009a501 	jmpi	9a50 <__swbuf_r>

00009ba8 <_wcrtomb_r>:
    9ba8:	defff604 	addi	sp,sp,-40
    9bac:	00800074 	movhi	r2,1
    9bb0:	dc800815 	stw	r18,32(sp)
    9bb4:	dc400715 	stw	r17,28(sp)
    9bb8:	dc000615 	stw	r16,24(sp)
    9bbc:	10852304 	addi	r2,r2,5260
    9bc0:	dfc00915 	stw	ra,36(sp)
    9bc4:	2021883a 	mov	r16,r4
    9bc8:	3823883a 	mov	r17,r7
    9bcc:	14800017 	ldw	r18,0(r2)
    9bd0:	28001426 	beq	r5,zero,9c24 <_wcrtomb_r+0x7c>
    9bd4:	d9400415 	stw	r5,16(sp)
    9bd8:	d9800515 	stw	r6,20(sp)
    9bdc:	00056fc0 	call	56fc <__locale_charset>
    9be0:	d9800517 	ldw	r6,20(sp)
    9be4:	d9400417 	ldw	r5,16(sp)
    9be8:	100f883a 	mov	r7,r2
    9bec:	dc400015 	stw	r17,0(sp)
    9bf0:	8009883a 	mov	r4,r16
    9bf4:	903ee83a 	callr	r18
    9bf8:	00ffffc4 	movi	r3,-1
    9bfc:	10c0031e 	bne	r2,r3,9c0c <_wcrtomb_r+0x64>
    9c00:	88000015 	stw	zero,0(r17)
    9c04:	00c02284 	movi	r3,138
    9c08:	80c00015 	stw	r3,0(r16)
    9c0c:	dfc00917 	ldw	ra,36(sp)
    9c10:	dc800817 	ldw	r18,32(sp)
    9c14:	dc400717 	ldw	r17,28(sp)
    9c18:	dc000617 	ldw	r16,24(sp)
    9c1c:	dec00a04 	addi	sp,sp,40
    9c20:	f800283a 	ret
    9c24:	00056fc0 	call	56fc <__locale_charset>
    9c28:	100f883a 	mov	r7,r2
    9c2c:	dc400015 	stw	r17,0(sp)
    9c30:	000d883a 	mov	r6,zero
    9c34:	d9400104 	addi	r5,sp,4
    9c38:	8009883a 	mov	r4,r16
    9c3c:	903ee83a 	callr	r18
    9c40:	003fed06 	br	9bf8 <__alt_data_end+0xfffe9bf8>

00009c44 <wcrtomb>:
    9c44:	defff604 	addi	sp,sp,-40
    9c48:	00800074 	movhi	r2,1
    9c4c:	dc800615 	stw	r18,24(sp)
    9c50:	dc400515 	stw	r17,20(sp)
    9c54:	10851f04 	addi	r2,r2,5244
    9c58:	dfc00915 	stw	ra,36(sp)
    9c5c:	dd000815 	stw	r20,32(sp)
    9c60:	dcc00715 	stw	r19,28(sp)
    9c64:	dc000415 	stw	r16,16(sp)
    9c68:	3025883a 	mov	r18,r6
    9c6c:	14400017 	ldw	r17,0(r2)
    9c70:	20001926 	beq	r4,zero,9cd8 <wcrtomb+0x94>
    9c74:	00800074 	movhi	r2,1
    9c78:	10852304 	addi	r2,r2,5260
    9c7c:	15000017 	ldw	r20,0(r2)
    9c80:	2021883a 	mov	r16,r4
    9c84:	2827883a 	mov	r19,r5
    9c88:	00056fc0 	call	56fc <__locale_charset>
    9c8c:	100f883a 	mov	r7,r2
    9c90:	dc800015 	stw	r18,0(sp)
    9c94:	980d883a 	mov	r6,r19
    9c98:	800b883a 	mov	r5,r16
    9c9c:	8809883a 	mov	r4,r17
    9ca0:	a03ee83a 	callr	r20
    9ca4:	00ffffc4 	movi	r3,-1
    9ca8:	10c0031e 	bne	r2,r3,9cb8 <wcrtomb+0x74>
    9cac:	90000015 	stw	zero,0(r18)
    9cb0:	00c02284 	movi	r3,138
    9cb4:	88c00015 	stw	r3,0(r17)
    9cb8:	dfc00917 	ldw	ra,36(sp)
    9cbc:	dd000817 	ldw	r20,32(sp)
    9cc0:	dcc00717 	ldw	r19,28(sp)
    9cc4:	dc800617 	ldw	r18,24(sp)
    9cc8:	dc400517 	ldw	r17,20(sp)
    9ccc:	dc000417 	ldw	r16,16(sp)
    9cd0:	dec00a04 	addi	sp,sp,40
    9cd4:	f800283a 	ret
    9cd8:	00800074 	movhi	r2,1
    9cdc:	10852304 	addi	r2,r2,5260
    9ce0:	14000017 	ldw	r16,0(r2)
    9ce4:	00056fc0 	call	56fc <__locale_charset>
    9ce8:	100f883a 	mov	r7,r2
    9cec:	dc800015 	stw	r18,0(sp)
    9cf0:	000d883a 	mov	r6,zero
    9cf4:	d9400104 	addi	r5,sp,4
    9cf8:	8809883a 	mov	r4,r17
    9cfc:	803ee83a 	callr	r16
    9d00:	003fe806 	br	9ca4 <__alt_data_end+0xfffe9ca4>

00009d04 <__ascii_wctomb>:
    9d04:	28000526 	beq	r5,zero,9d1c <__ascii_wctomb+0x18>
    9d08:	00803fc4 	movi	r2,255
    9d0c:	11800536 	bltu	r2,r6,9d24 <__ascii_wctomb+0x20>
    9d10:	29800005 	stb	r6,0(r5)
    9d14:	00800044 	movi	r2,1
    9d18:	f800283a 	ret
    9d1c:	0005883a 	mov	r2,zero
    9d20:	f800283a 	ret
    9d24:	00802284 	movi	r2,138
    9d28:	20800015 	stw	r2,0(r4)
    9d2c:	00bfffc4 	movi	r2,-1
    9d30:	f800283a 	ret

00009d34 <_wctomb_r>:
    9d34:	00800074 	movhi	r2,1
    9d38:	defff904 	addi	sp,sp,-28
    9d3c:	10852304 	addi	r2,r2,5260
    9d40:	dfc00615 	stw	ra,24(sp)
    9d44:	dc400515 	stw	r17,20(sp)
    9d48:	dc000415 	stw	r16,16(sp)
    9d4c:	3823883a 	mov	r17,r7
    9d50:	14000017 	ldw	r16,0(r2)
    9d54:	d9000115 	stw	r4,4(sp)
    9d58:	d9400215 	stw	r5,8(sp)
    9d5c:	d9800315 	stw	r6,12(sp)
    9d60:	00056fc0 	call	56fc <__locale_charset>
    9d64:	d9800317 	ldw	r6,12(sp)
    9d68:	d9400217 	ldw	r5,8(sp)
    9d6c:	d9000117 	ldw	r4,4(sp)
    9d70:	100f883a 	mov	r7,r2
    9d74:	dc400015 	stw	r17,0(sp)
    9d78:	803ee83a 	callr	r16
    9d7c:	dfc00617 	ldw	ra,24(sp)
    9d80:	dc400517 	ldw	r17,20(sp)
    9d84:	dc000417 	ldw	r16,16(sp)
    9d88:	dec00704 	addi	sp,sp,28
    9d8c:	f800283a 	ret

00009d90 <__udivdi3>:
    9d90:	defff504 	addi	sp,sp,-44
    9d94:	dcc00415 	stw	r19,16(sp)
    9d98:	dc000115 	stw	r16,4(sp)
    9d9c:	dfc00a15 	stw	ra,40(sp)
    9da0:	df000915 	stw	fp,36(sp)
    9da4:	ddc00815 	stw	r23,32(sp)
    9da8:	dd800715 	stw	r22,28(sp)
    9dac:	dd400615 	stw	r21,24(sp)
    9db0:	dd000515 	stw	r20,20(sp)
    9db4:	dc800315 	stw	r18,12(sp)
    9db8:	dc400215 	stw	r17,8(sp)
    9dbc:	2027883a 	mov	r19,r4
    9dc0:	2821883a 	mov	r16,r5
    9dc4:	3800411e 	bne	r7,zero,9ecc <__udivdi3+0x13c>
    9dc8:	3023883a 	mov	r17,r6
    9dcc:	2025883a 	mov	r18,r4
    9dd0:	2980522e 	bgeu	r5,r6,9f1c <__udivdi3+0x18c>
    9dd4:	00bfffd4 	movui	r2,65535
    9dd8:	282d883a 	mov	r22,r5
    9ddc:	1180a836 	bltu	r2,r6,a080 <__udivdi3+0x2f0>
    9de0:	00803fc4 	movi	r2,255
    9de4:	1185803a 	cmpltu	r2,r2,r6
    9de8:	100490fa 	slli	r2,r2,3
    9dec:	3086d83a 	srl	r3,r6,r2
    9df0:	01000074 	movhi	r4,1
    9df4:	213e2604 	addi	r4,r4,-1896
    9df8:	20c7883a 	add	r3,r4,r3
    9dfc:	18c00003 	ldbu	r3,0(r3)
    9e00:	1885883a 	add	r2,r3,r2
    9e04:	00c00804 	movi	r3,32
    9e08:	1887c83a 	sub	r3,r3,r2
    9e0c:	18000526 	beq	r3,zero,9e24 <__udivdi3+0x94>
    9e10:	80e0983a 	sll	r16,r16,r3
    9e14:	9884d83a 	srl	r2,r19,r2
    9e18:	30e2983a 	sll	r17,r6,r3
    9e1c:	98e4983a 	sll	r18,r19,r3
    9e20:	142cb03a 	or	r22,r2,r16
    9e24:	882ad43a 	srli	r21,r17,16
    9e28:	b009883a 	mov	r4,r22
    9e2c:	8d3fffcc 	andi	r20,r17,65535
    9e30:	a80b883a 	mov	r5,r21
    9e34:	00006e40 	call	6e4 <__umodsi3>
    9e38:	b009883a 	mov	r4,r22
    9e3c:	a80b883a 	mov	r5,r21
    9e40:	1027883a 	mov	r19,r2
    9e44:	00006800 	call	680 <__udivsi3>
    9e48:	102d883a 	mov	r22,r2
    9e4c:	9826943a 	slli	r19,r19,16
    9e50:	9004d43a 	srli	r2,r18,16
    9e54:	a5a1383a 	mul	r16,r20,r22
    9e58:	14c4b03a 	or	r2,r2,r19
    9e5c:	1400052e 	bgeu	r2,r16,9e74 <__udivdi3+0xe4>
    9e60:	1445883a 	add	r2,r2,r17
    9e64:	b0ffffc4 	addi	r3,r22,-1
    9e68:	14400136 	bltu	r2,r17,9e70 <__udivdi3+0xe0>
    9e6c:	14012336 	bltu	r2,r16,a2fc <__udivdi3+0x56c>
    9e70:	182d883a 	mov	r22,r3
    9e74:	1421c83a 	sub	r16,r2,r16
    9e78:	a80b883a 	mov	r5,r21
    9e7c:	8009883a 	mov	r4,r16
    9e80:	00006e40 	call	6e4 <__umodsi3>
    9e84:	1027883a 	mov	r19,r2
    9e88:	a80b883a 	mov	r5,r21
    9e8c:	8009883a 	mov	r4,r16
    9e90:	00006800 	call	680 <__udivsi3>
    9e94:	9826943a 	slli	r19,r19,16
    9e98:	a0a9383a 	mul	r20,r20,r2
    9e9c:	94bfffcc 	andi	r18,r18,65535
    9ea0:	94e4b03a 	or	r18,r18,r19
    9ea4:	9500052e 	bgeu	r18,r20,9ebc <__udivdi3+0x12c>
    9ea8:	8ca5883a 	add	r18,r17,r18
    9eac:	10ffffc4 	addi	r3,r2,-1
    9eb0:	9440f136 	bltu	r18,r17,a278 <__udivdi3+0x4e8>
    9eb4:	9500f02e 	bgeu	r18,r20,a278 <__udivdi3+0x4e8>
    9eb8:	10bfff84 	addi	r2,r2,-2
    9ebc:	b00c943a 	slli	r6,r22,16
    9ec0:	0007883a 	mov	r3,zero
    9ec4:	3084b03a 	or	r2,r6,r2
    9ec8:	00005906 	br	a030 <__udivdi3+0x2a0>
    9ecc:	29c05636 	bltu	r5,r7,a028 <__udivdi3+0x298>
    9ed0:	00bfffd4 	movui	r2,65535
    9ed4:	11c0622e 	bgeu	r2,r7,a060 <__udivdi3+0x2d0>
    9ed8:	00804034 	movhi	r2,256
    9edc:	10bfffc4 	addi	r2,r2,-1
    9ee0:	11c0ee36 	bltu	r2,r7,a29c <__udivdi3+0x50c>
    9ee4:	00800404 	movi	r2,16
    9ee8:	3886d83a 	srl	r3,r7,r2
    9eec:	01000074 	movhi	r4,1
    9ef0:	213e2604 	addi	r4,r4,-1896
    9ef4:	20c7883a 	add	r3,r4,r3
    9ef8:	18c00003 	ldbu	r3,0(r3)
    9efc:	05400804 	movi	r21,32
    9f00:	1885883a 	add	r2,r3,r2
    9f04:	a8abc83a 	sub	r21,r21,r2
    9f08:	a800621e 	bne	r21,zero,a094 <__udivdi3+0x304>
    9f0c:	3c00e936 	bltu	r7,r16,a2b4 <__udivdi3+0x524>
    9f10:	9985403a 	cmpgeu	r2,r19,r6
    9f14:	0007883a 	mov	r3,zero
    9f18:	00004506 	br	a030 <__udivdi3+0x2a0>
    9f1c:	3000041e 	bne	r6,zero,9f30 <__udivdi3+0x1a0>
    9f20:	000b883a 	mov	r5,zero
    9f24:	01000044 	movi	r4,1
    9f28:	00006800 	call	680 <__udivsi3>
    9f2c:	1023883a 	mov	r17,r2
    9f30:	00bfffd4 	movui	r2,65535
    9f34:	14404e2e 	bgeu	r2,r17,a070 <__udivdi3+0x2e0>
    9f38:	00804034 	movhi	r2,256
    9f3c:	10bfffc4 	addi	r2,r2,-1
    9f40:	1440d836 	bltu	r2,r17,a2a4 <__udivdi3+0x514>
    9f44:	00800404 	movi	r2,16
    9f48:	8886d83a 	srl	r3,r17,r2
    9f4c:	01000074 	movhi	r4,1
    9f50:	213e2604 	addi	r4,r4,-1896
    9f54:	20c7883a 	add	r3,r4,r3
    9f58:	18c00003 	ldbu	r3,0(r3)
    9f5c:	1885883a 	add	r2,r3,r2
    9f60:	00c00804 	movi	r3,32
    9f64:	1887c83a 	sub	r3,r3,r2
    9f68:	18008f1e 	bne	r3,zero,a1a8 <__udivdi3+0x418>
    9f6c:	882ad43a 	srli	r21,r17,16
    9f70:	8461c83a 	sub	r16,r16,r17
    9f74:	8d3fffcc 	andi	r20,r17,65535
    9f78:	00c00044 	movi	r3,1
    9f7c:	8009883a 	mov	r4,r16
    9f80:	a80b883a 	mov	r5,r21
    9f84:	d8c00015 	stw	r3,0(sp)
    9f88:	00006e40 	call	6e4 <__umodsi3>
    9f8c:	8009883a 	mov	r4,r16
    9f90:	a80b883a 	mov	r5,r21
    9f94:	1027883a 	mov	r19,r2
    9f98:	00006800 	call	680 <__udivsi3>
    9f9c:	9826943a 	slli	r19,r19,16
    9fa0:	9008d43a 	srli	r4,r18,16
    9fa4:	1521383a 	mul	r16,r2,r20
    9fa8:	102d883a 	mov	r22,r2
    9fac:	24c8b03a 	or	r4,r4,r19
    9fb0:	d8c00017 	ldw	r3,0(sp)
    9fb4:	2400052e 	bgeu	r4,r16,9fcc <__udivdi3+0x23c>
    9fb8:	2449883a 	add	r4,r4,r17
    9fbc:	b0bfffc4 	addi	r2,r22,-1
    9fc0:	24400136 	bltu	r4,r17,9fc8 <__udivdi3+0x238>
    9fc4:	2400ca36 	bltu	r4,r16,a2f0 <__udivdi3+0x560>
    9fc8:	102d883a 	mov	r22,r2
    9fcc:	2421c83a 	sub	r16,r4,r16
    9fd0:	a80b883a 	mov	r5,r21
    9fd4:	8009883a 	mov	r4,r16
    9fd8:	d8c00015 	stw	r3,0(sp)
    9fdc:	00006e40 	call	6e4 <__umodsi3>
    9fe0:	1027883a 	mov	r19,r2
    9fe4:	a80b883a 	mov	r5,r21
    9fe8:	8009883a 	mov	r4,r16
    9fec:	00006800 	call	680 <__udivsi3>
    9ff0:	9826943a 	slli	r19,r19,16
    9ff4:	1529383a 	mul	r20,r2,r20
    9ff8:	94bfffcc 	andi	r18,r18,65535
    9ffc:	94e4b03a 	or	r18,r18,r19
    a000:	d8c00017 	ldw	r3,0(sp)
    a004:	9500052e 	bgeu	r18,r20,a01c <__udivdi3+0x28c>
    a008:	8ca5883a 	add	r18,r17,r18
    a00c:	113fffc4 	addi	r4,r2,-1
    a010:	94409736 	bltu	r18,r17,a270 <__udivdi3+0x4e0>
    a014:	9500962e 	bgeu	r18,r20,a270 <__udivdi3+0x4e0>
    a018:	10bfff84 	addi	r2,r2,-2
    a01c:	b00c943a 	slli	r6,r22,16
    a020:	3084b03a 	or	r2,r6,r2
    a024:	00000206 	br	a030 <__udivdi3+0x2a0>
    a028:	0007883a 	mov	r3,zero
    a02c:	0005883a 	mov	r2,zero
    a030:	dfc00a17 	ldw	ra,40(sp)
    a034:	df000917 	ldw	fp,36(sp)
    a038:	ddc00817 	ldw	r23,32(sp)
    a03c:	dd800717 	ldw	r22,28(sp)
    a040:	dd400617 	ldw	r21,24(sp)
    a044:	dd000517 	ldw	r20,20(sp)
    a048:	dcc00417 	ldw	r19,16(sp)
    a04c:	dc800317 	ldw	r18,12(sp)
    a050:	dc400217 	ldw	r17,8(sp)
    a054:	dc000117 	ldw	r16,4(sp)
    a058:	dec00b04 	addi	sp,sp,44
    a05c:	f800283a 	ret
    a060:	00803fc4 	movi	r2,255
    a064:	11c5803a 	cmpltu	r2,r2,r7
    a068:	100490fa 	slli	r2,r2,3
    a06c:	003f9e06 	br	9ee8 <__alt_data_end+0xfffe9ee8>
    a070:	00803fc4 	movi	r2,255
    a074:	1445803a 	cmpltu	r2,r2,r17
    a078:	100490fa 	slli	r2,r2,3
    a07c:	003fb206 	br	9f48 <__alt_data_end+0xfffe9f48>
    a080:	00804034 	movhi	r2,256
    a084:	10bfffc4 	addi	r2,r2,-1
    a088:	11808836 	bltu	r2,r6,a2ac <__udivdi3+0x51c>
    a08c:	00800404 	movi	r2,16
    a090:	003f5606 	br	9dec <__alt_data_end+0xfffe9dec>
    a094:	30aed83a 	srl	r23,r6,r2
    a098:	3d4e983a 	sll	r7,r7,r21
    a09c:	80acd83a 	srl	r22,r16,r2
    a0a0:	9884d83a 	srl	r2,r19,r2
    a0a4:	3deeb03a 	or	r23,r7,r23
    a0a8:	b824d43a 	srli	r18,r23,16
    a0ac:	8560983a 	sll	r16,r16,r21
    a0b0:	b009883a 	mov	r4,r22
    a0b4:	900b883a 	mov	r5,r18
    a0b8:	3568983a 	sll	r20,r6,r21
    a0bc:	1420b03a 	or	r16,r2,r16
    a0c0:	00006e40 	call	6e4 <__umodsi3>
    a0c4:	b009883a 	mov	r4,r22
    a0c8:	900b883a 	mov	r5,r18
    a0cc:	1023883a 	mov	r17,r2
    a0d0:	00006800 	call	680 <__udivsi3>
    a0d4:	8808943a 	slli	r4,r17,16
    a0d8:	bf3fffcc 	andi	fp,r23,65535
    a0dc:	8006d43a 	srli	r3,r16,16
    a0e0:	e0a3383a 	mul	r17,fp,r2
    a0e4:	100d883a 	mov	r6,r2
    a0e8:	1906b03a 	or	r3,r3,r4
    a0ec:	1c40042e 	bgeu	r3,r17,a100 <__udivdi3+0x370>
    a0f0:	1dc7883a 	add	r3,r3,r23
    a0f4:	10bfffc4 	addi	r2,r2,-1
    a0f8:	1dc0752e 	bgeu	r3,r23,a2d0 <__udivdi3+0x540>
    a0fc:	100d883a 	mov	r6,r2
    a100:	1c63c83a 	sub	r17,r3,r17
    a104:	900b883a 	mov	r5,r18
    a108:	8809883a 	mov	r4,r17
    a10c:	d9800015 	stw	r6,0(sp)
    a110:	00006e40 	call	6e4 <__umodsi3>
    a114:	102d883a 	mov	r22,r2
    a118:	8809883a 	mov	r4,r17
    a11c:	900b883a 	mov	r5,r18
    a120:	00006800 	call	680 <__udivsi3>
    a124:	b02c943a 	slli	r22,r22,16
    a128:	e089383a 	mul	r4,fp,r2
    a12c:	843fffcc 	andi	r16,r16,65535
    a130:	85a0b03a 	or	r16,r16,r22
    a134:	d9800017 	ldw	r6,0(sp)
    a138:	8100042e 	bgeu	r16,r4,a14c <__udivdi3+0x3bc>
    a13c:	85e1883a 	add	r16,r16,r23
    a140:	10ffffc4 	addi	r3,r2,-1
    a144:	85c05e2e 	bgeu	r16,r23,a2c0 <__udivdi3+0x530>
    a148:	1805883a 	mov	r2,r3
    a14c:	300c943a 	slli	r6,r6,16
    a150:	a17fffcc 	andi	r5,r20,65535
    a154:	a028d43a 	srli	r20,r20,16
    a158:	3084b03a 	or	r2,r6,r2
    a15c:	10ffffcc 	andi	r3,r2,65535
    a160:	100cd43a 	srli	r6,r2,16
    a164:	194f383a 	mul	r7,r3,r5
    a168:	1d07383a 	mul	r3,r3,r20
    a16c:	314b383a 	mul	r5,r6,r5
    a170:	3810d43a 	srli	r8,r7,16
    a174:	8121c83a 	sub	r16,r16,r4
    a178:	1947883a 	add	r3,r3,r5
    a17c:	40c7883a 	add	r3,r8,r3
    a180:	350d383a 	mul	r6,r6,r20
    a184:	1940022e 	bgeu	r3,r5,a190 <__udivdi3+0x400>
    a188:	01000074 	movhi	r4,1
    a18c:	310d883a 	add	r6,r6,r4
    a190:	1828d43a 	srli	r20,r3,16
    a194:	a18d883a 	add	r6,r20,r6
    a198:	81803e36 	bltu	r16,r6,a294 <__udivdi3+0x504>
    a19c:	81803826 	beq	r16,r6,a280 <__udivdi3+0x4f0>
    a1a0:	0007883a 	mov	r3,zero
    a1a4:	003fa206 	br	a030 <__alt_data_end+0xfffea030>
    a1a8:	88e2983a 	sll	r17,r17,r3
    a1ac:	80a8d83a 	srl	r20,r16,r2
    a1b0:	80e0983a 	sll	r16,r16,r3
    a1b4:	882ad43a 	srli	r21,r17,16
    a1b8:	9884d83a 	srl	r2,r19,r2
    a1bc:	a009883a 	mov	r4,r20
    a1c0:	a80b883a 	mov	r5,r21
    a1c4:	142eb03a 	or	r23,r2,r16
    a1c8:	98e4983a 	sll	r18,r19,r3
    a1cc:	00006e40 	call	6e4 <__umodsi3>
    a1d0:	a009883a 	mov	r4,r20
    a1d4:	a80b883a 	mov	r5,r21
    a1d8:	1021883a 	mov	r16,r2
    a1dc:	00006800 	call	680 <__udivsi3>
    a1e0:	1039883a 	mov	fp,r2
    a1e4:	8d3fffcc 	andi	r20,r17,65535
    a1e8:	8020943a 	slli	r16,r16,16
    a1ec:	b804d43a 	srli	r2,r23,16
    a1f0:	a72d383a 	mul	r22,r20,fp
    a1f4:	1404b03a 	or	r2,r2,r16
    a1f8:	1580062e 	bgeu	r2,r22,a214 <__udivdi3+0x484>
    a1fc:	1445883a 	add	r2,r2,r17
    a200:	e0ffffc4 	addi	r3,fp,-1
    a204:	14403836 	bltu	r2,r17,a2e8 <__udivdi3+0x558>
    a208:	1580372e 	bgeu	r2,r22,a2e8 <__udivdi3+0x558>
    a20c:	e73fff84 	addi	fp,fp,-2
    a210:	1445883a 	add	r2,r2,r17
    a214:	15adc83a 	sub	r22,r2,r22
    a218:	a80b883a 	mov	r5,r21
    a21c:	b009883a 	mov	r4,r22
    a220:	00006e40 	call	6e4 <__umodsi3>
    a224:	1027883a 	mov	r19,r2
    a228:	b009883a 	mov	r4,r22
    a22c:	a80b883a 	mov	r5,r21
    a230:	00006800 	call	680 <__udivsi3>
    a234:	9826943a 	slli	r19,r19,16
    a238:	a0a1383a 	mul	r16,r20,r2
    a23c:	b93fffcc 	andi	r4,r23,65535
    a240:	24c8b03a 	or	r4,r4,r19
    a244:	2400062e 	bgeu	r4,r16,a260 <__udivdi3+0x4d0>
    a248:	2449883a 	add	r4,r4,r17
    a24c:	10ffffc4 	addi	r3,r2,-1
    a250:	24402336 	bltu	r4,r17,a2e0 <__udivdi3+0x550>
    a254:	2400222e 	bgeu	r4,r16,a2e0 <__udivdi3+0x550>
    a258:	10bfff84 	addi	r2,r2,-2
    a25c:	2449883a 	add	r4,r4,r17
    a260:	e038943a 	slli	fp,fp,16
    a264:	2421c83a 	sub	r16,r4,r16
    a268:	e086b03a 	or	r3,fp,r2
    a26c:	003f4306 	br	9f7c <__alt_data_end+0xfffe9f7c>
    a270:	2005883a 	mov	r2,r4
    a274:	003f6906 	br	a01c <__alt_data_end+0xfffea01c>
    a278:	1805883a 	mov	r2,r3
    a27c:	003f0f06 	br	9ebc <__alt_data_end+0xfffe9ebc>
    a280:	1806943a 	slli	r3,r3,16
    a284:	9d66983a 	sll	r19,r19,r21
    a288:	39ffffcc 	andi	r7,r7,65535
    a28c:	19c7883a 	add	r3,r3,r7
    a290:	98ffc32e 	bgeu	r19,r3,a1a0 <__alt_data_end+0xfffea1a0>
    a294:	10bfffc4 	addi	r2,r2,-1
    a298:	003fc106 	br	a1a0 <__alt_data_end+0xfffea1a0>
    a29c:	00800604 	movi	r2,24
    a2a0:	003f1106 	br	9ee8 <__alt_data_end+0xfffe9ee8>
    a2a4:	00800604 	movi	r2,24
    a2a8:	003f2706 	br	9f48 <__alt_data_end+0xfffe9f48>
    a2ac:	00800604 	movi	r2,24
    a2b0:	003ece06 	br	9dec <__alt_data_end+0xfffe9dec>
    a2b4:	0007883a 	mov	r3,zero
    a2b8:	00800044 	movi	r2,1
    a2bc:	003f5c06 	br	a030 <__alt_data_end+0xfffea030>
    a2c0:	813fa12e 	bgeu	r16,r4,a148 <__alt_data_end+0xfffea148>
    a2c4:	10bfff84 	addi	r2,r2,-2
    a2c8:	85e1883a 	add	r16,r16,r23
    a2cc:	003f9f06 	br	a14c <__alt_data_end+0xfffea14c>
    a2d0:	1c7f8a2e 	bgeu	r3,r17,a0fc <__alt_data_end+0xfffea0fc>
    a2d4:	31bfff84 	addi	r6,r6,-2
    a2d8:	1dc7883a 	add	r3,r3,r23
    a2dc:	003f8806 	br	a100 <__alt_data_end+0xfffea100>
    a2e0:	1805883a 	mov	r2,r3
    a2e4:	003fde06 	br	a260 <__alt_data_end+0xfffea260>
    a2e8:	1839883a 	mov	fp,r3
    a2ec:	003fc906 	br	a214 <__alt_data_end+0xfffea214>
    a2f0:	b5bfff84 	addi	r22,r22,-2
    a2f4:	2449883a 	add	r4,r4,r17
    a2f8:	003f3406 	br	9fcc <__alt_data_end+0xfffe9fcc>
    a2fc:	b5bfff84 	addi	r22,r22,-2
    a300:	1445883a 	add	r2,r2,r17
    a304:	003edb06 	br	9e74 <__alt_data_end+0xfffe9e74>

0000a308 <__umoddi3>:
    a308:	defff404 	addi	sp,sp,-48
    a30c:	df000a15 	stw	fp,40(sp)
    a310:	dc400315 	stw	r17,12(sp)
    a314:	dc000215 	stw	r16,8(sp)
    a318:	dfc00b15 	stw	ra,44(sp)
    a31c:	ddc00915 	stw	r23,36(sp)
    a320:	dd800815 	stw	r22,32(sp)
    a324:	dd400715 	stw	r21,28(sp)
    a328:	dd000615 	stw	r20,24(sp)
    a32c:	dcc00515 	stw	r19,20(sp)
    a330:	dc800415 	stw	r18,16(sp)
    a334:	2021883a 	mov	r16,r4
    a338:	2823883a 	mov	r17,r5
    a33c:	2839883a 	mov	fp,r5
    a340:	38003c1e 	bne	r7,zero,a434 <__umoddi3+0x12c>
    a344:	3027883a 	mov	r19,r6
    a348:	2029883a 	mov	r20,r4
    a34c:	2980512e 	bgeu	r5,r6,a494 <__umoddi3+0x18c>
    a350:	00bfffd4 	movui	r2,65535
    a354:	11809a36 	bltu	r2,r6,a5c0 <__umoddi3+0x2b8>
    a358:	01003fc4 	movi	r4,255
    a35c:	2189803a 	cmpltu	r4,r4,r6
    a360:	200890fa 	slli	r4,r4,3
    a364:	3104d83a 	srl	r2,r6,r4
    a368:	00c00074 	movhi	r3,1
    a36c:	18fe2604 	addi	r3,r3,-1896
    a370:	1885883a 	add	r2,r3,r2
    a374:	10c00003 	ldbu	r3,0(r2)
    a378:	00800804 	movi	r2,32
    a37c:	1909883a 	add	r4,r3,r4
    a380:	1125c83a 	sub	r18,r2,r4
    a384:	90000526 	beq	r18,zero,a39c <__umoddi3+0x94>
    a388:	8ca2983a 	sll	r17,r17,r18
    a38c:	8108d83a 	srl	r4,r16,r4
    a390:	34a6983a 	sll	r19,r6,r18
    a394:	84a8983a 	sll	r20,r16,r18
    a398:	2478b03a 	or	fp,r4,r17
    a39c:	982ed43a 	srli	r23,r19,16
    a3a0:	e009883a 	mov	r4,fp
    a3a4:	9dbfffcc 	andi	r22,r19,65535
    a3a8:	b80b883a 	mov	r5,r23
    a3ac:	00006e40 	call	6e4 <__umodsi3>
    a3b0:	e009883a 	mov	r4,fp
    a3b4:	b80b883a 	mov	r5,r23
    a3b8:	102b883a 	mov	r21,r2
    a3bc:	00006800 	call	680 <__udivsi3>
    a3c0:	a806943a 	slli	r3,r21,16
    a3c4:	a008d43a 	srli	r4,r20,16
    a3c8:	b085383a 	mul	r2,r22,r2
    a3cc:	20c8b03a 	or	r4,r4,r3
    a3d0:	2080032e 	bgeu	r4,r2,a3e0 <__umoddi3+0xd8>
    a3d4:	24c9883a 	add	r4,r4,r19
    a3d8:	24c00136 	bltu	r4,r19,a3e0 <__umoddi3+0xd8>
    a3dc:	20811036 	bltu	r4,r2,a820 <__umoddi3+0x518>
    a3e0:	20abc83a 	sub	r21,r4,r2
    a3e4:	b80b883a 	mov	r5,r23
    a3e8:	a809883a 	mov	r4,r21
    a3ec:	00006e40 	call	6e4 <__umodsi3>
    a3f0:	1023883a 	mov	r17,r2
    a3f4:	b80b883a 	mov	r5,r23
    a3f8:	a809883a 	mov	r4,r21
    a3fc:	00006800 	call	680 <__udivsi3>
    a400:	8822943a 	slli	r17,r17,16
    a404:	b085383a 	mul	r2,r22,r2
    a408:	a0ffffcc 	andi	r3,r20,65535
    a40c:	1c46b03a 	or	r3,r3,r17
    a410:	1880042e 	bgeu	r3,r2,a424 <__umoddi3+0x11c>
    a414:	1cc7883a 	add	r3,r3,r19
    a418:	1cc00236 	bltu	r3,r19,a424 <__umoddi3+0x11c>
    a41c:	1880012e 	bgeu	r3,r2,a424 <__umoddi3+0x11c>
    a420:	1cc7883a 	add	r3,r3,r19
    a424:	1885c83a 	sub	r2,r3,r2
    a428:	1484d83a 	srl	r2,r2,r18
    a42c:	0007883a 	mov	r3,zero
    a430:	00004f06 	br	a570 <__umoddi3+0x268>
    a434:	29c04c36 	bltu	r5,r7,a568 <__umoddi3+0x260>
    a438:	00bfffd4 	movui	r2,65535
    a43c:	11c0582e 	bgeu	r2,r7,a5a0 <__umoddi3+0x298>
    a440:	00804034 	movhi	r2,256
    a444:	10bfffc4 	addi	r2,r2,-1
    a448:	11c0e736 	bltu	r2,r7,a7e8 <__umoddi3+0x4e0>
    a44c:	01000404 	movi	r4,16
    a450:	3904d83a 	srl	r2,r7,r4
    a454:	00c00074 	movhi	r3,1
    a458:	18fe2604 	addi	r3,r3,-1896
    a45c:	1885883a 	add	r2,r3,r2
    a460:	14c00003 	ldbu	r19,0(r2)
    a464:	00c00804 	movi	r3,32
    a468:	9927883a 	add	r19,r19,r4
    a46c:	1ce9c83a 	sub	r20,r3,r19
    a470:	a000581e 	bne	r20,zero,a5d4 <__umoddi3+0x2cc>
    a474:	3c400136 	bltu	r7,r17,a47c <__umoddi3+0x174>
    a478:	8180eb36 	bltu	r16,r6,a828 <__umoddi3+0x520>
    a47c:	8185c83a 	sub	r2,r16,r6
    a480:	89e3c83a 	sub	r17,r17,r7
    a484:	8089803a 	cmpltu	r4,r16,r2
    a488:	8939c83a 	sub	fp,r17,r4
    a48c:	e007883a 	mov	r3,fp
    a490:	00003706 	br	a570 <__umoddi3+0x268>
    a494:	3000041e 	bne	r6,zero,a4a8 <__umoddi3+0x1a0>
    a498:	000b883a 	mov	r5,zero
    a49c:	01000044 	movi	r4,1
    a4a0:	00006800 	call	680 <__udivsi3>
    a4a4:	1027883a 	mov	r19,r2
    a4a8:	00bfffd4 	movui	r2,65535
    a4ac:	14c0402e 	bgeu	r2,r19,a5b0 <__umoddi3+0x2a8>
    a4b0:	00804034 	movhi	r2,256
    a4b4:	10bfffc4 	addi	r2,r2,-1
    a4b8:	14c0cd36 	bltu	r2,r19,a7f0 <__umoddi3+0x4e8>
    a4bc:	00800404 	movi	r2,16
    a4c0:	9886d83a 	srl	r3,r19,r2
    a4c4:	01000074 	movhi	r4,1
    a4c8:	213e2604 	addi	r4,r4,-1896
    a4cc:	20c7883a 	add	r3,r4,r3
    a4d0:	18c00003 	ldbu	r3,0(r3)
    a4d4:	1887883a 	add	r3,r3,r2
    a4d8:	00800804 	movi	r2,32
    a4dc:	10e5c83a 	sub	r18,r2,r3
    a4e0:	9000901e 	bne	r18,zero,a724 <__umoddi3+0x41c>
    a4e4:	982cd43a 	srli	r22,r19,16
    a4e8:	8ce3c83a 	sub	r17,r17,r19
    a4ec:	9d7fffcc 	andi	r21,r19,65535
    a4f0:	b00b883a 	mov	r5,r22
    a4f4:	8809883a 	mov	r4,r17
    a4f8:	00006e40 	call	6e4 <__umodsi3>
    a4fc:	8809883a 	mov	r4,r17
    a500:	b00b883a 	mov	r5,r22
    a504:	1021883a 	mov	r16,r2
    a508:	00006800 	call	680 <__udivsi3>
    a50c:	8006943a 	slli	r3,r16,16
    a510:	a008d43a 	srli	r4,r20,16
    a514:	1545383a 	mul	r2,r2,r21
    a518:	20c8b03a 	or	r4,r4,r3
    a51c:	2080042e 	bgeu	r4,r2,a530 <__umoddi3+0x228>
    a520:	24c9883a 	add	r4,r4,r19
    a524:	24c00236 	bltu	r4,r19,a530 <__umoddi3+0x228>
    a528:	2080012e 	bgeu	r4,r2,a530 <__umoddi3+0x228>
    a52c:	24c9883a 	add	r4,r4,r19
    a530:	20a1c83a 	sub	r16,r4,r2
    a534:	b00b883a 	mov	r5,r22
    a538:	8009883a 	mov	r4,r16
    a53c:	00006e40 	call	6e4 <__umodsi3>
    a540:	1023883a 	mov	r17,r2
    a544:	b00b883a 	mov	r5,r22
    a548:	8009883a 	mov	r4,r16
    a54c:	00006800 	call	680 <__udivsi3>
    a550:	8822943a 	slli	r17,r17,16
    a554:	1545383a 	mul	r2,r2,r21
    a558:	a53fffcc 	andi	r20,r20,65535
    a55c:	a446b03a 	or	r3,r20,r17
    a560:	18bfb02e 	bgeu	r3,r2,a424 <__alt_data_end+0xfffea424>
    a564:	003fab06 	br	a414 <__alt_data_end+0xfffea414>
    a568:	2005883a 	mov	r2,r4
    a56c:	2807883a 	mov	r3,r5
    a570:	dfc00b17 	ldw	ra,44(sp)
    a574:	df000a17 	ldw	fp,40(sp)
    a578:	ddc00917 	ldw	r23,36(sp)
    a57c:	dd800817 	ldw	r22,32(sp)
    a580:	dd400717 	ldw	r21,28(sp)
    a584:	dd000617 	ldw	r20,24(sp)
    a588:	dcc00517 	ldw	r19,20(sp)
    a58c:	dc800417 	ldw	r18,16(sp)
    a590:	dc400317 	ldw	r17,12(sp)
    a594:	dc000217 	ldw	r16,8(sp)
    a598:	dec00c04 	addi	sp,sp,48
    a59c:	f800283a 	ret
    a5a0:	04c03fc4 	movi	r19,255
    a5a4:	99c9803a 	cmpltu	r4,r19,r7
    a5a8:	200890fa 	slli	r4,r4,3
    a5ac:	003fa806 	br	a450 <__alt_data_end+0xfffea450>
    a5b0:	00803fc4 	movi	r2,255
    a5b4:	14c5803a 	cmpltu	r2,r2,r19
    a5b8:	100490fa 	slli	r2,r2,3
    a5bc:	003fc006 	br	a4c0 <__alt_data_end+0xfffea4c0>
    a5c0:	00804034 	movhi	r2,256
    a5c4:	10bfffc4 	addi	r2,r2,-1
    a5c8:	11808b36 	bltu	r2,r6,a7f8 <__umoddi3+0x4f0>
    a5cc:	01000404 	movi	r4,16
    a5d0:	003f6406 	br	a364 <__alt_data_end+0xfffea364>
    a5d4:	34c4d83a 	srl	r2,r6,r19
    a5d8:	3d0e983a 	sll	r7,r7,r20
    a5dc:	8cf8d83a 	srl	fp,r17,r19
    a5e0:	8d10983a 	sll	r8,r17,r20
    a5e4:	38aab03a 	or	r21,r7,r2
    a5e8:	a82cd43a 	srli	r22,r21,16
    a5ec:	84e2d83a 	srl	r17,r16,r19
    a5f0:	e009883a 	mov	r4,fp
    a5f4:	b00b883a 	mov	r5,r22
    a5f8:	8a22b03a 	or	r17,r17,r8
    a5fc:	3524983a 	sll	r18,r6,r20
    a600:	00006e40 	call	6e4 <__umodsi3>
    a604:	e009883a 	mov	r4,fp
    a608:	b00b883a 	mov	r5,r22
    a60c:	102f883a 	mov	r23,r2
    a610:	00006800 	call	680 <__udivsi3>
    a614:	100d883a 	mov	r6,r2
    a618:	b808943a 	slli	r4,r23,16
    a61c:	aa3fffcc 	andi	r8,r21,65535
    a620:	8804d43a 	srli	r2,r17,16
    a624:	41af383a 	mul	r23,r8,r6
    a628:	8520983a 	sll	r16,r16,r20
    a62c:	1104b03a 	or	r2,r2,r4
    a630:	15c0042e 	bgeu	r2,r23,a644 <__umoddi3+0x33c>
    a634:	1545883a 	add	r2,r2,r21
    a638:	30ffffc4 	addi	r3,r6,-1
    a63c:	1540742e 	bgeu	r2,r21,a810 <__umoddi3+0x508>
    a640:	180d883a 	mov	r6,r3
    a644:	15efc83a 	sub	r23,r2,r23
    a648:	b00b883a 	mov	r5,r22
    a64c:	b809883a 	mov	r4,r23
    a650:	d9800115 	stw	r6,4(sp)
    a654:	da000015 	stw	r8,0(sp)
    a658:	00006e40 	call	6e4 <__umodsi3>
    a65c:	b00b883a 	mov	r5,r22
    a660:	b809883a 	mov	r4,r23
    a664:	1039883a 	mov	fp,r2
    a668:	00006800 	call	680 <__udivsi3>
    a66c:	da000017 	ldw	r8,0(sp)
    a670:	e038943a 	slli	fp,fp,16
    a674:	100b883a 	mov	r5,r2
    a678:	4089383a 	mul	r4,r8,r2
    a67c:	8a3fffcc 	andi	r8,r17,65535
    a680:	4710b03a 	or	r8,r8,fp
    a684:	d9800117 	ldw	r6,4(sp)
    a688:	4100042e 	bgeu	r8,r4,a69c <__umoddi3+0x394>
    a68c:	4551883a 	add	r8,r8,r21
    a690:	10bfffc4 	addi	r2,r2,-1
    a694:	45405a2e 	bgeu	r8,r21,a800 <__umoddi3+0x4f8>
    a698:	100b883a 	mov	r5,r2
    a69c:	300c943a 	slli	r6,r6,16
    a6a0:	91ffffcc 	andi	r7,r18,65535
    a6a4:	9004d43a 	srli	r2,r18,16
    a6a8:	314cb03a 	or	r6,r6,r5
    a6ac:	317fffcc 	andi	r5,r6,65535
    a6b0:	300cd43a 	srli	r6,r6,16
    a6b4:	29d3383a 	mul	r9,r5,r7
    a6b8:	288b383a 	mul	r5,r5,r2
    a6bc:	31cf383a 	mul	r7,r6,r7
    a6c0:	4806d43a 	srli	r3,r9,16
    a6c4:	4111c83a 	sub	r8,r8,r4
    a6c8:	29cb883a 	add	r5,r5,r7
    a6cc:	194b883a 	add	r5,r3,r5
    a6d0:	3085383a 	mul	r2,r6,r2
    a6d4:	29c0022e 	bgeu	r5,r7,a6e0 <__umoddi3+0x3d8>
    a6d8:	00c00074 	movhi	r3,1
    a6dc:	10c5883a 	add	r2,r2,r3
    a6e0:	2808d43a 	srli	r4,r5,16
    a6e4:	280a943a 	slli	r5,r5,16
    a6e8:	4a7fffcc 	andi	r9,r9,65535
    a6ec:	2085883a 	add	r2,r4,r2
    a6f0:	2a4b883a 	add	r5,r5,r9
    a6f4:	40803636 	bltu	r8,r2,a7d0 <__umoddi3+0x4c8>
    a6f8:	40804d26 	beq	r8,r2,a830 <__umoddi3+0x528>
    a6fc:	4089c83a 	sub	r4,r8,r2
    a700:	280f883a 	mov	r7,r5
    a704:	81cfc83a 	sub	r7,r16,r7
    a708:	81c7803a 	cmpltu	r3,r16,r7
    a70c:	20c7c83a 	sub	r3,r4,r3
    a710:	1cc4983a 	sll	r2,r3,r19
    a714:	3d0ed83a 	srl	r7,r7,r20
    a718:	1d06d83a 	srl	r3,r3,r20
    a71c:	11c4b03a 	or	r2,r2,r7
    a720:	003f9306 	br	a570 <__alt_data_end+0xfffea570>
    a724:	9ca6983a 	sll	r19,r19,r18
    a728:	88e8d83a 	srl	r20,r17,r3
    a72c:	80c4d83a 	srl	r2,r16,r3
    a730:	982cd43a 	srli	r22,r19,16
    a734:	8ca2983a 	sll	r17,r17,r18
    a738:	a009883a 	mov	r4,r20
    a73c:	b00b883a 	mov	r5,r22
    a740:	1478b03a 	or	fp,r2,r17
    a744:	00006e40 	call	6e4 <__umodsi3>
    a748:	a009883a 	mov	r4,r20
    a74c:	b00b883a 	mov	r5,r22
    a750:	1023883a 	mov	r17,r2
    a754:	00006800 	call	680 <__udivsi3>
    a758:	9d7fffcc 	andi	r21,r19,65535
    a75c:	880a943a 	slli	r5,r17,16
    a760:	e008d43a 	srli	r4,fp,16
    a764:	a885383a 	mul	r2,r21,r2
    a768:	84a8983a 	sll	r20,r16,r18
    a76c:	2148b03a 	or	r4,r4,r5
    a770:	2080042e 	bgeu	r4,r2,a784 <__umoddi3+0x47c>
    a774:	24c9883a 	add	r4,r4,r19
    a778:	24c00236 	bltu	r4,r19,a784 <__umoddi3+0x47c>
    a77c:	2080012e 	bgeu	r4,r2,a784 <__umoddi3+0x47c>
    a780:	24c9883a 	add	r4,r4,r19
    a784:	20a3c83a 	sub	r17,r4,r2
    a788:	b00b883a 	mov	r5,r22
    a78c:	8809883a 	mov	r4,r17
    a790:	00006e40 	call	6e4 <__umodsi3>
    a794:	102f883a 	mov	r23,r2
    a798:	8809883a 	mov	r4,r17
    a79c:	b00b883a 	mov	r5,r22
    a7a0:	00006800 	call	680 <__udivsi3>
    a7a4:	b82e943a 	slli	r23,r23,16
    a7a8:	a885383a 	mul	r2,r21,r2
    a7ac:	e13fffcc 	andi	r4,fp,65535
    a7b0:	25c8b03a 	or	r4,r4,r23
    a7b4:	2080042e 	bgeu	r4,r2,a7c8 <__umoddi3+0x4c0>
    a7b8:	24c9883a 	add	r4,r4,r19
    a7bc:	24c00236 	bltu	r4,r19,a7c8 <__umoddi3+0x4c0>
    a7c0:	2080012e 	bgeu	r4,r2,a7c8 <__umoddi3+0x4c0>
    a7c4:	24c9883a 	add	r4,r4,r19
    a7c8:	20a3c83a 	sub	r17,r4,r2
    a7cc:	003f4806 	br	a4f0 <__alt_data_end+0xfffea4f0>
    a7d0:	2c8fc83a 	sub	r7,r5,r18
    a7d4:	1545c83a 	sub	r2,r2,r21
    a7d8:	29cb803a 	cmpltu	r5,r5,r7
    a7dc:	1145c83a 	sub	r2,r2,r5
    a7e0:	4089c83a 	sub	r4,r8,r2
    a7e4:	003fc706 	br	a704 <__alt_data_end+0xfffea704>
    a7e8:	01000604 	movi	r4,24
    a7ec:	003f1806 	br	a450 <__alt_data_end+0xfffea450>
    a7f0:	00800604 	movi	r2,24
    a7f4:	003f3206 	br	a4c0 <__alt_data_end+0xfffea4c0>
    a7f8:	01000604 	movi	r4,24
    a7fc:	003ed906 	br	a364 <__alt_data_end+0xfffea364>
    a800:	413fa52e 	bgeu	r8,r4,a698 <__alt_data_end+0xfffea698>
    a804:	297fff84 	addi	r5,r5,-2
    a808:	4551883a 	add	r8,r8,r21
    a80c:	003fa306 	br	a69c <__alt_data_end+0xfffea69c>
    a810:	15ff8b2e 	bgeu	r2,r23,a640 <__alt_data_end+0xfffea640>
    a814:	31bfff84 	addi	r6,r6,-2
    a818:	1545883a 	add	r2,r2,r21
    a81c:	003f8906 	br	a644 <__alt_data_end+0xfffea644>
    a820:	24c9883a 	add	r4,r4,r19
    a824:	003eee06 	br	a3e0 <__alt_data_end+0xfffea3e0>
    a828:	8005883a 	mov	r2,r16
    a82c:	003f1706 	br	a48c <__alt_data_end+0xfffea48c>
    a830:	817fe736 	bltu	r16,r5,a7d0 <__alt_data_end+0xfffea7d0>
    a834:	280f883a 	mov	r7,r5
    a838:	0009883a 	mov	r4,zero
    a83c:	003fb106 	br	a704 <__alt_data_end+0xfffea704>

0000a840 <__adddf3>:
    a840:	02c00434 	movhi	r11,16
    a844:	5affffc4 	addi	r11,r11,-1
    a848:	2806d7fa 	srli	r3,r5,31
    a84c:	2ad4703a 	and	r10,r5,r11
    a850:	3ad2703a 	and	r9,r7,r11
    a854:	3804d53a 	srli	r2,r7,20
    a858:	3018d77a 	srli	r12,r6,29
    a85c:	280ad53a 	srli	r5,r5,20
    a860:	501490fa 	slli	r10,r10,3
    a864:	2010d77a 	srli	r8,r4,29
    a868:	481290fa 	slli	r9,r9,3
    a86c:	380ed7fa 	srli	r7,r7,31
    a870:	defffb04 	addi	sp,sp,-20
    a874:	dc800215 	stw	r18,8(sp)
    a878:	dc400115 	stw	r17,4(sp)
    a87c:	dc000015 	stw	r16,0(sp)
    a880:	dfc00415 	stw	ra,16(sp)
    a884:	dcc00315 	stw	r19,12(sp)
    a888:	1c803fcc 	andi	r18,r3,255
    a88c:	2c01ffcc 	andi	r16,r5,2047
    a890:	5210b03a 	or	r8,r10,r8
    a894:	202290fa 	slli	r17,r4,3
    a898:	1081ffcc 	andi	r2,r2,2047
    a89c:	4b12b03a 	or	r9,r9,r12
    a8a0:	300c90fa 	slli	r6,r6,3
    a8a4:	91c07526 	beq	r18,r7,aa7c <__adddf3+0x23c>
    a8a8:	8087c83a 	sub	r3,r16,r2
    a8ac:	00c0ab0e 	bge	zero,r3,ab5c <__adddf3+0x31c>
    a8b0:	10002a1e 	bne	r2,zero,a95c <__adddf3+0x11c>
    a8b4:	4984b03a 	or	r2,r9,r6
    a8b8:	1000961e 	bne	r2,zero,ab14 <__adddf3+0x2d4>
    a8bc:	888001cc 	andi	r2,r17,7
    a8c0:	10000726 	beq	r2,zero,a8e0 <__adddf3+0xa0>
    a8c4:	888003cc 	andi	r2,r17,15
    a8c8:	00c00104 	movi	r3,4
    a8cc:	10c00426 	beq	r2,r3,a8e0 <__adddf3+0xa0>
    a8d0:	88c7883a 	add	r3,r17,r3
    a8d4:	1c63803a 	cmpltu	r17,r3,r17
    a8d8:	4451883a 	add	r8,r8,r17
    a8dc:	1823883a 	mov	r17,r3
    a8e0:	4080202c 	andhi	r2,r8,128
    a8e4:	10005926 	beq	r2,zero,aa4c <__adddf3+0x20c>
    a8e8:	84000044 	addi	r16,r16,1
    a8ec:	0081ffc4 	movi	r2,2047
    a8f0:	8080ba26 	beq	r16,r2,abdc <__adddf3+0x39c>
    a8f4:	00bfe034 	movhi	r2,65408
    a8f8:	10bfffc4 	addi	r2,r2,-1
    a8fc:	4090703a 	and	r8,r8,r2
    a900:	4004977a 	slli	r2,r8,29
    a904:	4010927a 	slli	r8,r8,9
    a908:	8822d0fa 	srli	r17,r17,3
    a90c:	8401ffcc 	andi	r16,r16,2047
    a910:	4010d33a 	srli	r8,r8,12
    a914:	9007883a 	mov	r3,r18
    a918:	1444b03a 	or	r2,r2,r17
    a91c:	8401ffcc 	andi	r16,r16,2047
    a920:	8020953a 	slli	r16,r16,20
    a924:	18c03fcc 	andi	r3,r3,255
    a928:	01000434 	movhi	r4,16
    a92c:	213fffc4 	addi	r4,r4,-1
    a930:	180697fa 	slli	r3,r3,31
    a934:	4110703a 	and	r8,r8,r4
    a938:	4410b03a 	or	r8,r8,r16
    a93c:	40c6b03a 	or	r3,r8,r3
    a940:	dfc00417 	ldw	ra,16(sp)
    a944:	dcc00317 	ldw	r19,12(sp)
    a948:	dc800217 	ldw	r18,8(sp)
    a94c:	dc400117 	ldw	r17,4(sp)
    a950:	dc000017 	ldw	r16,0(sp)
    a954:	dec00504 	addi	sp,sp,20
    a958:	f800283a 	ret
    a95c:	0081ffc4 	movi	r2,2047
    a960:	80bfd626 	beq	r16,r2,a8bc <__alt_data_end+0xfffea8bc>
    a964:	4a402034 	orhi	r9,r9,128
    a968:	00800e04 	movi	r2,56
    a96c:	10c09f16 	blt	r2,r3,abec <__adddf3+0x3ac>
    a970:	008007c4 	movi	r2,31
    a974:	10c0c216 	blt	r2,r3,ac80 <__adddf3+0x440>
    a978:	00800804 	movi	r2,32
    a97c:	10c5c83a 	sub	r2,r2,r3
    a980:	488a983a 	sll	r5,r9,r2
    a984:	30c8d83a 	srl	r4,r6,r3
    a988:	3084983a 	sll	r2,r6,r2
    a98c:	48c6d83a 	srl	r3,r9,r3
    a990:	290cb03a 	or	r6,r5,r4
    a994:	1004c03a 	cmpne	r2,r2,zero
    a998:	308cb03a 	or	r6,r6,r2
    a99c:	898dc83a 	sub	r6,r17,r6
    a9a0:	89a3803a 	cmpltu	r17,r17,r6
    a9a4:	40d1c83a 	sub	r8,r8,r3
    a9a8:	4451c83a 	sub	r8,r8,r17
    a9ac:	3023883a 	mov	r17,r6
    a9b0:	4080202c 	andhi	r2,r8,128
    a9b4:	10002326 	beq	r2,zero,aa44 <__adddf3+0x204>
    a9b8:	04c02034 	movhi	r19,128
    a9bc:	9cffffc4 	addi	r19,r19,-1
    a9c0:	44e6703a 	and	r19,r8,r19
    a9c4:	98007626 	beq	r19,zero,aba0 <__adddf3+0x360>
    a9c8:	9809883a 	mov	r4,r19
    a9cc:	000ce440 	call	ce44 <__clzsi2>
    a9d0:	10fffe04 	addi	r3,r2,-8
    a9d4:	010007c4 	movi	r4,31
    a9d8:	20c07716 	blt	r4,r3,abb8 <__adddf3+0x378>
    a9dc:	00800804 	movi	r2,32
    a9e0:	10c5c83a 	sub	r2,r2,r3
    a9e4:	8884d83a 	srl	r2,r17,r2
    a9e8:	98d0983a 	sll	r8,r19,r3
    a9ec:	88e2983a 	sll	r17,r17,r3
    a9f0:	1204b03a 	or	r2,r2,r8
    a9f4:	1c007416 	blt	r3,r16,abc8 <__adddf3+0x388>
    a9f8:	1c21c83a 	sub	r16,r3,r16
    a9fc:	82000044 	addi	r8,r16,1
    aa00:	00c007c4 	movi	r3,31
    aa04:	1a009116 	blt	r3,r8,ac4c <__adddf3+0x40c>
    aa08:	00c00804 	movi	r3,32
    aa0c:	1a07c83a 	sub	r3,r3,r8
    aa10:	8a08d83a 	srl	r4,r17,r8
    aa14:	88e2983a 	sll	r17,r17,r3
    aa18:	10c6983a 	sll	r3,r2,r3
    aa1c:	1210d83a 	srl	r8,r2,r8
    aa20:	8804c03a 	cmpne	r2,r17,zero
    aa24:	1906b03a 	or	r3,r3,r4
    aa28:	18a2b03a 	or	r17,r3,r2
    aa2c:	0021883a 	mov	r16,zero
    aa30:	003fa206 	br	a8bc <__alt_data_end+0xfffea8bc>
    aa34:	1890b03a 	or	r8,r3,r2
    aa38:	40017d26 	beq	r8,zero,b030 <__adddf3+0x7f0>
    aa3c:	1011883a 	mov	r8,r2
    aa40:	1823883a 	mov	r17,r3
    aa44:	888001cc 	andi	r2,r17,7
    aa48:	103f9e1e 	bne	r2,zero,a8c4 <__alt_data_end+0xfffea8c4>
    aa4c:	4004977a 	slli	r2,r8,29
    aa50:	8822d0fa 	srli	r17,r17,3
    aa54:	4010d0fa 	srli	r8,r8,3
    aa58:	9007883a 	mov	r3,r18
    aa5c:	1444b03a 	or	r2,r2,r17
    aa60:	0101ffc4 	movi	r4,2047
    aa64:	81002426 	beq	r16,r4,aaf8 <__adddf3+0x2b8>
    aa68:	8120703a 	and	r16,r16,r4
    aa6c:	01000434 	movhi	r4,16
    aa70:	213fffc4 	addi	r4,r4,-1
    aa74:	4110703a 	and	r8,r8,r4
    aa78:	003fa806 	br	a91c <__alt_data_end+0xfffea91c>
    aa7c:	8089c83a 	sub	r4,r16,r2
    aa80:	01005e0e 	bge	zero,r4,abfc <__adddf3+0x3bc>
    aa84:	10002b26 	beq	r2,zero,ab34 <__adddf3+0x2f4>
    aa88:	0081ffc4 	movi	r2,2047
    aa8c:	80bf8b26 	beq	r16,r2,a8bc <__alt_data_end+0xfffea8bc>
    aa90:	4a402034 	orhi	r9,r9,128
    aa94:	00800e04 	movi	r2,56
    aa98:	1100a40e 	bge	r2,r4,ad2c <__adddf3+0x4ec>
    aa9c:	498cb03a 	or	r6,r9,r6
    aaa0:	300ac03a 	cmpne	r5,r6,zero
    aaa4:	0013883a 	mov	r9,zero
    aaa8:	2c4b883a 	add	r5,r5,r17
    aaac:	2c63803a 	cmpltu	r17,r5,r17
    aab0:	4a11883a 	add	r8,r9,r8
    aab4:	8a11883a 	add	r8,r17,r8
    aab8:	2823883a 	mov	r17,r5
    aabc:	4080202c 	andhi	r2,r8,128
    aac0:	103fe026 	beq	r2,zero,aa44 <__alt_data_end+0xfffeaa44>
    aac4:	84000044 	addi	r16,r16,1
    aac8:	0081ffc4 	movi	r2,2047
    aacc:	8080d226 	beq	r16,r2,ae18 <__adddf3+0x5d8>
    aad0:	00bfe034 	movhi	r2,65408
    aad4:	10bfffc4 	addi	r2,r2,-1
    aad8:	4090703a 	and	r8,r8,r2
    aadc:	880ad07a 	srli	r5,r17,1
    aae0:	400897fa 	slli	r4,r8,31
    aae4:	88c0004c 	andi	r3,r17,1
    aae8:	28e2b03a 	or	r17,r5,r3
    aaec:	4010d07a 	srli	r8,r8,1
    aaf0:	2462b03a 	or	r17,r4,r17
    aaf4:	003f7106 	br	a8bc <__alt_data_end+0xfffea8bc>
    aaf8:	4088b03a 	or	r4,r8,r2
    aafc:	20014526 	beq	r4,zero,b014 <__adddf3+0x7d4>
    ab00:	01000434 	movhi	r4,16
    ab04:	42000234 	orhi	r8,r8,8
    ab08:	213fffc4 	addi	r4,r4,-1
    ab0c:	4110703a 	and	r8,r8,r4
    ab10:	003f8206 	br	a91c <__alt_data_end+0xfffea91c>
    ab14:	18ffffc4 	addi	r3,r3,-1
    ab18:	1800491e 	bne	r3,zero,ac40 <__adddf3+0x400>
    ab1c:	898bc83a 	sub	r5,r17,r6
    ab20:	8963803a 	cmpltu	r17,r17,r5
    ab24:	4251c83a 	sub	r8,r8,r9
    ab28:	4451c83a 	sub	r8,r8,r17
    ab2c:	2823883a 	mov	r17,r5
    ab30:	003f9f06 	br	a9b0 <__alt_data_end+0xfffea9b0>
    ab34:	4984b03a 	or	r2,r9,r6
    ab38:	103f6026 	beq	r2,zero,a8bc <__alt_data_end+0xfffea8bc>
    ab3c:	213fffc4 	addi	r4,r4,-1
    ab40:	2000931e 	bne	r4,zero,ad90 <__adddf3+0x550>
    ab44:	898d883a 	add	r6,r17,r6
    ab48:	3463803a 	cmpltu	r17,r6,r17
    ab4c:	4251883a 	add	r8,r8,r9
    ab50:	8a11883a 	add	r8,r17,r8
    ab54:	3023883a 	mov	r17,r6
    ab58:	003fd806 	br	aabc <__alt_data_end+0xfffeaabc>
    ab5c:	1800541e 	bne	r3,zero,acb0 <__adddf3+0x470>
    ab60:	80800044 	addi	r2,r16,1
    ab64:	1081ffcc 	andi	r2,r2,2047
    ab68:	00c00044 	movi	r3,1
    ab6c:	1880a00e 	bge	r3,r2,adf0 <__adddf3+0x5b0>
    ab70:	8989c83a 	sub	r4,r17,r6
    ab74:	8905803a 	cmpltu	r2,r17,r4
    ab78:	4267c83a 	sub	r19,r8,r9
    ab7c:	98a7c83a 	sub	r19,r19,r2
    ab80:	9880202c 	andhi	r2,r19,128
    ab84:	10006326 	beq	r2,zero,ad14 <__adddf3+0x4d4>
    ab88:	3463c83a 	sub	r17,r6,r17
    ab8c:	4a07c83a 	sub	r3,r9,r8
    ab90:	344d803a 	cmpltu	r6,r6,r17
    ab94:	19a7c83a 	sub	r19,r3,r6
    ab98:	3825883a 	mov	r18,r7
    ab9c:	983f8a1e 	bne	r19,zero,a9c8 <__alt_data_end+0xfffea9c8>
    aba0:	8809883a 	mov	r4,r17
    aba4:	000ce440 	call	ce44 <__clzsi2>
    aba8:	10800804 	addi	r2,r2,32
    abac:	10fffe04 	addi	r3,r2,-8
    abb0:	010007c4 	movi	r4,31
    abb4:	20ff890e 	bge	r4,r3,a9dc <__alt_data_end+0xfffea9dc>
    abb8:	10bff604 	addi	r2,r2,-40
    abbc:	8884983a 	sll	r2,r17,r2
    abc0:	0023883a 	mov	r17,zero
    abc4:	1c3f8c0e 	bge	r3,r16,a9f8 <__alt_data_end+0xfffea9f8>
    abc8:	023fe034 	movhi	r8,65408
    abcc:	423fffc4 	addi	r8,r8,-1
    abd0:	80e1c83a 	sub	r16,r16,r3
    abd4:	1210703a 	and	r8,r2,r8
    abd8:	003f3806 	br	a8bc <__alt_data_end+0xfffea8bc>
    abdc:	9007883a 	mov	r3,r18
    abe0:	0011883a 	mov	r8,zero
    abe4:	0005883a 	mov	r2,zero
    abe8:	003f4c06 	br	a91c <__alt_data_end+0xfffea91c>
    abec:	498cb03a 	or	r6,r9,r6
    abf0:	300cc03a 	cmpne	r6,r6,zero
    abf4:	0007883a 	mov	r3,zero
    abf8:	003f6806 	br	a99c <__alt_data_end+0xfffea99c>
    abfc:	20009c1e 	bne	r4,zero,ae70 <__adddf3+0x630>
    ac00:	80800044 	addi	r2,r16,1
    ac04:	1141ffcc 	andi	r5,r2,2047
    ac08:	01000044 	movi	r4,1
    ac0c:	2140670e 	bge	r4,r5,adac <__adddf3+0x56c>
    ac10:	0101ffc4 	movi	r4,2047
    ac14:	11007f26 	beq	r2,r4,ae14 <__adddf3+0x5d4>
    ac18:	898d883a 	add	r6,r17,r6
    ac1c:	4247883a 	add	r3,r8,r9
    ac20:	3451803a 	cmpltu	r8,r6,r17
    ac24:	40d1883a 	add	r8,r8,r3
    ac28:	402297fa 	slli	r17,r8,31
    ac2c:	300cd07a 	srli	r6,r6,1
    ac30:	4010d07a 	srli	r8,r8,1
    ac34:	1021883a 	mov	r16,r2
    ac38:	89a2b03a 	or	r17,r17,r6
    ac3c:	003f1f06 	br	a8bc <__alt_data_end+0xfffea8bc>
    ac40:	0081ffc4 	movi	r2,2047
    ac44:	80bf481e 	bne	r16,r2,a968 <__alt_data_end+0xfffea968>
    ac48:	003f1c06 	br	a8bc <__alt_data_end+0xfffea8bc>
    ac4c:	843ff844 	addi	r16,r16,-31
    ac50:	01000804 	movi	r4,32
    ac54:	1406d83a 	srl	r3,r2,r16
    ac58:	41005026 	beq	r8,r4,ad9c <__adddf3+0x55c>
    ac5c:	01001004 	movi	r4,64
    ac60:	2211c83a 	sub	r8,r4,r8
    ac64:	1204983a 	sll	r2,r2,r8
    ac68:	88a2b03a 	or	r17,r17,r2
    ac6c:	8822c03a 	cmpne	r17,r17,zero
    ac70:	1c62b03a 	or	r17,r3,r17
    ac74:	0011883a 	mov	r8,zero
    ac78:	0021883a 	mov	r16,zero
    ac7c:	003f7106 	br	aa44 <__alt_data_end+0xfffeaa44>
    ac80:	193ff804 	addi	r4,r3,-32
    ac84:	00800804 	movi	r2,32
    ac88:	4908d83a 	srl	r4,r9,r4
    ac8c:	18804526 	beq	r3,r2,ada4 <__adddf3+0x564>
    ac90:	00801004 	movi	r2,64
    ac94:	10c5c83a 	sub	r2,r2,r3
    ac98:	4886983a 	sll	r3,r9,r2
    ac9c:	198cb03a 	or	r6,r3,r6
    aca0:	300cc03a 	cmpne	r6,r6,zero
    aca4:	218cb03a 	or	r6,r4,r6
    aca8:	0007883a 	mov	r3,zero
    acac:	003f3b06 	br	a99c <__alt_data_end+0xfffea99c>
    acb0:	80002a26 	beq	r16,zero,ad5c <__adddf3+0x51c>
    acb4:	0101ffc4 	movi	r4,2047
    acb8:	11006826 	beq	r2,r4,ae5c <__adddf3+0x61c>
    acbc:	00c7c83a 	sub	r3,zero,r3
    acc0:	42002034 	orhi	r8,r8,128
    acc4:	01000e04 	movi	r4,56
    acc8:	20c07c16 	blt	r4,r3,aebc <__adddf3+0x67c>
    accc:	010007c4 	movi	r4,31
    acd0:	20c0da16 	blt	r4,r3,b03c <__adddf3+0x7fc>
    acd4:	01000804 	movi	r4,32
    acd8:	20c9c83a 	sub	r4,r4,r3
    acdc:	4114983a 	sll	r10,r8,r4
    ace0:	88cad83a 	srl	r5,r17,r3
    ace4:	8908983a 	sll	r4,r17,r4
    ace8:	40c6d83a 	srl	r3,r8,r3
    acec:	5162b03a 	or	r17,r10,r5
    acf0:	2008c03a 	cmpne	r4,r4,zero
    acf4:	8922b03a 	or	r17,r17,r4
    acf8:	3463c83a 	sub	r17,r6,r17
    acfc:	48c7c83a 	sub	r3,r9,r3
    ad00:	344d803a 	cmpltu	r6,r6,r17
    ad04:	1991c83a 	sub	r8,r3,r6
    ad08:	1021883a 	mov	r16,r2
    ad0c:	3825883a 	mov	r18,r7
    ad10:	003f2706 	br	a9b0 <__alt_data_end+0xfffea9b0>
    ad14:	24d0b03a 	or	r8,r4,r19
    ad18:	40001b1e 	bne	r8,zero,ad88 <__adddf3+0x548>
    ad1c:	0005883a 	mov	r2,zero
    ad20:	0007883a 	mov	r3,zero
    ad24:	0021883a 	mov	r16,zero
    ad28:	003f4d06 	br	aa60 <__alt_data_end+0xfffeaa60>
    ad2c:	008007c4 	movi	r2,31
    ad30:	11003c16 	blt	r2,r4,ae24 <__adddf3+0x5e4>
    ad34:	00800804 	movi	r2,32
    ad38:	1105c83a 	sub	r2,r2,r4
    ad3c:	488e983a 	sll	r7,r9,r2
    ad40:	310ad83a 	srl	r5,r6,r4
    ad44:	3084983a 	sll	r2,r6,r2
    ad48:	4912d83a 	srl	r9,r9,r4
    ad4c:	394ab03a 	or	r5,r7,r5
    ad50:	1004c03a 	cmpne	r2,r2,zero
    ad54:	288ab03a 	or	r5,r5,r2
    ad58:	003f5306 	br	aaa8 <__alt_data_end+0xfffeaaa8>
    ad5c:	4448b03a 	or	r4,r8,r17
    ad60:	20003e26 	beq	r4,zero,ae5c <__adddf3+0x61c>
    ad64:	00c6303a 	nor	r3,zero,r3
    ad68:	18003a1e 	bne	r3,zero,ae54 <__adddf3+0x614>
    ad6c:	3463c83a 	sub	r17,r6,r17
    ad70:	4a07c83a 	sub	r3,r9,r8
    ad74:	344d803a 	cmpltu	r6,r6,r17
    ad78:	1991c83a 	sub	r8,r3,r6
    ad7c:	1021883a 	mov	r16,r2
    ad80:	3825883a 	mov	r18,r7
    ad84:	003f0a06 	br	a9b0 <__alt_data_end+0xfffea9b0>
    ad88:	2023883a 	mov	r17,r4
    ad8c:	003f0d06 	br	a9c4 <__alt_data_end+0xfffea9c4>
    ad90:	0081ffc4 	movi	r2,2047
    ad94:	80bf3f1e 	bne	r16,r2,aa94 <__alt_data_end+0xfffeaa94>
    ad98:	003ec806 	br	a8bc <__alt_data_end+0xfffea8bc>
    ad9c:	0005883a 	mov	r2,zero
    ada0:	003fb106 	br	ac68 <__alt_data_end+0xfffeac68>
    ada4:	0007883a 	mov	r3,zero
    ada8:	003fbc06 	br	ac9c <__alt_data_end+0xfffeac9c>
    adac:	4444b03a 	or	r2,r8,r17
    adb0:	8000871e 	bne	r16,zero,afd0 <__adddf3+0x790>
    adb4:	1000ba26 	beq	r2,zero,b0a0 <__adddf3+0x860>
    adb8:	4984b03a 	or	r2,r9,r6
    adbc:	103ebf26 	beq	r2,zero,a8bc <__alt_data_end+0xfffea8bc>
    adc0:	8985883a 	add	r2,r17,r6
    adc4:	4247883a 	add	r3,r8,r9
    adc8:	1451803a 	cmpltu	r8,r2,r17
    adcc:	40d1883a 	add	r8,r8,r3
    add0:	40c0202c 	andhi	r3,r8,128
    add4:	1023883a 	mov	r17,r2
    add8:	183f1a26 	beq	r3,zero,aa44 <__alt_data_end+0xfffeaa44>
    addc:	00bfe034 	movhi	r2,65408
    ade0:	10bfffc4 	addi	r2,r2,-1
    ade4:	2021883a 	mov	r16,r4
    ade8:	4090703a 	and	r8,r8,r2
    adec:	003eb306 	br	a8bc <__alt_data_end+0xfffea8bc>
    adf0:	4444b03a 	or	r2,r8,r17
    adf4:	8000291e 	bne	r16,zero,ae9c <__adddf3+0x65c>
    adf8:	10004b1e 	bne	r2,zero,af28 <__adddf3+0x6e8>
    adfc:	4990b03a 	or	r8,r9,r6
    ae00:	40008b26 	beq	r8,zero,b030 <__adddf3+0x7f0>
    ae04:	4811883a 	mov	r8,r9
    ae08:	3023883a 	mov	r17,r6
    ae0c:	3825883a 	mov	r18,r7
    ae10:	003eaa06 	br	a8bc <__alt_data_end+0xfffea8bc>
    ae14:	1021883a 	mov	r16,r2
    ae18:	0011883a 	mov	r8,zero
    ae1c:	0005883a 	mov	r2,zero
    ae20:	003f0f06 	br	aa60 <__alt_data_end+0xfffeaa60>
    ae24:	217ff804 	addi	r5,r4,-32
    ae28:	00800804 	movi	r2,32
    ae2c:	494ad83a 	srl	r5,r9,r5
    ae30:	20807d26 	beq	r4,r2,b028 <__adddf3+0x7e8>
    ae34:	00801004 	movi	r2,64
    ae38:	1109c83a 	sub	r4,r2,r4
    ae3c:	4912983a 	sll	r9,r9,r4
    ae40:	498cb03a 	or	r6,r9,r6
    ae44:	300cc03a 	cmpne	r6,r6,zero
    ae48:	298ab03a 	or	r5,r5,r6
    ae4c:	0013883a 	mov	r9,zero
    ae50:	003f1506 	br	aaa8 <__alt_data_end+0xfffeaaa8>
    ae54:	0101ffc4 	movi	r4,2047
    ae58:	113f9a1e 	bne	r2,r4,acc4 <__alt_data_end+0xfffeacc4>
    ae5c:	4811883a 	mov	r8,r9
    ae60:	3023883a 	mov	r17,r6
    ae64:	1021883a 	mov	r16,r2
    ae68:	3825883a 	mov	r18,r7
    ae6c:	003e9306 	br	a8bc <__alt_data_end+0xfffea8bc>
    ae70:	8000161e 	bne	r16,zero,aecc <__adddf3+0x68c>
    ae74:	444ab03a 	or	r5,r8,r17
    ae78:	28005126 	beq	r5,zero,afc0 <__adddf3+0x780>
    ae7c:	0108303a 	nor	r4,zero,r4
    ae80:	20004d1e 	bne	r4,zero,afb8 <__adddf3+0x778>
    ae84:	89a3883a 	add	r17,r17,r6
    ae88:	4253883a 	add	r9,r8,r9
    ae8c:	898d803a 	cmpltu	r6,r17,r6
    ae90:	3251883a 	add	r8,r6,r9
    ae94:	1021883a 	mov	r16,r2
    ae98:	003f0806 	br	aabc <__alt_data_end+0xfffeaabc>
    ae9c:	1000301e 	bne	r2,zero,af60 <__adddf3+0x720>
    aea0:	4984b03a 	or	r2,r9,r6
    aea4:	10007126 	beq	r2,zero,b06c <__adddf3+0x82c>
    aea8:	4811883a 	mov	r8,r9
    aeac:	3023883a 	mov	r17,r6
    aeb0:	3825883a 	mov	r18,r7
    aeb4:	0401ffc4 	movi	r16,2047
    aeb8:	003e8006 	br	a8bc <__alt_data_end+0xfffea8bc>
    aebc:	4462b03a 	or	r17,r8,r17
    aec0:	8822c03a 	cmpne	r17,r17,zero
    aec4:	0007883a 	mov	r3,zero
    aec8:	003f8b06 	br	acf8 <__alt_data_end+0xfffeacf8>
    aecc:	0141ffc4 	movi	r5,2047
    aed0:	11403b26 	beq	r2,r5,afc0 <__adddf3+0x780>
    aed4:	0109c83a 	sub	r4,zero,r4
    aed8:	42002034 	orhi	r8,r8,128
    aedc:	01400e04 	movi	r5,56
    aee0:	29006716 	blt	r5,r4,b080 <__adddf3+0x840>
    aee4:	014007c4 	movi	r5,31
    aee8:	29007016 	blt	r5,r4,b0ac <__adddf3+0x86c>
    aeec:	01400804 	movi	r5,32
    aef0:	290bc83a 	sub	r5,r5,r4
    aef4:	4154983a 	sll	r10,r8,r5
    aef8:	890ed83a 	srl	r7,r17,r4
    aefc:	894a983a 	sll	r5,r17,r5
    af00:	4108d83a 	srl	r4,r8,r4
    af04:	51e2b03a 	or	r17,r10,r7
    af08:	280ac03a 	cmpne	r5,r5,zero
    af0c:	8962b03a 	or	r17,r17,r5
    af10:	89a3883a 	add	r17,r17,r6
    af14:	2253883a 	add	r9,r4,r9
    af18:	898d803a 	cmpltu	r6,r17,r6
    af1c:	3251883a 	add	r8,r6,r9
    af20:	1021883a 	mov	r16,r2
    af24:	003ee506 	br	aabc <__alt_data_end+0xfffeaabc>
    af28:	4984b03a 	or	r2,r9,r6
    af2c:	103e6326 	beq	r2,zero,a8bc <__alt_data_end+0xfffea8bc>
    af30:	8987c83a 	sub	r3,r17,r6
    af34:	88c9803a 	cmpltu	r4,r17,r3
    af38:	4245c83a 	sub	r2,r8,r9
    af3c:	1105c83a 	sub	r2,r2,r4
    af40:	1100202c 	andhi	r4,r2,128
    af44:	203ebb26 	beq	r4,zero,aa34 <__alt_data_end+0xfffeaa34>
    af48:	3463c83a 	sub	r17,r6,r17
    af4c:	4a07c83a 	sub	r3,r9,r8
    af50:	344d803a 	cmpltu	r6,r6,r17
    af54:	1991c83a 	sub	r8,r3,r6
    af58:	3825883a 	mov	r18,r7
    af5c:	003e5706 	br	a8bc <__alt_data_end+0xfffea8bc>
    af60:	4984b03a 	or	r2,r9,r6
    af64:	10002e26 	beq	r2,zero,b020 <__adddf3+0x7e0>
    af68:	4004d0fa 	srli	r2,r8,3
    af6c:	8822d0fa 	srli	r17,r17,3
    af70:	4010977a 	slli	r8,r8,29
    af74:	10c0022c 	andhi	r3,r2,8
    af78:	4462b03a 	or	r17,r8,r17
    af7c:	18000826 	beq	r3,zero,afa0 <__adddf3+0x760>
    af80:	4808d0fa 	srli	r4,r9,3
    af84:	20c0022c 	andhi	r3,r4,8
    af88:	1800051e 	bne	r3,zero,afa0 <__adddf3+0x760>
    af8c:	300cd0fa 	srli	r6,r6,3
    af90:	4806977a 	slli	r3,r9,29
    af94:	2005883a 	mov	r2,r4
    af98:	3825883a 	mov	r18,r7
    af9c:	19a2b03a 	or	r17,r3,r6
    afa0:	8810d77a 	srli	r8,r17,29
    afa4:	100490fa 	slli	r2,r2,3
    afa8:	882290fa 	slli	r17,r17,3
    afac:	0401ffc4 	movi	r16,2047
    afb0:	4090b03a 	or	r8,r8,r2
    afb4:	003e4106 	br	a8bc <__alt_data_end+0xfffea8bc>
    afb8:	0141ffc4 	movi	r5,2047
    afbc:	117fc71e 	bne	r2,r5,aedc <__alt_data_end+0xfffeaedc>
    afc0:	4811883a 	mov	r8,r9
    afc4:	3023883a 	mov	r17,r6
    afc8:	1021883a 	mov	r16,r2
    afcc:	003e3b06 	br	a8bc <__alt_data_end+0xfffea8bc>
    afd0:	10002f26 	beq	r2,zero,b090 <__adddf3+0x850>
    afd4:	4984b03a 	or	r2,r9,r6
    afd8:	10001126 	beq	r2,zero,b020 <__adddf3+0x7e0>
    afdc:	4004d0fa 	srli	r2,r8,3
    afe0:	8822d0fa 	srli	r17,r17,3
    afe4:	4010977a 	slli	r8,r8,29
    afe8:	10c0022c 	andhi	r3,r2,8
    afec:	4462b03a 	or	r17,r8,r17
    aff0:	183feb26 	beq	r3,zero,afa0 <__alt_data_end+0xfffeafa0>
    aff4:	4808d0fa 	srli	r4,r9,3
    aff8:	20c0022c 	andhi	r3,r4,8
    affc:	183fe81e 	bne	r3,zero,afa0 <__alt_data_end+0xfffeafa0>
    b000:	300cd0fa 	srli	r6,r6,3
    b004:	4806977a 	slli	r3,r9,29
    b008:	2005883a 	mov	r2,r4
    b00c:	19a2b03a 	or	r17,r3,r6
    b010:	003fe306 	br	afa0 <__alt_data_end+0xfffeafa0>
    b014:	0011883a 	mov	r8,zero
    b018:	0005883a 	mov	r2,zero
    b01c:	003e3f06 	br	a91c <__alt_data_end+0xfffea91c>
    b020:	0401ffc4 	movi	r16,2047
    b024:	003e2506 	br	a8bc <__alt_data_end+0xfffea8bc>
    b028:	0013883a 	mov	r9,zero
    b02c:	003f8406 	br	ae40 <__alt_data_end+0xfffeae40>
    b030:	0005883a 	mov	r2,zero
    b034:	0007883a 	mov	r3,zero
    b038:	003e8906 	br	aa60 <__alt_data_end+0xfffeaa60>
    b03c:	197ff804 	addi	r5,r3,-32
    b040:	01000804 	movi	r4,32
    b044:	414ad83a 	srl	r5,r8,r5
    b048:	19002426 	beq	r3,r4,b0dc <__adddf3+0x89c>
    b04c:	01001004 	movi	r4,64
    b050:	20c7c83a 	sub	r3,r4,r3
    b054:	40c6983a 	sll	r3,r8,r3
    b058:	1c46b03a 	or	r3,r3,r17
    b05c:	1806c03a 	cmpne	r3,r3,zero
    b060:	28e2b03a 	or	r17,r5,r3
    b064:	0007883a 	mov	r3,zero
    b068:	003f2306 	br	acf8 <__alt_data_end+0xfffeacf8>
    b06c:	0007883a 	mov	r3,zero
    b070:	5811883a 	mov	r8,r11
    b074:	00bfffc4 	movi	r2,-1
    b078:	0401ffc4 	movi	r16,2047
    b07c:	003e7806 	br	aa60 <__alt_data_end+0xfffeaa60>
    b080:	4462b03a 	or	r17,r8,r17
    b084:	8822c03a 	cmpne	r17,r17,zero
    b088:	0009883a 	mov	r4,zero
    b08c:	003fa006 	br	af10 <__alt_data_end+0xfffeaf10>
    b090:	4811883a 	mov	r8,r9
    b094:	3023883a 	mov	r17,r6
    b098:	0401ffc4 	movi	r16,2047
    b09c:	003e0706 	br	a8bc <__alt_data_end+0xfffea8bc>
    b0a0:	4811883a 	mov	r8,r9
    b0a4:	3023883a 	mov	r17,r6
    b0a8:	003e0406 	br	a8bc <__alt_data_end+0xfffea8bc>
    b0ac:	21fff804 	addi	r7,r4,-32
    b0b0:	01400804 	movi	r5,32
    b0b4:	41ced83a 	srl	r7,r8,r7
    b0b8:	21400a26 	beq	r4,r5,b0e4 <__adddf3+0x8a4>
    b0bc:	01401004 	movi	r5,64
    b0c0:	2909c83a 	sub	r4,r5,r4
    b0c4:	4108983a 	sll	r4,r8,r4
    b0c8:	2448b03a 	or	r4,r4,r17
    b0cc:	2008c03a 	cmpne	r4,r4,zero
    b0d0:	3922b03a 	or	r17,r7,r4
    b0d4:	0009883a 	mov	r4,zero
    b0d8:	003f8d06 	br	af10 <__alt_data_end+0xfffeaf10>
    b0dc:	0007883a 	mov	r3,zero
    b0e0:	003fdd06 	br	b058 <__alt_data_end+0xfffeb058>
    b0e4:	0009883a 	mov	r4,zero
    b0e8:	003ff706 	br	b0c8 <__alt_data_end+0xfffeb0c8>

0000b0ec <__divdf3>:
    b0ec:	defff204 	addi	sp,sp,-56
    b0f0:	dd400915 	stw	r21,36(sp)
    b0f4:	282ad53a 	srli	r21,r5,20
    b0f8:	dd000815 	stw	r20,32(sp)
    b0fc:	2828d7fa 	srli	r20,r5,31
    b100:	dc000415 	stw	r16,16(sp)
    b104:	04000434 	movhi	r16,16
    b108:	df000c15 	stw	fp,48(sp)
    b10c:	843fffc4 	addi	r16,r16,-1
    b110:	dfc00d15 	stw	ra,52(sp)
    b114:	ddc00b15 	stw	r23,44(sp)
    b118:	dd800a15 	stw	r22,40(sp)
    b11c:	dcc00715 	stw	r19,28(sp)
    b120:	dc800615 	stw	r18,24(sp)
    b124:	dc400515 	stw	r17,20(sp)
    b128:	ad41ffcc 	andi	r21,r21,2047
    b12c:	2c20703a 	and	r16,r5,r16
    b130:	a7003fcc 	andi	fp,r20,255
    b134:	a8006126 	beq	r21,zero,b2bc <__divdf3+0x1d0>
    b138:	0081ffc4 	movi	r2,2047
    b13c:	2025883a 	mov	r18,r4
    b140:	a8803726 	beq	r21,r2,b220 <__divdf3+0x134>
    b144:	80800434 	orhi	r2,r16,16
    b148:	100490fa 	slli	r2,r2,3
    b14c:	2020d77a 	srli	r16,r4,29
    b150:	202490fa 	slli	r18,r4,3
    b154:	ad7f0044 	addi	r21,r21,-1023
    b158:	80a0b03a 	or	r16,r16,r2
    b15c:	0027883a 	mov	r19,zero
    b160:	0013883a 	mov	r9,zero
    b164:	3804d53a 	srli	r2,r7,20
    b168:	382cd7fa 	srli	r22,r7,31
    b16c:	04400434 	movhi	r17,16
    b170:	8c7fffc4 	addi	r17,r17,-1
    b174:	1081ffcc 	andi	r2,r2,2047
    b178:	3011883a 	mov	r8,r6
    b17c:	3c62703a 	and	r17,r7,r17
    b180:	b5c03fcc 	andi	r23,r22,255
    b184:	10006c26 	beq	r2,zero,b338 <__divdf3+0x24c>
    b188:	00c1ffc4 	movi	r3,2047
    b18c:	10c06426 	beq	r2,r3,b320 <__divdf3+0x234>
    b190:	88c00434 	orhi	r3,r17,16
    b194:	180690fa 	slli	r3,r3,3
    b198:	3022d77a 	srli	r17,r6,29
    b19c:	301090fa 	slli	r8,r6,3
    b1a0:	10bf0044 	addi	r2,r2,-1023
    b1a4:	88e2b03a 	or	r17,r17,r3
    b1a8:	000f883a 	mov	r7,zero
    b1ac:	a58cf03a 	xor	r6,r20,r22
    b1b0:	3cc8b03a 	or	r4,r7,r19
    b1b4:	a8abc83a 	sub	r21,r21,r2
    b1b8:	008003c4 	movi	r2,15
    b1bc:	3007883a 	mov	r3,r6
    b1c0:	34c03fcc 	andi	r19,r6,255
    b1c4:	11009036 	bltu	r2,r4,b408 <__divdf3+0x31c>
    b1c8:	200890ba 	slli	r4,r4,2
    b1cc:	00800074 	movhi	r2,1
    b1d0:	10ac7804 	addi	r2,r2,-20000
    b1d4:	2089883a 	add	r4,r4,r2
    b1d8:	20800017 	ldw	r2,0(r4)
    b1dc:	1000683a 	jmp	r2
    b1e0:	0000b408 	cmpgei	zero,zero,720
    b1e4:	0000b258 	cmpnei	zero,zero,713
    b1e8:	0000b3f8 	rdprs	zero,zero,719
    b1ec:	0000b24c 	andi	zero,zero,713
    b1f0:	0000b3f8 	rdprs	zero,zero,719
    b1f4:	0000b3cc 	andi	zero,zero,719
    b1f8:	0000b3f8 	rdprs	zero,zero,719
    b1fc:	0000b24c 	andi	zero,zero,713
    b200:	0000b258 	cmpnei	zero,zero,713
    b204:	0000b258 	cmpnei	zero,zero,713
    b208:	0000b3cc 	andi	zero,zero,719
    b20c:	0000b24c 	andi	zero,zero,713
    b210:	0000b23c 	xorhi	zero,zero,712
    b214:	0000b23c 	xorhi	zero,zero,712
    b218:	0000b23c 	xorhi	zero,zero,712
    b21c:	0000b6ec 	andhi	zero,zero,731
    b220:	2404b03a 	or	r2,r4,r16
    b224:	1000661e 	bne	r2,zero,b3c0 <__divdf3+0x2d4>
    b228:	04c00204 	movi	r19,8
    b22c:	0021883a 	mov	r16,zero
    b230:	0025883a 	mov	r18,zero
    b234:	02400084 	movi	r9,2
    b238:	003fca06 	br	b164 <__alt_data_end+0xfffeb164>
    b23c:	8023883a 	mov	r17,r16
    b240:	9011883a 	mov	r8,r18
    b244:	e02f883a 	mov	r23,fp
    b248:	480f883a 	mov	r7,r9
    b24c:	00800084 	movi	r2,2
    b250:	3881311e 	bne	r7,r2,b718 <__divdf3+0x62c>
    b254:	b827883a 	mov	r19,r23
    b258:	98c0004c 	andi	r3,r19,1
    b25c:	0081ffc4 	movi	r2,2047
    b260:	000b883a 	mov	r5,zero
    b264:	0025883a 	mov	r18,zero
    b268:	1004953a 	slli	r2,r2,20
    b26c:	18c03fcc 	andi	r3,r3,255
    b270:	04400434 	movhi	r17,16
    b274:	8c7fffc4 	addi	r17,r17,-1
    b278:	180697fa 	slli	r3,r3,31
    b27c:	2c4a703a 	and	r5,r5,r17
    b280:	288ab03a 	or	r5,r5,r2
    b284:	28c6b03a 	or	r3,r5,r3
    b288:	9005883a 	mov	r2,r18
    b28c:	dfc00d17 	ldw	ra,52(sp)
    b290:	df000c17 	ldw	fp,48(sp)
    b294:	ddc00b17 	ldw	r23,44(sp)
    b298:	dd800a17 	ldw	r22,40(sp)
    b29c:	dd400917 	ldw	r21,36(sp)
    b2a0:	dd000817 	ldw	r20,32(sp)
    b2a4:	dcc00717 	ldw	r19,28(sp)
    b2a8:	dc800617 	ldw	r18,24(sp)
    b2ac:	dc400517 	ldw	r17,20(sp)
    b2b0:	dc000417 	ldw	r16,16(sp)
    b2b4:	dec00e04 	addi	sp,sp,56
    b2b8:	f800283a 	ret
    b2bc:	2404b03a 	or	r2,r4,r16
    b2c0:	2027883a 	mov	r19,r4
    b2c4:	10003926 	beq	r2,zero,b3ac <__divdf3+0x2c0>
    b2c8:	80012e26 	beq	r16,zero,b784 <__divdf3+0x698>
    b2cc:	8009883a 	mov	r4,r16
    b2d0:	d9800315 	stw	r6,12(sp)
    b2d4:	d9c00215 	stw	r7,8(sp)
    b2d8:	000ce440 	call	ce44 <__clzsi2>
    b2dc:	d9800317 	ldw	r6,12(sp)
    b2e0:	d9c00217 	ldw	r7,8(sp)
    b2e4:	113ffd44 	addi	r4,r2,-11
    b2e8:	00c00704 	movi	r3,28
    b2ec:	19012116 	blt	r3,r4,b774 <__divdf3+0x688>
    b2f0:	00c00744 	movi	r3,29
    b2f4:	147ffe04 	addi	r17,r2,-8
    b2f8:	1907c83a 	sub	r3,r3,r4
    b2fc:	8460983a 	sll	r16,r16,r17
    b300:	98c6d83a 	srl	r3,r19,r3
    b304:	9c64983a 	sll	r18,r19,r17
    b308:	1c20b03a 	or	r16,r3,r16
    b30c:	1080fcc4 	addi	r2,r2,1011
    b310:	00abc83a 	sub	r21,zero,r2
    b314:	0027883a 	mov	r19,zero
    b318:	0013883a 	mov	r9,zero
    b31c:	003f9106 	br	b164 <__alt_data_end+0xfffeb164>
    b320:	3446b03a 	or	r3,r6,r17
    b324:	18001f1e 	bne	r3,zero,b3a4 <__divdf3+0x2b8>
    b328:	0023883a 	mov	r17,zero
    b32c:	0011883a 	mov	r8,zero
    b330:	01c00084 	movi	r7,2
    b334:	003f9d06 	br	b1ac <__alt_data_end+0xfffeb1ac>
    b338:	3446b03a 	or	r3,r6,r17
    b33c:	18001526 	beq	r3,zero,b394 <__divdf3+0x2a8>
    b340:	88011b26 	beq	r17,zero,b7b0 <__divdf3+0x6c4>
    b344:	8809883a 	mov	r4,r17
    b348:	d9800315 	stw	r6,12(sp)
    b34c:	da400115 	stw	r9,4(sp)
    b350:	000ce440 	call	ce44 <__clzsi2>
    b354:	d9800317 	ldw	r6,12(sp)
    b358:	da400117 	ldw	r9,4(sp)
    b35c:	113ffd44 	addi	r4,r2,-11
    b360:	00c00704 	movi	r3,28
    b364:	19010e16 	blt	r3,r4,b7a0 <__divdf3+0x6b4>
    b368:	00c00744 	movi	r3,29
    b36c:	123ffe04 	addi	r8,r2,-8
    b370:	1907c83a 	sub	r3,r3,r4
    b374:	8a22983a 	sll	r17,r17,r8
    b378:	30c6d83a 	srl	r3,r6,r3
    b37c:	3210983a 	sll	r8,r6,r8
    b380:	1c62b03a 	or	r17,r3,r17
    b384:	1080fcc4 	addi	r2,r2,1011
    b388:	0085c83a 	sub	r2,zero,r2
    b38c:	000f883a 	mov	r7,zero
    b390:	003f8606 	br	b1ac <__alt_data_end+0xfffeb1ac>
    b394:	0023883a 	mov	r17,zero
    b398:	0011883a 	mov	r8,zero
    b39c:	01c00044 	movi	r7,1
    b3a0:	003f8206 	br	b1ac <__alt_data_end+0xfffeb1ac>
    b3a4:	01c000c4 	movi	r7,3
    b3a8:	003f8006 	br	b1ac <__alt_data_end+0xfffeb1ac>
    b3ac:	04c00104 	movi	r19,4
    b3b0:	0021883a 	mov	r16,zero
    b3b4:	0025883a 	mov	r18,zero
    b3b8:	02400044 	movi	r9,1
    b3bc:	003f6906 	br	b164 <__alt_data_end+0xfffeb164>
    b3c0:	04c00304 	movi	r19,12
    b3c4:	024000c4 	movi	r9,3
    b3c8:	003f6606 	br	b164 <__alt_data_end+0xfffeb164>
    b3cc:	01400434 	movhi	r5,16
    b3d0:	0007883a 	mov	r3,zero
    b3d4:	297fffc4 	addi	r5,r5,-1
    b3d8:	04bfffc4 	movi	r18,-1
    b3dc:	0081ffc4 	movi	r2,2047
    b3e0:	003fa106 	br	b268 <__alt_data_end+0xfffeb268>
    b3e4:	00c00044 	movi	r3,1
    b3e8:	1887c83a 	sub	r3,r3,r2
    b3ec:	01000e04 	movi	r4,56
    b3f0:	20c1210e 	bge	r4,r3,b878 <__divdf3+0x78c>
    b3f4:	98c0004c 	andi	r3,r19,1
    b3f8:	0005883a 	mov	r2,zero
    b3fc:	000b883a 	mov	r5,zero
    b400:	0025883a 	mov	r18,zero
    b404:	003f9806 	br	b268 <__alt_data_end+0xfffeb268>
    b408:	8c00fd36 	bltu	r17,r16,b800 <__divdf3+0x714>
    b40c:	8440fb26 	beq	r16,r17,b7fc <__divdf3+0x710>
    b410:	8007883a 	mov	r3,r16
    b414:	ad7fffc4 	addi	r21,r21,-1
    b418:	0021883a 	mov	r16,zero
    b41c:	4004d63a 	srli	r2,r8,24
    b420:	8822923a 	slli	r17,r17,8
    b424:	1809883a 	mov	r4,r3
    b428:	402c923a 	slli	r22,r8,8
    b42c:	88b8b03a 	or	fp,r17,r2
    b430:	e028d43a 	srli	r20,fp,16
    b434:	d8c00015 	stw	r3,0(sp)
    b438:	e5ffffcc 	andi	r23,fp,65535
    b43c:	a00b883a 	mov	r5,r20
    b440:	00006800 	call	680 <__udivsi3>
    b444:	d8c00017 	ldw	r3,0(sp)
    b448:	a00b883a 	mov	r5,r20
    b44c:	d8800315 	stw	r2,12(sp)
    b450:	1809883a 	mov	r4,r3
    b454:	00006e40 	call	6e4 <__umodsi3>
    b458:	d9800317 	ldw	r6,12(sp)
    b45c:	1006943a 	slli	r3,r2,16
    b460:	9004d43a 	srli	r2,r18,16
    b464:	b9a3383a 	mul	r17,r23,r6
    b468:	10c4b03a 	or	r2,r2,r3
    b46c:	1440062e 	bgeu	r2,r17,b488 <__divdf3+0x39c>
    b470:	1705883a 	add	r2,r2,fp
    b474:	30ffffc4 	addi	r3,r6,-1
    b478:	1700ee36 	bltu	r2,fp,b834 <__divdf3+0x748>
    b47c:	1440ed2e 	bgeu	r2,r17,b834 <__divdf3+0x748>
    b480:	31bfff84 	addi	r6,r6,-2
    b484:	1705883a 	add	r2,r2,fp
    b488:	1463c83a 	sub	r17,r2,r17
    b48c:	a00b883a 	mov	r5,r20
    b490:	8809883a 	mov	r4,r17
    b494:	d9800315 	stw	r6,12(sp)
    b498:	00006800 	call	680 <__udivsi3>
    b49c:	a00b883a 	mov	r5,r20
    b4a0:	8809883a 	mov	r4,r17
    b4a4:	d8800215 	stw	r2,8(sp)
    b4a8:	00006e40 	call	6e4 <__umodsi3>
    b4ac:	d9c00217 	ldw	r7,8(sp)
    b4b0:	1004943a 	slli	r2,r2,16
    b4b4:	94bfffcc 	andi	r18,r18,65535
    b4b8:	b9d1383a 	mul	r8,r23,r7
    b4bc:	90a4b03a 	or	r18,r18,r2
    b4c0:	d9800317 	ldw	r6,12(sp)
    b4c4:	9200062e 	bgeu	r18,r8,b4e0 <__divdf3+0x3f4>
    b4c8:	9725883a 	add	r18,r18,fp
    b4cc:	38bfffc4 	addi	r2,r7,-1
    b4d0:	9700d636 	bltu	r18,fp,b82c <__divdf3+0x740>
    b4d4:	9200d52e 	bgeu	r18,r8,b82c <__divdf3+0x740>
    b4d8:	39ffff84 	addi	r7,r7,-2
    b4dc:	9725883a 	add	r18,r18,fp
    b4e0:	3004943a 	slli	r2,r6,16
    b4e4:	b012d43a 	srli	r9,r22,16
    b4e8:	b1bfffcc 	andi	r6,r22,65535
    b4ec:	11e2b03a 	or	r17,r2,r7
    b4f0:	8806d43a 	srli	r3,r17,16
    b4f4:	893fffcc 	andi	r4,r17,65535
    b4f8:	218b383a 	mul	r5,r4,r6
    b4fc:	30c5383a 	mul	r2,r6,r3
    b500:	2249383a 	mul	r4,r4,r9
    b504:	280ed43a 	srli	r7,r5,16
    b508:	9225c83a 	sub	r18,r18,r8
    b50c:	2089883a 	add	r4,r4,r2
    b510:	3909883a 	add	r4,r7,r4
    b514:	1a47383a 	mul	r3,r3,r9
    b518:	2080022e 	bgeu	r4,r2,b524 <__divdf3+0x438>
    b51c:	00800074 	movhi	r2,1
    b520:	1887883a 	add	r3,r3,r2
    b524:	2004d43a 	srli	r2,r4,16
    b528:	2008943a 	slli	r4,r4,16
    b52c:	297fffcc 	andi	r5,r5,65535
    b530:	10c7883a 	add	r3,r2,r3
    b534:	2149883a 	add	r4,r4,r5
    b538:	90c0a536 	bltu	r18,r3,b7d0 <__divdf3+0x6e4>
    b53c:	90c0bf26 	beq	r18,r3,b83c <__divdf3+0x750>
    b540:	90c7c83a 	sub	r3,r18,r3
    b544:	810fc83a 	sub	r7,r16,r4
    b548:	81e5803a 	cmpltu	r18,r16,r7
    b54c:	1ca5c83a 	sub	r18,r3,r18
    b550:	e480c126 	beq	fp,r18,b858 <__divdf3+0x76c>
    b554:	a00b883a 	mov	r5,r20
    b558:	9009883a 	mov	r4,r18
    b55c:	d9800315 	stw	r6,12(sp)
    b560:	d9c00215 	stw	r7,8(sp)
    b564:	da400115 	stw	r9,4(sp)
    b568:	00006800 	call	680 <__udivsi3>
    b56c:	a00b883a 	mov	r5,r20
    b570:	9009883a 	mov	r4,r18
    b574:	d8800015 	stw	r2,0(sp)
    b578:	00006e40 	call	6e4 <__umodsi3>
    b57c:	d9c00217 	ldw	r7,8(sp)
    b580:	da000017 	ldw	r8,0(sp)
    b584:	1006943a 	slli	r3,r2,16
    b588:	3804d43a 	srli	r2,r7,16
    b58c:	ba21383a 	mul	r16,r23,r8
    b590:	d9800317 	ldw	r6,12(sp)
    b594:	10c4b03a 	or	r2,r2,r3
    b598:	da400117 	ldw	r9,4(sp)
    b59c:	1400062e 	bgeu	r2,r16,b5b8 <__divdf3+0x4cc>
    b5a0:	1705883a 	add	r2,r2,fp
    b5a4:	40ffffc4 	addi	r3,r8,-1
    b5a8:	1700ad36 	bltu	r2,fp,b860 <__divdf3+0x774>
    b5ac:	1400ac2e 	bgeu	r2,r16,b860 <__divdf3+0x774>
    b5b0:	423fff84 	addi	r8,r8,-2
    b5b4:	1705883a 	add	r2,r2,fp
    b5b8:	1421c83a 	sub	r16,r2,r16
    b5bc:	a00b883a 	mov	r5,r20
    b5c0:	8009883a 	mov	r4,r16
    b5c4:	d9800315 	stw	r6,12(sp)
    b5c8:	d9c00215 	stw	r7,8(sp)
    b5cc:	da000015 	stw	r8,0(sp)
    b5d0:	da400115 	stw	r9,4(sp)
    b5d4:	00006800 	call	680 <__udivsi3>
    b5d8:	8009883a 	mov	r4,r16
    b5dc:	a00b883a 	mov	r5,r20
    b5e0:	1025883a 	mov	r18,r2
    b5e4:	00006e40 	call	6e4 <__umodsi3>
    b5e8:	d9c00217 	ldw	r7,8(sp)
    b5ec:	1004943a 	slli	r2,r2,16
    b5f0:	bcaf383a 	mul	r23,r23,r18
    b5f4:	393fffcc 	andi	r4,r7,65535
    b5f8:	2088b03a 	or	r4,r4,r2
    b5fc:	d9800317 	ldw	r6,12(sp)
    b600:	da000017 	ldw	r8,0(sp)
    b604:	da400117 	ldw	r9,4(sp)
    b608:	25c0062e 	bgeu	r4,r23,b624 <__divdf3+0x538>
    b60c:	2709883a 	add	r4,r4,fp
    b610:	90bfffc4 	addi	r2,r18,-1
    b614:	27009436 	bltu	r4,fp,b868 <__divdf3+0x77c>
    b618:	25c0932e 	bgeu	r4,r23,b868 <__divdf3+0x77c>
    b61c:	94bfff84 	addi	r18,r18,-2
    b620:	2709883a 	add	r4,r4,fp
    b624:	4004943a 	slli	r2,r8,16
    b628:	25efc83a 	sub	r23,r4,r23
    b62c:	1490b03a 	or	r8,r2,r18
    b630:	4008d43a 	srli	r4,r8,16
    b634:	40ffffcc 	andi	r3,r8,65535
    b638:	30c5383a 	mul	r2,r6,r3
    b63c:	1a47383a 	mul	r3,r3,r9
    b640:	310d383a 	mul	r6,r6,r4
    b644:	100ad43a 	srli	r5,r2,16
    b648:	4913383a 	mul	r9,r9,r4
    b64c:	1987883a 	add	r3,r3,r6
    b650:	28c7883a 	add	r3,r5,r3
    b654:	1980022e 	bgeu	r3,r6,b660 <__divdf3+0x574>
    b658:	01000074 	movhi	r4,1
    b65c:	4913883a 	add	r9,r9,r4
    b660:	1808d43a 	srli	r4,r3,16
    b664:	1806943a 	slli	r3,r3,16
    b668:	10bfffcc 	andi	r2,r2,65535
    b66c:	2253883a 	add	r9,r4,r9
    b670:	1887883a 	add	r3,r3,r2
    b674:	ba403836 	bltu	r23,r9,b758 <__divdf3+0x66c>
    b678:	ba403626 	beq	r23,r9,b754 <__divdf3+0x668>
    b67c:	42000054 	ori	r8,r8,1
    b680:	a880ffc4 	addi	r2,r21,1023
    b684:	00bf570e 	bge	zero,r2,b3e4 <__alt_data_end+0xfffeb3e4>
    b688:	40c001cc 	andi	r3,r8,7
    b68c:	18000726 	beq	r3,zero,b6ac <__divdf3+0x5c0>
    b690:	40c003cc 	andi	r3,r8,15
    b694:	01000104 	movi	r4,4
    b698:	19000426 	beq	r3,r4,b6ac <__divdf3+0x5c0>
    b69c:	4107883a 	add	r3,r8,r4
    b6a0:	1a11803a 	cmpltu	r8,r3,r8
    b6a4:	8a23883a 	add	r17,r17,r8
    b6a8:	1811883a 	mov	r8,r3
    b6ac:	88c0402c 	andhi	r3,r17,256
    b6b0:	18000426 	beq	r3,zero,b6c4 <__divdf3+0x5d8>
    b6b4:	00ffc034 	movhi	r3,65280
    b6b8:	18ffffc4 	addi	r3,r3,-1
    b6bc:	a8810004 	addi	r2,r21,1024
    b6c0:	88e2703a 	and	r17,r17,r3
    b6c4:	00c1ff84 	movi	r3,2046
    b6c8:	18bee316 	blt	r3,r2,b258 <__alt_data_end+0xfffeb258>
    b6cc:	8824977a 	slli	r18,r17,29
    b6d0:	4010d0fa 	srli	r8,r8,3
    b6d4:	8822927a 	slli	r17,r17,9
    b6d8:	1081ffcc 	andi	r2,r2,2047
    b6dc:	9224b03a 	or	r18,r18,r8
    b6e0:	880ad33a 	srli	r5,r17,12
    b6e4:	98c0004c 	andi	r3,r19,1
    b6e8:	003edf06 	br	b268 <__alt_data_end+0xfffeb268>
    b6ec:	8080022c 	andhi	r2,r16,8
    b6f0:	10001226 	beq	r2,zero,b73c <__divdf3+0x650>
    b6f4:	8880022c 	andhi	r2,r17,8
    b6f8:	1000101e 	bne	r2,zero,b73c <__divdf3+0x650>
    b6fc:	00800434 	movhi	r2,16
    b700:	89400234 	orhi	r5,r17,8
    b704:	10bfffc4 	addi	r2,r2,-1
    b708:	b007883a 	mov	r3,r22
    b70c:	288a703a 	and	r5,r5,r2
    b710:	4025883a 	mov	r18,r8
    b714:	003f3106 	br	b3dc <__alt_data_end+0xfffeb3dc>
    b718:	008000c4 	movi	r2,3
    b71c:	3880a626 	beq	r7,r2,b9b8 <__divdf3+0x8cc>
    b720:	00800044 	movi	r2,1
    b724:	3880521e 	bne	r7,r2,b870 <__divdf3+0x784>
    b728:	b807883a 	mov	r3,r23
    b72c:	0005883a 	mov	r2,zero
    b730:	000b883a 	mov	r5,zero
    b734:	0025883a 	mov	r18,zero
    b738:	003ecb06 	br	b268 <__alt_data_end+0xfffeb268>
    b73c:	00800434 	movhi	r2,16
    b740:	81400234 	orhi	r5,r16,8
    b744:	10bfffc4 	addi	r2,r2,-1
    b748:	a007883a 	mov	r3,r20
    b74c:	288a703a 	and	r5,r5,r2
    b750:	003f2206 	br	b3dc <__alt_data_end+0xfffeb3dc>
    b754:	183fca26 	beq	r3,zero,b680 <__alt_data_end+0xfffeb680>
    b758:	e5ef883a 	add	r23,fp,r23
    b75c:	40bfffc4 	addi	r2,r8,-1
    b760:	bf00392e 	bgeu	r23,fp,b848 <__divdf3+0x75c>
    b764:	1011883a 	mov	r8,r2
    b768:	ba7fc41e 	bne	r23,r9,b67c <__alt_data_end+0xfffeb67c>
    b76c:	b0ffc31e 	bne	r22,r3,b67c <__alt_data_end+0xfffeb67c>
    b770:	003fc306 	br	b680 <__alt_data_end+0xfffeb680>
    b774:	143ff604 	addi	r16,r2,-40
    b778:	9c20983a 	sll	r16,r19,r16
    b77c:	0025883a 	mov	r18,zero
    b780:	003ee206 	br	b30c <__alt_data_end+0xfffeb30c>
    b784:	d9800315 	stw	r6,12(sp)
    b788:	d9c00215 	stw	r7,8(sp)
    b78c:	000ce440 	call	ce44 <__clzsi2>
    b790:	10800804 	addi	r2,r2,32
    b794:	d9c00217 	ldw	r7,8(sp)
    b798:	d9800317 	ldw	r6,12(sp)
    b79c:	003ed106 	br	b2e4 <__alt_data_end+0xfffeb2e4>
    b7a0:	147ff604 	addi	r17,r2,-40
    b7a4:	3462983a 	sll	r17,r6,r17
    b7a8:	0011883a 	mov	r8,zero
    b7ac:	003ef506 	br	b384 <__alt_data_end+0xfffeb384>
    b7b0:	3009883a 	mov	r4,r6
    b7b4:	d9800315 	stw	r6,12(sp)
    b7b8:	da400115 	stw	r9,4(sp)
    b7bc:	000ce440 	call	ce44 <__clzsi2>
    b7c0:	10800804 	addi	r2,r2,32
    b7c4:	da400117 	ldw	r9,4(sp)
    b7c8:	d9800317 	ldw	r6,12(sp)
    b7cc:	003ee306 	br	b35c <__alt_data_end+0xfffeb35c>
    b7d0:	85a1883a 	add	r16,r16,r22
    b7d4:	8585803a 	cmpltu	r2,r16,r22
    b7d8:	1705883a 	add	r2,r2,fp
    b7dc:	14a5883a 	add	r18,r2,r18
    b7e0:	88bfffc4 	addi	r2,r17,-1
    b7e4:	e4800c2e 	bgeu	fp,r18,b818 <__divdf3+0x72c>
    b7e8:	90c03e36 	bltu	r18,r3,b8e4 <__divdf3+0x7f8>
    b7ec:	1c806926 	beq	r3,r18,b994 <__divdf3+0x8a8>
    b7f0:	90c7c83a 	sub	r3,r18,r3
    b7f4:	1023883a 	mov	r17,r2
    b7f8:	003f5206 	br	b544 <__alt_data_end+0xfffeb544>
    b7fc:	923f0436 	bltu	r18,r8,b410 <__alt_data_end+0xfffeb410>
    b800:	800897fa 	slli	r4,r16,31
    b804:	9004d07a 	srli	r2,r18,1
    b808:	8006d07a 	srli	r3,r16,1
    b80c:	902097fa 	slli	r16,r18,31
    b810:	20a4b03a 	or	r18,r4,r2
    b814:	003f0106 	br	b41c <__alt_data_end+0xfffeb41c>
    b818:	e4bff51e 	bne	fp,r18,b7f0 <__alt_data_end+0xfffeb7f0>
    b81c:	85bff22e 	bgeu	r16,r22,b7e8 <__alt_data_end+0xfffeb7e8>
    b820:	e0c7c83a 	sub	r3,fp,r3
    b824:	1023883a 	mov	r17,r2
    b828:	003f4606 	br	b544 <__alt_data_end+0xfffeb544>
    b82c:	100f883a 	mov	r7,r2
    b830:	003f2b06 	br	b4e0 <__alt_data_end+0xfffeb4e0>
    b834:	180d883a 	mov	r6,r3
    b838:	003f1306 	br	b488 <__alt_data_end+0xfffeb488>
    b83c:	813fe436 	bltu	r16,r4,b7d0 <__alt_data_end+0xfffeb7d0>
    b840:	0007883a 	mov	r3,zero
    b844:	003f3f06 	br	b544 <__alt_data_end+0xfffeb544>
    b848:	ba402c36 	bltu	r23,r9,b8fc <__divdf3+0x810>
    b84c:	4dc05426 	beq	r9,r23,b9a0 <__divdf3+0x8b4>
    b850:	1011883a 	mov	r8,r2
    b854:	003f8906 	br	b67c <__alt_data_end+0xfffeb67c>
    b858:	023fffc4 	movi	r8,-1
    b85c:	003f8806 	br	b680 <__alt_data_end+0xfffeb680>
    b860:	1811883a 	mov	r8,r3
    b864:	003f5406 	br	b5b8 <__alt_data_end+0xfffeb5b8>
    b868:	1025883a 	mov	r18,r2
    b86c:	003f6d06 	br	b624 <__alt_data_end+0xfffeb624>
    b870:	b827883a 	mov	r19,r23
    b874:	003f8206 	br	b680 <__alt_data_end+0xfffeb680>
    b878:	010007c4 	movi	r4,31
    b87c:	20c02616 	blt	r4,r3,b918 <__divdf3+0x82c>
    b880:	00800804 	movi	r2,32
    b884:	10c5c83a 	sub	r2,r2,r3
    b888:	888a983a 	sll	r5,r17,r2
    b88c:	40c8d83a 	srl	r4,r8,r3
    b890:	4084983a 	sll	r2,r8,r2
    b894:	88e2d83a 	srl	r17,r17,r3
    b898:	2906b03a 	or	r3,r5,r4
    b89c:	1004c03a 	cmpne	r2,r2,zero
    b8a0:	1886b03a 	or	r3,r3,r2
    b8a4:	188001cc 	andi	r2,r3,7
    b8a8:	10000726 	beq	r2,zero,b8c8 <__divdf3+0x7dc>
    b8ac:	188003cc 	andi	r2,r3,15
    b8b0:	01000104 	movi	r4,4
    b8b4:	11000426 	beq	r2,r4,b8c8 <__divdf3+0x7dc>
    b8b8:	1805883a 	mov	r2,r3
    b8bc:	10c00104 	addi	r3,r2,4
    b8c0:	1885803a 	cmpltu	r2,r3,r2
    b8c4:	88a3883a 	add	r17,r17,r2
    b8c8:	8880202c 	andhi	r2,r17,128
    b8cc:	10002726 	beq	r2,zero,b96c <__divdf3+0x880>
    b8d0:	98c0004c 	andi	r3,r19,1
    b8d4:	00800044 	movi	r2,1
    b8d8:	000b883a 	mov	r5,zero
    b8dc:	0025883a 	mov	r18,zero
    b8e0:	003e6106 	br	b268 <__alt_data_end+0xfffeb268>
    b8e4:	85a1883a 	add	r16,r16,r22
    b8e8:	8585803a 	cmpltu	r2,r16,r22
    b8ec:	1705883a 	add	r2,r2,fp
    b8f0:	14a5883a 	add	r18,r2,r18
    b8f4:	8c7fff84 	addi	r17,r17,-2
    b8f8:	003f1106 	br	b540 <__alt_data_end+0xfffeb540>
    b8fc:	b589883a 	add	r4,r22,r22
    b900:	25ad803a 	cmpltu	r22,r4,r22
    b904:	b739883a 	add	fp,r22,fp
    b908:	40bfff84 	addi	r2,r8,-2
    b90c:	bf2f883a 	add	r23,r23,fp
    b910:	202d883a 	mov	r22,r4
    b914:	003f9306 	br	b764 <__alt_data_end+0xfffeb764>
    b918:	013ff844 	movi	r4,-31
    b91c:	2085c83a 	sub	r2,r4,r2
    b920:	8888d83a 	srl	r4,r17,r2
    b924:	00800804 	movi	r2,32
    b928:	18802126 	beq	r3,r2,b9b0 <__divdf3+0x8c4>
    b92c:	00801004 	movi	r2,64
    b930:	10c5c83a 	sub	r2,r2,r3
    b934:	8884983a 	sll	r2,r17,r2
    b938:	1204b03a 	or	r2,r2,r8
    b93c:	1004c03a 	cmpne	r2,r2,zero
    b940:	2084b03a 	or	r2,r4,r2
    b944:	144001cc 	andi	r17,r2,7
    b948:	88000d1e 	bne	r17,zero,b980 <__divdf3+0x894>
    b94c:	000b883a 	mov	r5,zero
    b950:	1024d0fa 	srli	r18,r2,3
    b954:	98c0004c 	andi	r3,r19,1
    b958:	0005883a 	mov	r2,zero
    b95c:	9464b03a 	or	r18,r18,r17
    b960:	003e4106 	br	b268 <__alt_data_end+0xfffeb268>
    b964:	1007883a 	mov	r3,r2
    b968:	0023883a 	mov	r17,zero
    b96c:	880a927a 	slli	r5,r17,9
    b970:	1805883a 	mov	r2,r3
    b974:	8822977a 	slli	r17,r17,29
    b978:	280ad33a 	srli	r5,r5,12
    b97c:	003ff406 	br	b950 <__alt_data_end+0xfffeb950>
    b980:	10c003cc 	andi	r3,r2,15
    b984:	01000104 	movi	r4,4
    b988:	193ff626 	beq	r3,r4,b964 <__alt_data_end+0xfffeb964>
    b98c:	0023883a 	mov	r17,zero
    b990:	003fca06 	br	b8bc <__alt_data_end+0xfffeb8bc>
    b994:	813fd336 	bltu	r16,r4,b8e4 <__alt_data_end+0xfffeb8e4>
    b998:	1023883a 	mov	r17,r2
    b99c:	003fa806 	br	b840 <__alt_data_end+0xfffeb840>
    b9a0:	b0ffd636 	bltu	r22,r3,b8fc <__alt_data_end+0xfffeb8fc>
    b9a4:	1011883a 	mov	r8,r2
    b9a8:	b0ff341e 	bne	r22,r3,b67c <__alt_data_end+0xfffeb67c>
    b9ac:	003f3406 	br	b680 <__alt_data_end+0xfffeb680>
    b9b0:	0005883a 	mov	r2,zero
    b9b4:	003fe006 	br	b938 <__alt_data_end+0xfffeb938>
    b9b8:	00800434 	movhi	r2,16
    b9bc:	89400234 	orhi	r5,r17,8
    b9c0:	10bfffc4 	addi	r2,r2,-1
    b9c4:	b807883a 	mov	r3,r23
    b9c8:	288a703a 	and	r5,r5,r2
    b9cc:	4025883a 	mov	r18,r8
    b9d0:	003e8206 	br	b3dc <__alt_data_end+0xfffeb3dc>

0000b9d4 <__eqdf2>:
    b9d4:	2804d53a 	srli	r2,r5,20
    b9d8:	3806d53a 	srli	r3,r7,20
    b9dc:	02000434 	movhi	r8,16
    b9e0:	423fffc4 	addi	r8,r8,-1
    b9e4:	1081ffcc 	andi	r2,r2,2047
    b9e8:	0281ffc4 	movi	r10,2047
    b9ec:	2a12703a 	and	r9,r5,r8
    b9f0:	18c1ffcc 	andi	r3,r3,2047
    b9f4:	3a10703a 	and	r8,r7,r8
    b9f8:	280ad7fa 	srli	r5,r5,31
    b9fc:	380ed7fa 	srli	r7,r7,31
    ba00:	12801026 	beq	r2,r10,ba44 <__eqdf2+0x70>
    ba04:	0281ffc4 	movi	r10,2047
    ba08:	1a800a26 	beq	r3,r10,ba34 <__eqdf2+0x60>
    ba0c:	10c00226 	beq	r2,r3,ba18 <__eqdf2+0x44>
    ba10:	00800044 	movi	r2,1
    ba14:	f800283a 	ret
    ba18:	4a3ffd1e 	bne	r9,r8,ba10 <__alt_data_end+0xfffeba10>
    ba1c:	21bffc1e 	bne	r4,r6,ba10 <__alt_data_end+0xfffeba10>
    ba20:	29c00c26 	beq	r5,r7,ba54 <__eqdf2+0x80>
    ba24:	103ffa1e 	bne	r2,zero,ba10 <__alt_data_end+0xfffeba10>
    ba28:	2244b03a 	or	r2,r4,r9
    ba2c:	1004c03a 	cmpne	r2,r2,zero
    ba30:	f800283a 	ret
    ba34:	3214b03a 	or	r10,r6,r8
    ba38:	503ff426 	beq	r10,zero,ba0c <__alt_data_end+0xfffeba0c>
    ba3c:	00800044 	movi	r2,1
    ba40:	f800283a 	ret
    ba44:	2254b03a 	or	r10,r4,r9
    ba48:	503fee26 	beq	r10,zero,ba04 <__alt_data_end+0xfffeba04>
    ba4c:	00800044 	movi	r2,1
    ba50:	f800283a 	ret
    ba54:	0005883a 	mov	r2,zero
    ba58:	f800283a 	ret

0000ba5c <__gedf2>:
    ba5c:	2804d53a 	srli	r2,r5,20
    ba60:	3806d53a 	srli	r3,r7,20
    ba64:	02000434 	movhi	r8,16
    ba68:	423fffc4 	addi	r8,r8,-1
    ba6c:	1081ffcc 	andi	r2,r2,2047
    ba70:	0241ffc4 	movi	r9,2047
    ba74:	2a14703a 	and	r10,r5,r8
    ba78:	18c1ffcc 	andi	r3,r3,2047
    ba7c:	3a10703a 	and	r8,r7,r8
    ba80:	280ad7fa 	srli	r5,r5,31
    ba84:	380ed7fa 	srli	r7,r7,31
    ba88:	12401d26 	beq	r2,r9,bb00 <__gedf2+0xa4>
    ba8c:	0241ffc4 	movi	r9,2047
    ba90:	1a401226 	beq	r3,r9,badc <__gedf2+0x80>
    ba94:	1000081e 	bne	r2,zero,bab8 <__gedf2+0x5c>
    ba98:	2296b03a 	or	r11,r4,r10
    ba9c:	5813003a 	cmpeq	r9,r11,zero
    baa0:	1800091e 	bne	r3,zero,bac8 <__gedf2+0x6c>
    baa4:	3218b03a 	or	r12,r6,r8
    baa8:	6000071e 	bne	r12,zero,bac8 <__gedf2+0x6c>
    baac:	0005883a 	mov	r2,zero
    bab0:	5800101e 	bne	r11,zero,baf4 <__gedf2+0x98>
    bab4:	f800283a 	ret
    bab8:	18000c1e 	bne	r3,zero,baec <__gedf2+0x90>
    babc:	3212b03a 	or	r9,r6,r8
    bac0:	48000c26 	beq	r9,zero,baf4 <__gedf2+0x98>
    bac4:	0013883a 	mov	r9,zero
    bac8:	39c03fcc 	andi	r7,r7,255
    bacc:	48000826 	beq	r9,zero,baf0 <__gedf2+0x94>
    bad0:	38000926 	beq	r7,zero,baf8 <__gedf2+0x9c>
    bad4:	00800044 	movi	r2,1
    bad8:	f800283a 	ret
    badc:	3212b03a 	or	r9,r6,r8
    bae0:	483fec26 	beq	r9,zero,ba94 <__alt_data_end+0xfffeba94>
    bae4:	00bfff84 	movi	r2,-2
    bae8:	f800283a 	ret
    baec:	39c03fcc 	andi	r7,r7,255
    baf0:	29c00626 	beq	r5,r7,bb0c <__gedf2+0xb0>
    baf4:	283ff726 	beq	r5,zero,bad4 <__alt_data_end+0xfffebad4>
    baf8:	00bfffc4 	movi	r2,-1
    bafc:	f800283a 	ret
    bb00:	2292b03a 	or	r9,r4,r10
    bb04:	483fe126 	beq	r9,zero,ba8c <__alt_data_end+0xfffeba8c>
    bb08:	003ff606 	br	bae4 <__alt_data_end+0xfffebae4>
    bb0c:	18bff916 	blt	r3,r2,baf4 <__alt_data_end+0xfffebaf4>
    bb10:	10c00316 	blt	r2,r3,bb20 <__gedf2+0xc4>
    bb14:	42bff736 	bltu	r8,r10,baf4 <__alt_data_end+0xfffebaf4>
    bb18:	52000326 	beq	r10,r8,bb28 <__gedf2+0xcc>
    bb1c:	5200042e 	bgeu	r10,r8,bb30 <__gedf2+0xd4>
    bb20:	283fec1e 	bne	r5,zero,bad4 <__alt_data_end+0xfffebad4>
    bb24:	003ff406 	br	baf8 <__alt_data_end+0xfffebaf8>
    bb28:	313ff236 	bltu	r6,r4,baf4 <__alt_data_end+0xfffebaf4>
    bb2c:	21bffc36 	bltu	r4,r6,bb20 <__alt_data_end+0xfffebb20>
    bb30:	0005883a 	mov	r2,zero
    bb34:	f800283a 	ret

0000bb38 <__ledf2>:
    bb38:	2804d53a 	srli	r2,r5,20
    bb3c:	3810d53a 	srli	r8,r7,20
    bb40:	00c00434 	movhi	r3,16
    bb44:	18ffffc4 	addi	r3,r3,-1
    bb48:	1081ffcc 	andi	r2,r2,2047
    bb4c:	0241ffc4 	movi	r9,2047
    bb50:	28d4703a 	and	r10,r5,r3
    bb54:	4201ffcc 	andi	r8,r8,2047
    bb58:	38c6703a 	and	r3,r7,r3
    bb5c:	280ad7fa 	srli	r5,r5,31
    bb60:	380ed7fa 	srli	r7,r7,31
    bb64:	12401f26 	beq	r2,r9,bbe4 <__ledf2+0xac>
    bb68:	0241ffc4 	movi	r9,2047
    bb6c:	42401426 	beq	r8,r9,bbc0 <__ledf2+0x88>
    bb70:	1000091e 	bne	r2,zero,bb98 <__ledf2+0x60>
    bb74:	2296b03a 	or	r11,r4,r10
    bb78:	5813003a 	cmpeq	r9,r11,zero
    bb7c:	29403fcc 	andi	r5,r5,255
    bb80:	40000a1e 	bne	r8,zero,bbac <__ledf2+0x74>
    bb84:	30d8b03a 	or	r12,r6,r3
    bb88:	6000081e 	bne	r12,zero,bbac <__ledf2+0x74>
    bb8c:	0005883a 	mov	r2,zero
    bb90:	5800111e 	bne	r11,zero,bbd8 <__ledf2+0xa0>
    bb94:	f800283a 	ret
    bb98:	29403fcc 	andi	r5,r5,255
    bb9c:	40000c1e 	bne	r8,zero,bbd0 <__ledf2+0x98>
    bba0:	30d2b03a 	or	r9,r6,r3
    bba4:	48000c26 	beq	r9,zero,bbd8 <__ledf2+0xa0>
    bba8:	0013883a 	mov	r9,zero
    bbac:	39c03fcc 	andi	r7,r7,255
    bbb0:	48000826 	beq	r9,zero,bbd4 <__ledf2+0x9c>
    bbb4:	38001126 	beq	r7,zero,bbfc <__ledf2+0xc4>
    bbb8:	00800044 	movi	r2,1
    bbbc:	f800283a 	ret
    bbc0:	30d2b03a 	or	r9,r6,r3
    bbc4:	483fea26 	beq	r9,zero,bb70 <__alt_data_end+0xfffebb70>
    bbc8:	00800084 	movi	r2,2
    bbcc:	f800283a 	ret
    bbd0:	39c03fcc 	andi	r7,r7,255
    bbd4:	39400726 	beq	r7,r5,bbf4 <__ledf2+0xbc>
    bbd8:	2800081e 	bne	r5,zero,bbfc <__ledf2+0xc4>
    bbdc:	00800044 	movi	r2,1
    bbe0:	f800283a 	ret
    bbe4:	2292b03a 	or	r9,r4,r10
    bbe8:	483fdf26 	beq	r9,zero,bb68 <__alt_data_end+0xfffebb68>
    bbec:	00800084 	movi	r2,2
    bbf0:	f800283a 	ret
    bbf4:	4080030e 	bge	r8,r2,bc04 <__ledf2+0xcc>
    bbf8:	383fef26 	beq	r7,zero,bbb8 <__alt_data_end+0xfffebbb8>
    bbfc:	00bfffc4 	movi	r2,-1
    bc00:	f800283a 	ret
    bc04:	123feb16 	blt	r2,r8,bbb4 <__alt_data_end+0xfffebbb4>
    bc08:	1abff336 	bltu	r3,r10,bbd8 <__alt_data_end+0xfffebbd8>
    bc0c:	50c00326 	beq	r10,r3,bc1c <__ledf2+0xe4>
    bc10:	50c0042e 	bgeu	r10,r3,bc24 <__ledf2+0xec>
    bc14:	283fe81e 	bne	r5,zero,bbb8 <__alt_data_end+0xfffebbb8>
    bc18:	003ff806 	br	bbfc <__alt_data_end+0xfffebbfc>
    bc1c:	313fee36 	bltu	r6,r4,bbd8 <__alt_data_end+0xfffebbd8>
    bc20:	21bffc36 	bltu	r4,r6,bc14 <__alt_data_end+0xfffebc14>
    bc24:	0005883a 	mov	r2,zero
    bc28:	f800283a 	ret

0000bc2c <__muldf3>:
    bc2c:	defff304 	addi	sp,sp,-52
    bc30:	2804d53a 	srli	r2,r5,20
    bc34:	dd800915 	stw	r22,36(sp)
    bc38:	282cd7fa 	srli	r22,r5,31
    bc3c:	dc000315 	stw	r16,12(sp)
    bc40:	04000434 	movhi	r16,16
    bc44:	dd400815 	stw	r21,32(sp)
    bc48:	dc800515 	stw	r18,20(sp)
    bc4c:	843fffc4 	addi	r16,r16,-1
    bc50:	dfc00c15 	stw	ra,48(sp)
    bc54:	df000b15 	stw	fp,44(sp)
    bc58:	ddc00a15 	stw	r23,40(sp)
    bc5c:	dd000715 	stw	r20,28(sp)
    bc60:	dcc00615 	stw	r19,24(sp)
    bc64:	dc400415 	stw	r17,16(sp)
    bc68:	1481ffcc 	andi	r18,r2,2047
    bc6c:	2c20703a 	and	r16,r5,r16
    bc70:	b02b883a 	mov	r21,r22
    bc74:	b2403fcc 	andi	r9,r22,255
    bc78:	90006026 	beq	r18,zero,bdfc <__muldf3+0x1d0>
    bc7c:	0081ffc4 	movi	r2,2047
    bc80:	2029883a 	mov	r20,r4
    bc84:	90803626 	beq	r18,r2,bd60 <__muldf3+0x134>
    bc88:	80800434 	orhi	r2,r16,16
    bc8c:	100490fa 	slli	r2,r2,3
    bc90:	2020d77a 	srli	r16,r4,29
    bc94:	202890fa 	slli	r20,r4,3
    bc98:	94bf0044 	addi	r18,r18,-1023
    bc9c:	80a0b03a 	or	r16,r16,r2
    bca0:	0027883a 	mov	r19,zero
    bca4:	0039883a 	mov	fp,zero
    bca8:	3804d53a 	srli	r2,r7,20
    bcac:	382ed7fa 	srli	r23,r7,31
    bcb0:	04400434 	movhi	r17,16
    bcb4:	8c7fffc4 	addi	r17,r17,-1
    bcb8:	1081ffcc 	andi	r2,r2,2047
    bcbc:	3011883a 	mov	r8,r6
    bcc0:	3c62703a 	and	r17,r7,r17
    bcc4:	ba803fcc 	andi	r10,r23,255
    bcc8:	10006d26 	beq	r2,zero,be80 <__muldf3+0x254>
    bccc:	00c1ffc4 	movi	r3,2047
    bcd0:	10c06526 	beq	r2,r3,be68 <__muldf3+0x23c>
    bcd4:	88c00434 	orhi	r3,r17,16
    bcd8:	180690fa 	slli	r3,r3,3
    bcdc:	3022d77a 	srli	r17,r6,29
    bce0:	301090fa 	slli	r8,r6,3
    bce4:	10bf0044 	addi	r2,r2,-1023
    bce8:	88e2b03a 	or	r17,r17,r3
    bcec:	000b883a 	mov	r5,zero
    bcf0:	9085883a 	add	r2,r18,r2
    bcf4:	2cc8b03a 	or	r4,r5,r19
    bcf8:	00c003c4 	movi	r3,15
    bcfc:	bdacf03a 	xor	r22,r23,r22
    bd00:	12c00044 	addi	r11,r2,1
    bd04:	19009936 	bltu	r3,r4,bf6c <__muldf3+0x340>
    bd08:	200890ba 	slli	r4,r4,2
    bd0c:	00c00074 	movhi	r3,1
    bd10:	18ef4804 	addi	r3,r3,-17120
    bd14:	20c9883a 	add	r4,r4,r3
    bd18:	20c00017 	ldw	r3,0(r4)
    bd1c:	1800683a 	jmp	r3
    bd20:	0000bf6c 	andhi	zero,zero,765
    bd24:	0000bd80 	call	bd8 <___vfprintf_internal_r+0x2c4>
    bd28:	0000bd80 	call	bd8 <___vfprintf_internal_r+0x2c4>
    bd2c:	0000bd7c 	xorhi	zero,zero,757
    bd30:	0000bf48 	cmpgei	zero,zero,765
    bd34:	0000bf48 	cmpgei	zero,zero,765
    bd38:	0000bf30 	cmpltui	zero,zero,764
    bd3c:	0000bd7c 	xorhi	zero,zero,757
    bd40:	0000bf48 	cmpgei	zero,zero,765
    bd44:	0000bf30 	cmpltui	zero,zero,764
    bd48:	0000bf48 	cmpgei	zero,zero,765
    bd4c:	0000bd7c 	xorhi	zero,zero,757
    bd50:	0000bf58 	cmpnei	zero,zero,765
    bd54:	0000bf58 	cmpnei	zero,zero,765
    bd58:	0000bf58 	cmpnei	zero,zero,765
    bd5c:	0000c174 	movhi	zero,773
    bd60:	2404b03a 	or	r2,r4,r16
    bd64:	10006f1e 	bne	r2,zero,bf24 <__muldf3+0x2f8>
    bd68:	04c00204 	movi	r19,8
    bd6c:	0021883a 	mov	r16,zero
    bd70:	0029883a 	mov	r20,zero
    bd74:	07000084 	movi	fp,2
    bd78:	003fcb06 	br	bca8 <__alt_data_end+0xfffebca8>
    bd7c:	502d883a 	mov	r22,r10
    bd80:	00800084 	movi	r2,2
    bd84:	28805726 	beq	r5,r2,bee4 <__muldf3+0x2b8>
    bd88:	008000c4 	movi	r2,3
    bd8c:	28816626 	beq	r5,r2,c328 <__muldf3+0x6fc>
    bd90:	00800044 	movi	r2,1
    bd94:	2881411e 	bne	r5,r2,c29c <__muldf3+0x670>
    bd98:	b02b883a 	mov	r21,r22
    bd9c:	0005883a 	mov	r2,zero
    bda0:	000b883a 	mov	r5,zero
    bda4:	0029883a 	mov	r20,zero
    bda8:	1004953a 	slli	r2,r2,20
    bdac:	a8c03fcc 	andi	r3,r21,255
    bdb0:	04400434 	movhi	r17,16
    bdb4:	8c7fffc4 	addi	r17,r17,-1
    bdb8:	180697fa 	slli	r3,r3,31
    bdbc:	2c4a703a 	and	r5,r5,r17
    bdc0:	288ab03a 	or	r5,r5,r2
    bdc4:	28c6b03a 	or	r3,r5,r3
    bdc8:	a005883a 	mov	r2,r20
    bdcc:	dfc00c17 	ldw	ra,48(sp)
    bdd0:	df000b17 	ldw	fp,44(sp)
    bdd4:	ddc00a17 	ldw	r23,40(sp)
    bdd8:	dd800917 	ldw	r22,36(sp)
    bddc:	dd400817 	ldw	r21,32(sp)
    bde0:	dd000717 	ldw	r20,28(sp)
    bde4:	dcc00617 	ldw	r19,24(sp)
    bde8:	dc800517 	ldw	r18,20(sp)
    bdec:	dc400417 	ldw	r17,16(sp)
    bdf0:	dc000317 	ldw	r16,12(sp)
    bdf4:	dec00d04 	addi	sp,sp,52
    bdf8:	f800283a 	ret
    bdfc:	2404b03a 	or	r2,r4,r16
    be00:	2027883a 	mov	r19,r4
    be04:	10004226 	beq	r2,zero,bf10 <__muldf3+0x2e4>
    be08:	8000fc26 	beq	r16,zero,c1fc <__muldf3+0x5d0>
    be0c:	8009883a 	mov	r4,r16
    be10:	d9800215 	stw	r6,8(sp)
    be14:	d9c00015 	stw	r7,0(sp)
    be18:	da400115 	stw	r9,4(sp)
    be1c:	000ce440 	call	ce44 <__clzsi2>
    be20:	d9800217 	ldw	r6,8(sp)
    be24:	d9c00017 	ldw	r7,0(sp)
    be28:	da400117 	ldw	r9,4(sp)
    be2c:	113ffd44 	addi	r4,r2,-11
    be30:	00c00704 	movi	r3,28
    be34:	1900ed16 	blt	r3,r4,c1ec <__muldf3+0x5c0>
    be38:	00c00744 	movi	r3,29
    be3c:	147ffe04 	addi	r17,r2,-8
    be40:	1907c83a 	sub	r3,r3,r4
    be44:	8460983a 	sll	r16,r16,r17
    be48:	98c6d83a 	srl	r3,r19,r3
    be4c:	9c68983a 	sll	r20,r19,r17
    be50:	1c20b03a 	or	r16,r3,r16
    be54:	1080fcc4 	addi	r2,r2,1011
    be58:	00a5c83a 	sub	r18,zero,r2
    be5c:	0027883a 	mov	r19,zero
    be60:	0039883a 	mov	fp,zero
    be64:	003f9006 	br	bca8 <__alt_data_end+0xfffebca8>
    be68:	3446b03a 	or	r3,r6,r17
    be6c:	1800261e 	bne	r3,zero,bf08 <__muldf3+0x2dc>
    be70:	0023883a 	mov	r17,zero
    be74:	0011883a 	mov	r8,zero
    be78:	01400084 	movi	r5,2
    be7c:	003f9c06 	br	bcf0 <__alt_data_end+0xfffebcf0>
    be80:	3446b03a 	or	r3,r6,r17
    be84:	18001c26 	beq	r3,zero,bef8 <__muldf3+0x2cc>
    be88:	8800ce26 	beq	r17,zero,c1c4 <__muldf3+0x598>
    be8c:	8809883a 	mov	r4,r17
    be90:	d9800215 	stw	r6,8(sp)
    be94:	da400115 	stw	r9,4(sp)
    be98:	da800015 	stw	r10,0(sp)
    be9c:	000ce440 	call	ce44 <__clzsi2>
    bea0:	d9800217 	ldw	r6,8(sp)
    bea4:	da400117 	ldw	r9,4(sp)
    bea8:	da800017 	ldw	r10,0(sp)
    beac:	113ffd44 	addi	r4,r2,-11
    beb0:	00c00704 	movi	r3,28
    beb4:	1900bf16 	blt	r3,r4,c1b4 <__muldf3+0x588>
    beb8:	00c00744 	movi	r3,29
    bebc:	123ffe04 	addi	r8,r2,-8
    bec0:	1907c83a 	sub	r3,r3,r4
    bec4:	8a22983a 	sll	r17,r17,r8
    bec8:	30c6d83a 	srl	r3,r6,r3
    becc:	3210983a 	sll	r8,r6,r8
    bed0:	1c62b03a 	or	r17,r3,r17
    bed4:	1080fcc4 	addi	r2,r2,1011
    bed8:	0085c83a 	sub	r2,zero,r2
    bedc:	000b883a 	mov	r5,zero
    bee0:	003f8306 	br	bcf0 <__alt_data_end+0xfffebcf0>
    bee4:	b02b883a 	mov	r21,r22
    bee8:	0081ffc4 	movi	r2,2047
    beec:	000b883a 	mov	r5,zero
    bef0:	0029883a 	mov	r20,zero
    bef4:	003fac06 	br	bda8 <__alt_data_end+0xfffebda8>
    bef8:	0023883a 	mov	r17,zero
    befc:	0011883a 	mov	r8,zero
    bf00:	01400044 	movi	r5,1
    bf04:	003f7a06 	br	bcf0 <__alt_data_end+0xfffebcf0>
    bf08:	014000c4 	movi	r5,3
    bf0c:	003f7806 	br	bcf0 <__alt_data_end+0xfffebcf0>
    bf10:	04c00104 	movi	r19,4
    bf14:	0021883a 	mov	r16,zero
    bf18:	0029883a 	mov	r20,zero
    bf1c:	07000044 	movi	fp,1
    bf20:	003f6106 	br	bca8 <__alt_data_end+0xfffebca8>
    bf24:	04c00304 	movi	r19,12
    bf28:	070000c4 	movi	fp,3
    bf2c:	003f5e06 	br	bca8 <__alt_data_end+0xfffebca8>
    bf30:	01400434 	movhi	r5,16
    bf34:	002b883a 	mov	r21,zero
    bf38:	297fffc4 	addi	r5,r5,-1
    bf3c:	053fffc4 	movi	r20,-1
    bf40:	0081ffc4 	movi	r2,2047
    bf44:	003f9806 	br	bda8 <__alt_data_end+0xfffebda8>
    bf48:	8023883a 	mov	r17,r16
    bf4c:	a011883a 	mov	r8,r20
    bf50:	e00b883a 	mov	r5,fp
    bf54:	003f8a06 	br	bd80 <__alt_data_end+0xfffebd80>
    bf58:	8023883a 	mov	r17,r16
    bf5c:	a011883a 	mov	r8,r20
    bf60:	482d883a 	mov	r22,r9
    bf64:	e00b883a 	mov	r5,fp
    bf68:	003f8506 	br	bd80 <__alt_data_end+0xfffebd80>
    bf6c:	a00ad43a 	srli	r5,r20,16
    bf70:	401ad43a 	srli	r13,r8,16
    bf74:	a53fffcc 	andi	r20,r20,65535
    bf78:	423fffcc 	andi	r8,r8,65535
    bf7c:	4519383a 	mul	r12,r8,r20
    bf80:	4147383a 	mul	r3,r8,r5
    bf84:	6d09383a 	mul	r4,r13,r20
    bf88:	600cd43a 	srli	r6,r12,16
    bf8c:	2b5d383a 	mul	r14,r5,r13
    bf90:	20c9883a 	add	r4,r4,r3
    bf94:	310d883a 	add	r6,r6,r4
    bf98:	30c0022e 	bgeu	r6,r3,bfa4 <__muldf3+0x378>
    bf9c:	00c00074 	movhi	r3,1
    bfa0:	70dd883a 	add	r14,r14,r3
    bfa4:	8826d43a 	srli	r19,r17,16
    bfa8:	8bffffcc 	andi	r15,r17,65535
    bfac:	7d23383a 	mul	r17,r15,r20
    bfb0:	7949383a 	mul	r4,r15,r5
    bfb4:	9d29383a 	mul	r20,r19,r20
    bfb8:	8814d43a 	srli	r10,r17,16
    bfbc:	3012943a 	slli	r9,r6,16
    bfc0:	a129883a 	add	r20,r20,r4
    bfc4:	633fffcc 	andi	r12,r12,65535
    bfc8:	5515883a 	add	r10,r10,r20
    bfcc:	3006d43a 	srli	r3,r6,16
    bfd0:	4b13883a 	add	r9,r9,r12
    bfd4:	2ccb383a 	mul	r5,r5,r19
    bfd8:	5100022e 	bgeu	r10,r4,bfe4 <__muldf3+0x3b8>
    bfdc:	01000074 	movhi	r4,1
    bfe0:	290b883a 	add	r5,r5,r4
    bfe4:	802ad43a 	srli	r21,r16,16
    bfe8:	843fffcc 	andi	r16,r16,65535
    bfec:	440d383a 	mul	r6,r8,r16
    bff0:	4565383a 	mul	r18,r8,r21
    bff4:	8349383a 	mul	r4,r16,r13
    bff8:	500e943a 	slli	r7,r10,16
    bffc:	3010d43a 	srli	r8,r6,16
    c000:	5028d43a 	srli	r20,r10,16
    c004:	2489883a 	add	r4,r4,r18
    c008:	8abfffcc 	andi	r10,r17,65535
    c00c:	3a95883a 	add	r10,r7,r10
    c010:	4119883a 	add	r12,r8,r4
    c014:	a169883a 	add	r20,r20,r5
    c018:	1a87883a 	add	r3,r3,r10
    c01c:	6d5b383a 	mul	r13,r13,r21
    c020:	6480022e 	bgeu	r12,r18,c02c <__muldf3+0x400>
    c024:	01000074 	movhi	r4,1
    c028:	691b883a 	add	r13,r13,r4
    c02c:	7c25383a 	mul	r18,r15,r16
    c030:	7d4b383a 	mul	r5,r15,r21
    c034:	84cf383a 	mul	r7,r16,r19
    c038:	901ed43a 	srli	r15,r18,16
    c03c:	6008d43a 	srli	r4,r12,16
    c040:	6010943a 	slli	r8,r12,16
    c044:	394f883a 	add	r7,r7,r5
    c048:	333fffcc 	andi	r12,r6,65535
    c04c:	79df883a 	add	r15,r15,r7
    c050:	235b883a 	add	r13,r4,r13
    c054:	9d63383a 	mul	r17,r19,r21
    c058:	4309883a 	add	r4,r8,r12
    c05c:	7940022e 	bgeu	r15,r5,c068 <__muldf3+0x43c>
    c060:	01400074 	movhi	r5,1
    c064:	8963883a 	add	r17,r17,r5
    c068:	780a943a 	slli	r5,r15,16
    c06c:	91bfffcc 	andi	r6,r18,65535
    c070:	70c7883a 	add	r3,r14,r3
    c074:	298d883a 	add	r6,r5,r6
    c078:	1a8f803a 	cmpltu	r7,r3,r10
    c07c:	350b883a 	add	r5,r6,r20
    c080:	20c7883a 	add	r3,r4,r3
    c084:	3955883a 	add	r10,r7,r5
    c088:	1909803a 	cmpltu	r4,r3,r4
    c08c:	6a91883a 	add	r8,r13,r10
    c090:	780cd43a 	srli	r6,r15,16
    c094:	2219883a 	add	r12,r4,r8
    c098:	2d0b803a 	cmpltu	r5,r5,r20
    c09c:	51cf803a 	cmpltu	r7,r10,r7
    c0a0:	29ceb03a 	or	r7,r5,r7
    c0a4:	4351803a 	cmpltu	r8,r8,r13
    c0a8:	610b803a 	cmpltu	r5,r12,r4
    c0ac:	4148b03a 	or	r4,r8,r5
    c0b0:	398f883a 	add	r7,r7,r6
    c0b4:	3909883a 	add	r4,r7,r4
    c0b8:	1810927a 	slli	r8,r3,9
    c0bc:	2449883a 	add	r4,r4,r17
    c0c0:	2008927a 	slli	r4,r4,9
    c0c4:	6022d5fa 	srli	r17,r12,23
    c0c8:	1806d5fa 	srli	r3,r3,23
    c0cc:	4252b03a 	or	r9,r8,r9
    c0d0:	600a927a 	slli	r5,r12,9
    c0d4:	4810c03a 	cmpne	r8,r9,zero
    c0d8:	2462b03a 	or	r17,r4,r17
    c0dc:	40c6b03a 	or	r3,r8,r3
    c0e0:	8900402c 	andhi	r4,r17,256
    c0e4:	1950b03a 	or	r8,r3,r5
    c0e8:	20000726 	beq	r4,zero,c108 <__muldf3+0x4dc>
    c0ec:	4006d07a 	srli	r3,r8,1
    c0f0:	880497fa 	slli	r2,r17,31
    c0f4:	4200004c 	andi	r8,r8,1
    c0f8:	8822d07a 	srli	r17,r17,1
    c0fc:	1a10b03a 	or	r8,r3,r8
    c100:	1210b03a 	or	r8,r2,r8
    c104:	5805883a 	mov	r2,r11
    c108:	1140ffc4 	addi	r5,r2,1023
    c10c:	0140440e 	bge	zero,r5,c220 <__muldf3+0x5f4>
    c110:	40c001cc 	andi	r3,r8,7
    c114:	18000726 	beq	r3,zero,c134 <__muldf3+0x508>
    c118:	40c003cc 	andi	r3,r8,15
    c11c:	01000104 	movi	r4,4
    c120:	19000426 	beq	r3,r4,c134 <__muldf3+0x508>
    c124:	4107883a 	add	r3,r8,r4
    c128:	1a11803a 	cmpltu	r8,r3,r8
    c12c:	8a23883a 	add	r17,r17,r8
    c130:	1811883a 	mov	r8,r3
    c134:	88c0402c 	andhi	r3,r17,256
    c138:	18000426 	beq	r3,zero,c14c <__muldf3+0x520>
    c13c:	11410004 	addi	r5,r2,1024
    c140:	00bfc034 	movhi	r2,65280
    c144:	10bfffc4 	addi	r2,r2,-1
    c148:	88a2703a 	and	r17,r17,r2
    c14c:	0081ff84 	movi	r2,2046
    c150:	117f6416 	blt	r2,r5,bee4 <__alt_data_end+0xfffebee4>
    c154:	8828977a 	slli	r20,r17,29
    c158:	4010d0fa 	srli	r8,r8,3
    c15c:	8822927a 	slli	r17,r17,9
    c160:	2881ffcc 	andi	r2,r5,2047
    c164:	a228b03a 	or	r20,r20,r8
    c168:	880ad33a 	srli	r5,r17,12
    c16c:	b02b883a 	mov	r21,r22
    c170:	003f0d06 	br	bda8 <__alt_data_end+0xfffebda8>
    c174:	8080022c 	andhi	r2,r16,8
    c178:	10000926 	beq	r2,zero,c1a0 <__muldf3+0x574>
    c17c:	8880022c 	andhi	r2,r17,8
    c180:	1000071e 	bne	r2,zero,c1a0 <__muldf3+0x574>
    c184:	00800434 	movhi	r2,16
    c188:	89400234 	orhi	r5,r17,8
    c18c:	10bfffc4 	addi	r2,r2,-1
    c190:	b82b883a 	mov	r21,r23
    c194:	288a703a 	and	r5,r5,r2
    c198:	4029883a 	mov	r20,r8
    c19c:	003f6806 	br	bf40 <__alt_data_end+0xfffebf40>
    c1a0:	00800434 	movhi	r2,16
    c1a4:	81400234 	orhi	r5,r16,8
    c1a8:	10bfffc4 	addi	r2,r2,-1
    c1ac:	288a703a 	and	r5,r5,r2
    c1b0:	003f6306 	br	bf40 <__alt_data_end+0xfffebf40>
    c1b4:	147ff604 	addi	r17,r2,-40
    c1b8:	3462983a 	sll	r17,r6,r17
    c1bc:	0011883a 	mov	r8,zero
    c1c0:	003f4406 	br	bed4 <__alt_data_end+0xfffebed4>
    c1c4:	3009883a 	mov	r4,r6
    c1c8:	d9800215 	stw	r6,8(sp)
    c1cc:	da400115 	stw	r9,4(sp)
    c1d0:	da800015 	stw	r10,0(sp)
    c1d4:	000ce440 	call	ce44 <__clzsi2>
    c1d8:	10800804 	addi	r2,r2,32
    c1dc:	da800017 	ldw	r10,0(sp)
    c1e0:	da400117 	ldw	r9,4(sp)
    c1e4:	d9800217 	ldw	r6,8(sp)
    c1e8:	003f3006 	br	beac <__alt_data_end+0xfffebeac>
    c1ec:	143ff604 	addi	r16,r2,-40
    c1f0:	9c20983a 	sll	r16,r19,r16
    c1f4:	0029883a 	mov	r20,zero
    c1f8:	003f1606 	br	be54 <__alt_data_end+0xfffebe54>
    c1fc:	d9800215 	stw	r6,8(sp)
    c200:	d9c00015 	stw	r7,0(sp)
    c204:	da400115 	stw	r9,4(sp)
    c208:	000ce440 	call	ce44 <__clzsi2>
    c20c:	10800804 	addi	r2,r2,32
    c210:	da400117 	ldw	r9,4(sp)
    c214:	d9c00017 	ldw	r7,0(sp)
    c218:	d9800217 	ldw	r6,8(sp)
    c21c:	003f0306 	br	be2c <__alt_data_end+0xfffebe2c>
    c220:	00c00044 	movi	r3,1
    c224:	1947c83a 	sub	r3,r3,r5
    c228:	00800e04 	movi	r2,56
    c22c:	10feda16 	blt	r2,r3,bd98 <__alt_data_end+0xfffebd98>
    c230:	008007c4 	movi	r2,31
    c234:	10c01b16 	blt	r2,r3,c2a4 <__muldf3+0x678>
    c238:	00800804 	movi	r2,32
    c23c:	10c5c83a 	sub	r2,r2,r3
    c240:	888a983a 	sll	r5,r17,r2
    c244:	40c8d83a 	srl	r4,r8,r3
    c248:	4084983a 	sll	r2,r8,r2
    c24c:	88e2d83a 	srl	r17,r17,r3
    c250:	2906b03a 	or	r3,r5,r4
    c254:	1004c03a 	cmpne	r2,r2,zero
    c258:	1886b03a 	or	r3,r3,r2
    c25c:	188001cc 	andi	r2,r3,7
    c260:	10000726 	beq	r2,zero,c280 <__muldf3+0x654>
    c264:	188003cc 	andi	r2,r3,15
    c268:	01000104 	movi	r4,4
    c26c:	11000426 	beq	r2,r4,c280 <__muldf3+0x654>
    c270:	1805883a 	mov	r2,r3
    c274:	10c00104 	addi	r3,r2,4
    c278:	1885803a 	cmpltu	r2,r3,r2
    c27c:	88a3883a 	add	r17,r17,r2
    c280:	8880202c 	andhi	r2,r17,128
    c284:	10001c26 	beq	r2,zero,c2f8 <__muldf3+0x6cc>
    c288:	b02b883a 	mov	r21,r22
    c28c:	00800044 	movi	r2,1
    c290:	000b883a 	mov	r5,zero
    c294:	0029883a 	mov	r20,zero
    c298:	003ec306 	br	bda8 <__alt_data_end+0xfffebda8>
    c29c:	5805883a 	mov	r2,r11
    c2a0:	003f9906 	br	c108 <__alt_data_end+0xfffec108>
    c2a4:	00bff844 	movi	r2,-31
    c2a8:	1145c83a 	sub	r2,r2,r5
    c2ac:	8888d83a 	srl	r4,r17,r2
    c2b0:	00800804 	movi	r2,32
    c2b4:	18801a26 	beq	r3,r2,c320 <__muldf3+0x6f4>
    c2b8:	00801004 	movi	r2,64
    c2bc:	10c5c83a 	sub	r2,r2,r3
    c2c0:	8884983a 	sll	r2,r17,r2
    c2c4:	1204b03a 	or	r2,r2,r8
    c2c8:	1004c03a 	cmpne	r2,r2,zero
    c2cc:	2084b03a 	or	r2,r4,r2
    c2d0:	144001cc 	andi	r17,r2,7
    c2d4:	88000d1e 	bne	r17,zero,c30c <__muldf3+0x6e0>
    c2d8:	000b883a 	mov	r5,zero
    c2dc:	1028d0fa 	srli	r20,r2,3
    c2e0:	b02b883a 	mov	r21,r22
    c2e4:	0005883a 	mov	r2,zero
    c2e8:	a468b03a 	or	r20,r20,r17
    c2ec:	003eae06 	br	bda8 <__alt_data_end+0xfffebda8>
    c2f0:	1007883a 	mov	r3,r2
    c2f4:	0023883a 	mov	r17,zero
    c2f8:	880a927a 	slli	r5,r17,9
    c2fc:	1805883a 	mov	r2,r3
    c300:	8822977a 	slli	r17,r17,29
    c304:	280ad33a 	srli	r5,r5,12
    c308:	003ff406 	br	c2dc <__alt_data_end+0xfffec2dc>
    c30c:	10c003cc 	andi	r3,r2,15
    c310:	01000104 	movi	r4,4
    c314:	193ff626 	beq	r3,r4,c2f0 <__alt_data_end+0xfffec2f0>
    c318:	0023883a 	mov	r17,zero
    c31c:	003fd506 	br	c274 <__alt_data_end+0xfffec274>
    c320:	0005883a 	mov	r2,zero
    c324:	003fe706 	br	c2c4 <__alt_data_end+0xfffec2c4>
    c328:	00800434 	movhi	r2,16
    c32c:	89400234 	orhi	r5,r17,8
    c330:	10bfffc4 	addi	r2,r2,-1
    c334:	b02b883a 	mov	r21,r22
    c338:	288a703a 	and	r5,r5,r2
    c33c:	4029883a 	mov	r20,r8
    c340:	003eff06 	br	bf40 <__alt_data_end+0xfffebf40>

0000c344 <__subdf3>:
    c344:	02000434 	movhi	r8,16
    c348:	423fffc4 	addi	r8,r8,-1
    c34c:	defffb04 	addi	sp,sp,-20
    c350:	2a14703a 	and	r10,r5,r8
    c354:	3812d53a 	srli	r9,r7,20
    c358:	3a10703a 	and	r8,r7,r8
    c35c:	2006d77a 	srli	r3,r4,29
    c360:	3004d77a 	srli	r2,r6,29
    c364:	dc000015 	stw	r16,0(sp)
    c368:	501490fa 	slli	r10,r10,3
    c36c:	2820d53a 	srli	r16,r5,20
    c370:	401090fa 	slli	r8,r8,3
    c374:	dc800215 	stw	r18,8(sp)
    c378:	dc400115 	stw	r17,4(sp)
    c37c:	dfc00415 	stw	ra,16(sp)
    c380:	202290fa 	slli	r17,r4,3
    c384:	dcc00315 	stw	r19,12(sp)
    c388:	4a41ffcc 	andi	r9,r9,2047
    c38c:	0101ffc4 	movi	r4,2047
    c390:	2824d7fa 	srli	r18,r5,31
    c394:	8401ffcc 	andi	r16,r16,2047
    c398:	50c6b03a 	or	r3,r10,r3
    c39c:	380ed7fa 	srli	r7,r7,31
    c3a0:	408ab03a 	or	r5,r8,r2
    c3a4:	300c90fa 	slli	r6,r6,3
    c3a8:	49009626 	beq	r9,r4,c604 <__subdf3+0x2c0>
    c3ac:	39c0005c 	xori	r7,r7,1
    c3b0:	8245c83a 	sub	r2,r16,r9
    c3b4:	3c807426 	beq	r7,r18,c588 <__subdf3+0x244>
    c3b8:	0080af0e 	bge	zero,r2,c678 <__subdf3+0x334>
    c3bc:	48002a1e 	bne	r9,zero,c468 <__subdf3+0x124>
    c3c0:	2988b03a 	or	r4,r5,r6
    c3c4:	20009a1e 	bne	r4,zero,c630 <__subdf3+0x2ec>
    c3c8:	888001cc 	andi	r2,r17,7
    c3cc:	10000726 	beq	r2,zero,c3ec <__subdf3+0xa8>
    c3d0:	888003cc 	andi	r2,r17,15
    c3d4:	01000104 	movi	r4,4
    c3d8:	11000426 	beq	r2,r4,c3ec <__subdf3+0xa8>
    c3dc:	890b883a 	add	r5,r17,r4
    c3e0:	2c63803a 	cmpltu	r17,r5,r17
    c3e4:	1c47883a 	add	r3,r3,r17
    c3e8:	2823883a 	mov	r17,r5
    c3ec:	1880202c 	andhi	r2,r3,128
    c3f0:	10005926 	beq	r2,zero,c558 <__subdf3+0x214>
    c3f4:	84000044 	addi	r16,r16,1
    c3f8:	0081ffc4 	movi	r2,2047
    c3fc:	8080be26 	beq	r16,r2,c6f8 <__subdf3+0x3b4>
    c400:	017fe034 	movhi	r5,65408
    c404:	297fffc4 	addi	r5,r5,-1
    c408:	1946703a 	and	r3,r3,r5
    c40c:	1804977a 	slli	r2,r3,29
    c410:	1806927a 	slli	r3,r3,9
    c414:	8822d0fa 	srli	r17,r17,3
    c418:	8401ffcc 	andi	r16,r16,2047
    c41c:	180ad33a 	srli	r5,r3,12
    c420:	9100004c 	andi	r4,r18,1
    c424:	1444b03a 	or	r2,r2,r17
    c428:	80c1ffcc 	andi	r3,r16,2047
    c42c:	1820953a 	slli	r16,r3,20
    c430:	20c03fcc 	andi	r3,r4,255
    c434:	180897fa 	slli	r4,r3,31
    c438:	00c00434 	movhi	r3,16
    c43c:	18ffffc4 	addi	r3,r3,-1
    c440:	28c6703a 	and	r3,r5,r3
    c444:	1c06b03a 	or	r3,r3,r16
    c448:	1906b03a 	or	r3,r3,r4
    c44c:	dfc00417 	ldw	ra,16(sp)
    c450:	dcc00317 	ldw	r19,12(sp)
    c454:	dc800217 	ldw	r18,8(sp)
    c458:	dc400117 	ldw	r17,4(sp)
    c45c:	dc000017 	ldw	r16,0(sp)
    c460:	dec00504 	addi	sp,sp,20
    c464:	f800283a 	ret
    c468:	0101ffc4 	movi	r4,2047
    c46c:	813fd626 	beq	r16,r4,c3c8 <__alt_data_end+0xfffec3c8>
    c470:	29402034 	orhi	r5,r5,128
    c474:	01000e04 	movi	r4,56
    c478:	2080a316 	blt	r4,r2,c708 <__subdf3+0x3c4>
    c47c:	010007c4 	movi	r4,31
    c480:	2080c616 	blt	r4,r2,c79c <__subdf3+0x458>
    c484:	01000804 	movi	r4,32
    c488:	2089c83a 	sub	r4,r4,r2
    c48c:	2910983a 	sll	r8,r5,r4
    c490:	308ed83a 	srl	r7,r6,r2
    c494:	3108983a 	sll	r4,r6,r4
    c498:	2884d83a 	srl	r2,r5,r2
    c49c:	41ccb03a 	or	r6,r8,r7
    c4a0:	2008c03a 	cmpne	r4,r4,zero
    c4a4:	310cb03a 	or	r6,r6,r4
    c4a8:	898dc83a 	sub	r6,r17,r6
    c4ac:	89a3803a 	cmpltu	r17,r17,r6
    c4b0:	1887c83a 	sub	r3,r3,r2
    c4b4:	1c47c83a 	sub	r3,r3,r17
    c4b8:	3023883a 	mov	r17,r6
    c4bc:	1880202c 	andhi	r2,r3,128
    c4c0:	10002326 	beq	r2,zero,c550 <__subdf3+0x20c>
    c4c4:	04c02034 	movhi	r19,128
    c4c8:	9cffffc4 	addi	r19,r19,-1
    c4cc:	1ce6703a 	and	r19,r3,r19
    c4d0:	98007a26 	beq	r19,zero,c6bc <__subdf3+0x378>
    c4d4:	9809883a 	mov	r4,r19
    c4d8:	000ce440 	call	ce44 <__clzsi2>
    c4dc:	113ffe04 	addi	r4,r2,-8
    c4e0:	00c007c4 	movi	r3,31
    c4e4:	19007b16 	blt	r3,r4,c6d4 <__subdf3+0x390>
    c4e8:	00800804 	movi	r2,32
    c4ec:	1105c83a 	sub	r2,r2,r4
    c4f0:	8884d83a 	srl	r2,r17,r2
    c4f4:	9906983a 	sll	r3,r19,r4
    c4f8:	8922983a 	sll	r17,r17,r4
    c4fc:	10c4b03a 	or	r2,r2,r3
    c500:	24007816 	blt	r4,r16,c6e4 <__subdf3+0x3a0>
    c504:	2421c83a 	sub	r16,r4,r16
    c508:	80c00044 	addi	r3,r16,1
    c50c:	010007c4 	movi	r4,31
    c510:	20c09516 	blt	r4,r3,c768 <__subdf3+0x424>
    c514:	01400804 	movi	r5,32
    c518:	28cbc83a 	sub	r5,r5,r3
    c51c:	88c8d83a 	srl	r4,r17,r3
    c520:	8962983a 	sll	r17,r17,r5
    c524:	114a983a 	sll	r5,r2,r5
    c528:	10c6d83a 	srl	r3,r2,r3
    c52c:	8804c03a 	cmpne	r2,r17,zero
    c530:	290ab03a 	or	r5,r5,r4
    c534:	28a2b03a 	or	r17,r5,r2
    c538:	0021883a 	mov	r16,zero
    c53c:	003fa206 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c540:	2090b03a 	or	r8,r4,r2
    c544:	40018e26 	beq	r8,zero,cb80 <__subdf3+0x83c>
    c548:	1007883a 	mov	r3,r2
    c54c:	2023883a 	mov	r17,r4
    c550:	888001cc 	andi	r2,r17,7
    c554:	103f9e1e 	bne	r2,zero,c3d0 <__alt_data_end+0xfffec3d0>
    c558:	1804977a 	slli	r2,r3,29
    c55c:	8822d0fa 	srli	r17,r17,3
    c560:	1810d0fa 	srli	r8,r3,3
    c564:	9100004c 	andi	r4,r18,1
    c568:	1444b03a 	or	r2,r2,r17
    c56c:	00c1ffc4 	movi	r3,2047
    c570:	80c02826 	beq	r16,r3,c614 <__subdf3+0x2d0>
    c574:	01400434 	movhi	r5,16
    c578:	297fffc4 	addi	r5,r5,-1
    c57c:	80e0703a 	and	r16,r16,r3
    c580:	414a703a 	and	r5,r8,r5
    c584:	003fa806 	br	c428 <__alt_data_end+0xfffec428>
    c588:	0080630e 	bge	zero,r2,c718 <__subdf3+0x3d4>
    c58c:	48003026 	beq	r9,zero,c650 <__subdf3+0x30c>
    c590:	0101ffc4 	movi	r4,2047
    c594:	813f8c26 	beq	r16,r4,c3c8 <__alt_data_end+0xfffec3c8>
    c598:	29402034 	orhi	r5,r5,128
    c59c:	01000e04 	movi	r4,56
    c5a0:	2080a90e 	bge	r4,r2,c848 <__subdf3+0x504>
    c5a4:	298cb03a 	or	r6,r5,r6
    c5a8:	3012c03a 	cmpne	r9,r6,zero
    c5ac:	0005883a 	mov	r2,zero
    c5b0:	4c53883a 	add	r9,r9,r17
    c5b4:	4c63803a 	cmpltu	r17,r9,r17
    c5b8:	10c7883a 	add	r3,r2,r3
    c5bc:	88c7883a 	add	r3,r17,r3
    c5c0:	4823883a 	mov	r17,r9
    c5c4:	1880202c 	andhi	r2,r3,128
    c5c8:	1000d026 	beq	r2,zero,c90c <__subdf3+0x5c8>
    c5cc:	84000044 	addi	r16,r16,1
    c5d0:	0081ffc4 	movi	r2,2047
    c5d4:	8080fe26 	beq	r16,r2,c9d0 <__subdf3+0x68c>
    c5d8:	00bfe034 	movhi	r2,65408
    c5dc:	10bfffc4 	addi	r2,r2,-1
    c5e0:	1886703a 	and	r3,r3,r2
    c5e4:	880ad07a 	srli	r5,r17,1
    c5e8:	180497fa 	slli	r2,r3,31
    c5ec:	8900004c 	andi	r4,r17,1
    c5f0:	2922b03a 	or	r17,r5,r4
    c5f4:	1806d07a 	srli	r3,r3,1
    c5f8:	1462b03a 	or	r17,r2,r17
    c5fc:	3825883a 	mov	r18,r7
    c600:	003f7106 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c604:	2984b03a 	or	r2,r5,r6
    c608:	103f6826 	beq	r2,zero,c3ac <__alt_data_end+0xfffec3ac>
    c60c:	39c03fcc 	andi	r7,r7,255
    c610:	003f6706 	br	c3b0 <__alt_data_end+0xfffec3b0>
    c614:	4086b03a 	or	r3,r8,r2
    c618:	18015226 	beq	r3,zero,cb64 <__subdf3+0x820>
    c61c:	00c00434 	movhi	r3,16
    c620:	41400234 	orhi	r5,r8,8
    c624:	18ffffc4 	addi	r3,r3,-1
    c628:	28ca703a 	and	r5,r5,r3
    c62c:	003f7e06 	br	c428 <__alt_data_end+0xfffec428>
    c630:	10bfffc4 	addi	r2,r2,-1
    c634:	1000491e 	bne	r2,zero,c75c <__subdf3+0x418>
    c638:	898fc83a 	sub	r7,r17,r6
    c63c:	89e3803a 	cmpltu	r17,r17,r7
    c640:	1947c83a 	sub	r3,r3,r5
    c644:	1c47c83a 	sub	r3,r3,r17
    c648:	3823883a 	mov	r17,r7
    c64c:	003f9b06 	br	c4bc <__alt_data_end+0xfffec4bc>
    c650:	2988b03a 	or	r4,r5,r6
    c654:	203f5c26 	beq	r4,zero,c3c8 <__alt_data_end+0xfffec3c8>
    c658:	10bfffc4 	addi	r2,r2,-1
    c65c:	1000931e 	bne	r2,zero,c8ac <__subdf3+0x568>
    c660:	898d883a 	add	r6,r17,r6
    c664:	3463803a 	cmpltu	r17,r6,r17
    c668:	1947883a 	add	r3,r3,r5
    c66c:	88c7883a 	add	r3,r17,r3
    c670:	3023883a 	mov	r17,r6
    c674:	003fd306 	br	c5c4 <__alt_data_end+0xfffec5c4>
    c678:	1000541e 	bne	r2,zero,c7cc <__subdf3+0x488>
    c67c:	80800044 	addi	r2,r16,1
    c680:	1081ffcc 	andi	r2,r2,2047
    c684:	01000044 	movi	r4,1
    c688:	2080a20e 	bge	r4,r2,c914 <__subdf3+0x5d0>
    c68c:	8989c83a 	sub	r4,r17,r6
    c690:	8905803a 	cmpltu	r2,r17,r4
    c694:	1967c83a 	sub	r19,r3,r5
    c698:	98a7c83a 	sub	r19,r19,r2
    c69c:	9880202c 	andhi	r2,r19,128
    c6a0:	10006326 	beq	r2,zero,c830 <__subdf3+0x4ec>
    c6a4:	3463c83a 	sub	r17,r6,r17
    c6a8:	28c7c83a 	sub	r3,r5,r3
    c6ac:	344d803a 	cmpltu	r6,r6,r17
    c6b0:	19a7c83a 	sub	r19,r3,r6
    c6b4:	3825883a 	mov	r18,r7
    c6b8:	983f861e 	bne	r19,zero,c4d4 <__alt_data_end+0xfffec4d4>
    c6bc:	8809883a 	mov	r4,r17
    c6c0:	000ce440 	call	ce44 <__clzsi2>
    c6c4:	10800804 	addi	r2,r2,32
    c6c8:	113ffe04 	addi	r4,r2,-8
    c6cc:	00c007c4 	movi	r3,31
    c6d0:	193f850e 	bge	r3,r4,c4e8 <__alt_data_end+0xfffec4e8>
    c6d4:	10bff604 	addi	r2,r2,-40
    c6d8:	8884983a 	sll	r2,r17,r2
    c6dc:	0023883a 	mov	r17,zero
    c6e0:	243f880e 	bge	r4,r16,c504 <__alt_data_end+0xfffec504>
    c6e4:	00ffe034 	movhi	r3,65408
    c6e8:	18ffffc4 	addi	r3,r3,-1
    c6ec:	8121c83a 	sub	r16,r16,r4
    c6f0:	10c6703a 	and	r3,r2,r3
    c6f4:	003f3406 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c6f8:	9100004c 	andi	r4,r18,1
    c6fc:	000b883a 	mov	r5,zero
    c700:	0005883a 	mov	r2,zero
    c704:	003f4806 	br	c428 <__alt_data_end+0xfffec428>
    c708:	298cb03a 	or	r6,r5,r6
    c70c:	300cc03a 	cmpne	r6,r6,zero
    c710:	0005883a 	mov	r2,zero
    c714:	003f6406 	br	c4a8 <__alt_data_end+0xfffec4a8>
    c718:	10009a1e 	bne	r2,zero,c984 <__subdf3+0x640>
    c71c:	82400044 	addi	r9,r16,1
    c720:	4881ffcc 	andi	r2,r9,2047
    c724:	02800044 	movi	r10,1
    c728:	5080670e 	bge	r10,r2,c8c8 <__subdf3+0x584>
    c72c:	0081ffc4 	movi	r2,2047
    c730:	4880af26 	beq	r9,r2,c9f0 <__subdf3+0x6ac>
    c734:	898d883a 	add	r6,r17,r6
    c738:	1945883a 	add	r2,r3,r5
    c73c:	3447803a 	cmpltu	r3,r6,r17
    c740:	1887883a 	add	r3,r3,r2
    c744:	182297fa 	slli	r17,r3,31
    c748:	300cd07a 	srli	r6,r6,1
    c74c:	1806d07a 	srli	r3,r3,1
    c750:	4821883a 	mov	r16,r9
    c754:	89a2b03a 	or	r17,r17,r6
    c758:	003f1b06 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c75c:	0101ffc4 	movi	r4,2047
    c760:	813f441e 	bne	r16,r4,c474 <__alt_data_end+0xfffec474>
    c764:	003f1806 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c768:	843ff844 	addi	r16,r16,-31
    c76c:	01400804 	movi	r5,32
    c770:	1408d83a 	srl	r4,r2,r16
    c774:	19405026 	beq	r3,r5,c8b8 <__subdf3+0x574>
    c778:	01401004 	movi	r5,64
    c77c:	28c7c83a 	sub	r3,r5,r3
    c780:	10c4983a 	sll	r2,r2,r3
    c784:	88a2b03a 	or	r17,r17,r2
    c788:	8822c03a 	cmpne	r17,r17,zero
    c78c:	2462b03a 	or	r17,r4,r17
    c790:	0007883a 	mov	r3,zero
    c794:	0021883a 	mov	r16,zero
    c798:	003f6d06 	br	c550 <__alt_data_end+0xfffec550>
    c79c:	11fff804 	addi	r7,r2,-32
    c7a0:	01000804 	movi	r4,32
    c7a4:	29ced83a 	srl	r7,r5,r7
    c7a8:	11004526 	beq	r2,r4,c8c0 <__subdf3+0x57c>
    c7ac:	01001004 	movi	r4,64
    c7b0:	2089c83a 	sub	r4,r4,r2
    c7b4:	2904983a 	sll	r2,r5,r4
    c7b8:	118cb03a 	or	r6,r2,r6
    c7bc:	300cc03a 	cmpne	r6,r6,zero
    c7c0:	398cb03a 	or	r6,r7,r6
    c7c4:	0005883a 	mov	r2,zero
    c7c8:	003f3706 	br	c4a8 <__alt_data_end+0xfffec4a8>
    c7cc:	80002a26 	beq	r16,zero,c878 <__subdf3+0x534>
    c7d0:	0101ffc4 	movi	r4,2047
    c7d4:	49006626 	beq	r9,r4,c970 <__subdf3+0x62c>
    c7d8:	0085c83a 	sub	r2,zero,r2
    c7dc:	18c02034 	orhi	r3,r3,128
    c7e0:	01000e04 	movi	r4,56
    c7e4:	20807e16 	blt	r4,r2,c9e0 <__subdf3+0x69c>
    c7e8:	010007c4 	movi	r4,31
    c7ec:	2080e716 	blt	r4,r2,cb8c <__subdf3+0x848>
    c7f0:	01000804 	movi	r4,32
    c7f4:	2089c83a 	sub	r4,r4,r2
    c7f8:	1914983a 	sll	r10,r3,r4
    c7fc:	8890d83a 	srl	r8,r17,r2
    c800:	8908983a 	sll	r4,r17,r4
    c804:	1884d83a 	srl	r2,r3,r2
    c808:	5222b03a 	or	r17,r10,r8
    c80c:	2006c03a 	cmpne	r3,r4,zero
    c810:	88e2b03a 	or	r17,r17,r3
    c814:	3463c83a 	sub	r17,r6,r17
    c818:	2885c83a 	sub	r2,r5,r2
    c81c:	344d803a 	cmpltu	r6,r6,r17
    c820:	1187c83a 	sub	r3,r2,r6
    c824:	4821883a 	mov	r16,r9
    c828:	3825883a 	mov	r18,r7
    c82c:	003f2306 	br	c4bc <__alt_data_end+0xfffec4bc>
    c830:	24d0b03a 	or	r8,r4,r19
    c834:	40001b1e 	bne	r8,zero,c8a4 <__subdf3+0x560>
    c838:	0005883a 	mov	r2,zero
    c83c:	0009883a 	mov	r4,zero
    c840:	0021883a 	mov	r16,zero
    c844:	003f4906 	br	c56c <__alt_data_end+0xfffec56c>
    c848:	010007c4 	movi	r4,31
    c84c:	20803a16 	blt	r4,r2,c938 <__subdf3+0x5f4>
    c850:	01000804 	movi	r4,32
    c854:	2089c83a 	sub	r4,r4,r2
    c858:	2912983a 	sll	r9,r5,r4
    c85c:	3090d83a 	srl	r8,r6,r2
    c860:	3108983a 	sll	r4,r6,r4
    c864:	2884d83a 	srl	r2,r5,r2
    c868:	4a12b03a 	or	r9,r9,r8
    c86c:	2008c03a 	cmpne	r4,r4,zero
    c870:	4912b03a 	or	r9,r9,r4
    c874:	003f4e06 	br	c5b0 <__alt_data_end+0xfffec5b0>
    c878:	1c48b03a 	or	r4,r3,r17
    c87c:	20003c26 	beq	r4,zero,c970 <__subdf3+0x62c>
    c880:	0084303a 	nor	r2,zero,r2
    c884:	1000381e 	bne	r2,zero,c968 <__subdf3+0x624>
    c888:	3463c83a 	sub	r17,r6,r17
    c88c:	28c5c83a 	sub	r2,r5,r3
    c890:	344d803a 	cmpltu	r6,r6,r17
    c894:	1187c83a 	sub	r3,r2,r6
    c898:	4821883a 	mov	r16,r9
    c89c:	3825883a 	mov	r18,r7
    c8a0:	003f0606 	br	c4bc <__alt_data_end+0xfffec4bc>
    c8a4:	2023883a 	mov	r17,r4
    c8a8:	003f0906 	br	c4d0 <__alt_data_end+0xfffec4d0>
    c8ac:	0101ffc4 	movi	r4,2047
    c8b0:	813f3a1e 	bne	r16,r4,c59c <__alt_data_end+0xfffec59c>
    c8b4:	003ec406 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c8b8:	0005883a 	mov	r2,zero
    c8bc:	003fb106 	br	c784 <__alt_data_end+0xfffec784>
    c8c0:	0005883a 	mov	r2,zero
    c8c4:	003fbc06 	br	c7b8 <__alt_data_end+0xfffec7b8>
    c8c8:	1c44b03a 	or	r2,r3,r17
    c8cc:	80008e1e 	bne	r16,zero,cb08 <__subdf3+0x7c4>
    c8d0:	1000c826 	beq	r2,zero,cbf4 <__subdf3+0x8b0>
    c8d4:	2984b03a 	or	r2,r5,r6
    c8d8:	103ebb26 	beq	r2,zero,c3c8 <__alt_data_end+0xfffec3c8>
    c8dc:	8989883a 	add	r4,r17,r6
    c8e0:	1945883a 	add	r2,r3,r5
    c8e4:	2447803a 	cmpltu	r3,r4,r17
    c8e8:	1887883a 	add	r3,r3,r2
    c8ec:	1880202c 	andhi	r2,r3,128
    c8f0:	2023883a 	mov	r17,r4
    c8f4:	103f1626 	beq	r2,zero,c550 <__alt_data_end+0xfffec550>
    c8f8:	00bfe034 	movhi	r2,65408
    c8fc:	10bfffc4 	addi	r2,r2,-1
    c900:	5021883a 	mov	r16,r10
    c904:	1886703a 	and	r3,r3,r2
    c908:	003eaf06 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c90c:	3825883a 	mov	r18,r7
    c910:	003f0f06 	br	c550 <__alt_data_end+0xfffec550>
    c914:	1c44b03a 	or	r2,r3,r17
    c918:	8000251e 	bne	r16,zero,c9b0 <__subdf3+0x66c>
    c91c:	1000661e 	bne	r2,zero,cab8 <__subdf3+0x774>
    c920:	2990b03a 	or	r8,r5,r6
    c924:	40009626 	beq	r8,zero,cb80 <__subdf3+0x83c>
    c928:	2807883a 	mov	r3,r5
    c92c:	3023883a 	mov	r17,r6
    c930:	3825883a 	mov	r18,r7
    c934:	003ea406 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c938:	127ff804 	addi	r9,r2,-32
    c93c:	01000804 	movi	r4,32
    c940:	2a52d83a 	srl	r9,r5,r9
    c944:	11008c26 	beq	r2,r4,cb78 <__subdf3+0x834>
    c948:	01001004 	movi	r4,64
    c94c:	2085c83a 	sub	r2,r4,r2
    c950:	2884983a 	sll	r2,r5,r2
    c954:	118cb03a 	or	r6,r2,r6
    c958:	300cc03a 	cmpne	r6,r6,zero
    c95c:	4992b03a 	or	r9,r9,r6
    c960:	0005883a 	mov	r2,zero
    c964:	003f1206 	br	c5b0 <__alt_data_end+0xfffec5b0>
    c968:	0101ffc4 	movi	r4,2047
    c96c:	493f9c1e 	bne	r9,r4,c7e0 <__alt_data_end+0xfffec7e0>
    c970:	2807883a 	mov	r3,r5
    c974:	3023883a 	mov	r17,r6
    c978:	4821883a 	mov	r16,r9
    c97c:	3825883a 	mov	r18,r7
    c980:	003e9106 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c984:	80001f1e 	bne	r16,zero,ca04 <__subdf3+0x6c0>
    c988:	1c48b03a 	or	r4,r3,r17
    c98c:	20005a26 	beq	r4,zero,caf8 <__subdf3+0x7b4>
    c990:	0084303a 	nor	r2,zero,r2
    c994:	1000561e 	bne	r2,zero,caf0 <__subdf3+0x7ac>
    c998:	89a3883a 	add	r17,r17,r6
    c99c:	1945883a 	add	r2,r3,r5
    c9a0:	898d803a 	cmpltu	r6,r17,r6
    c9a4:	3087883a 	add	r3,r6,r2
    c9a8:	4821883a 	mov	r16,r9
    c9ac:	003f0506 	br	c5c4 <__alt_data_end+0xfffec5c4>
    c9b0:	10002b1e 	bne	r2,zero,ca60 <__subdf3+0x71c>
    c9b4:	2984b03a 	or	r2,r5,r6
    c9b8:	10008026 	beq	r2,zero,cbbc <__subdf3+0x878>
    c9bc:	2807883a 	mov	r3,r5
    c9c0:	3023883a 	mov	r17,r6
    c9c4:	3825883a 	mov	r18,r7
    c9c8:	0401ffc4 	movi	r16,2047
    c9cc:	003e7e06 	br	c3c8 <__alt_data_end+0xfffec3c8>
    c9d0:	3809883a 	mov	r4,r7
    c9d4:	0011883a 	mov	r8,zero
    c9d8:	0005883a 	mov	r2,zero
    c9dc:	003ee306 	br	c56c <__alt_data_end+0xfffec56c>
    c9e0:	1c62b03a 	or	r17,r3,r17
    c9e4:	8822c03a 	cmpne	r17,r17,zero
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	003f8906 	br	c814 <__alt_data_end+0xfffec814>
    c9f0:	3809883a 	mov	r4,r7
    c9f4:	4821883a 	mov	r16,r9
    c9f8:	0011883a 	mov	r8,zero
    c9fc:	0005883a 	mov	r2,zero
    ca00:	003eda06 	br	c56c <__alt_data_end+0xfffec56c>
    ca04:	0101ffc4 	movi	r4,2047
    ca08:	49003b26 	beq	r9,r4,caf8 <__subdf3+0x7b4>
    ca0c:	0085c83a 	sub	r2,zero,r2
    ca10:	18c02034 	orhi	r3,r3,128
    ca14:	01000e04 	movi	r4,56
    ca18:	20806e16 	blt	r4,r2,cbd4 <__subdf3+0x890>
    ca1c:	010007c4 	movi	r4,31
    ca20:	20807716 	blt	r4,r2,cc00 <__subdf3+0x8bc>
    ca24:	01000804 	movi	r4,32
    ca28:	2089c83a 	sub	r4,r4,r2
    ca2c:	1914983a 	sll	r10,r3,r4
    ca30:	8890d83a 	srl	r8,r17,r2
    ca34:	8908983a 	sll	r4,r17,r4
    ca38:	1884d83a 	srl	r2,r3,r2
    ca3c:	5222b03a 	or	r17,r10,r8
    ca40:	2006c03a 	cmpne	r3,r4,zero
    ca44:	88e2b03a 	or	r17,r17,r3
    ca48:	89a3883a 	add	r17,r17,r6
    ca4c:	1145883a 	add	r2,r2,r5
    ca50:	898d803a 	cmpltu	r6,r17,r6
    ca54:	3087883a 	add	r3,r6,r2
    ca58:	4821883a 	mov	r16,r9
    ca5c:	003ed906 	br	c5c4 <__alt_data_end+0xfffec5c4>
    ca60:	2984b03a 	or	r2,r5,r6
    ca64:	10004226 	beq	r2,zero,cb70 <__subdf3+0x82c>
    ca68:	1808d0fa 	srli	r4,r3,3
    ca6c:	8822d0fa 	srli	r17,r17,3
    ca70:	1806977a 	slli	r3,r3,29
    ca74:	2080022c 	andhi	r2,r4,8
    ca78:	1c62b03a 	or	r17,r3,r17
    ca7c:	10000826 	beq	r2,zero,caa0 <__subdf3+0x75c>
    ca80:	2812d0fa 	srli	r9,r5,3
    ca84:	4880022c 	andhi	r2,r9,8
    ca88:	1000051e 	bne	r2,zero,caa0 <__subdf3+0x75c>
    ca8c:	300cd0fa 	srli	r6,r6,3
    ca90:	2804977a 	slli	r2,r5,29
    ca94:	4809883a 	mov	r4,r9
    ca98:	3825883a 	mov	r18,r7
    ca9c:	11a2b03a 	or	r17,r2,r6
    caa0:	8806d77a 	srli	r3,r17,29
    caa4:	200890fa 	slli	r4,r4,3
    caa8:	882290fa 	slli	r17,r17,3
    caac:	0401ffc4 	movi	r16,2047
    cab0:	1906b03a 	or	r3,r3,r4
    cab4:	003e4406 	br	c3c8 <__alt_data_end+0xfffec3c8>
    cab8:	2984b03a 	or	r2,r5,r6
    cabc:	103e4226 	beq	r2,zero,c3c8 <__alt_data_end+0xfffec3c8>
    cac0:	8989c83a 	sub	r4,r17,r6
    cac4:	8911803a 	cmpltu	r8,r17,r4
    cac8:	1945c83a 	sub	r2,r3,r5
    cacc:	1205c83a 	sub	r2,r2,r8
    cad0:	1200202c 	andhi	r8,r2,128
    cad4:	403e9a26 	beq	r8,zero,c540 <__alt_data_end+0xfffec540>
    cad8:	3463c83a 	sub	r17,r6,r17
    cadc:	28c5c83a 	sub	r2,r5,r3
    cae0:	344d803a 	cmpltu	r6,r6,r17
    cae4:	1187c83a 	sub	r3,r2,r6
    cae8:	3825883a 	mov	r18,r7
    caec:	003e3606 	br	c3c8 <__alt_data_end+0xfffec3c8>
    caf0:	0101ffc4 	movi	r4,2047
    caf4:	493fc71e 	bne	r9,r4,ca14 <__alt_data_end+0xfffeca14>
    caf8:	2807883a 	mov	r3,r5
    cafc:	3023883a 	mov	r17,r6
    cb00:	4821883a 	mov	r16,r9
    cb04:	003e3006 	br	c3c8 <__alt_data_end+0xfffec3c8>
    cb08:	10003626 	beq	r2,zero,cbe4 <__subdf3+0x8a0>
    cb0c:	2984b03a 	or	r2,r5,r6
    cb10:	10001726 	beq	r2,zero,cb70 <__subdf3+0x82c>
    cb14:	1808d0fa 	srli	r4,r3,3
    cb18:	8822d0fa 	srli	r17,r17,3
    cb1c:	1806977a 	slli	r3,r3,29
    cb20:	2080022c 	andhi	r2,r4,8
    cb24:	1c62b03a 	or	r17,r3,r17
    cb28:	10000726 	beq	r2,zero,cb48 <__subdf3+0x804>
    cb2c:	2812d0fa 	srli	r9,r5,3
    cb30:	4880022c 	andhi	r2,r9,8
    cb34:	1000041e 	bne	r2,zero,cb48 <__subdf3+0x804>
    cb38:	300cd0fa 	srli	r6,r6,3
    cb3c:	2804977a 	slli	r2,r5,29
    cb40:	4809883a 	mov	r4,r9
    cb44:	11a2b03a 	or	r17,r2,r6
    cb48:	8806d77a 	srli	r3,r17,29
    cb4c:	200890fa 	slli	r4,r4,3
    cb50:	882290fa 	slli	r17,r17,3
    cb54:	3825883a 	mov	r18,r7
    cb58:	1906b03a 	or	r3,r3,r4
    cb5c:	0401ffc4 	movi	r16,2047
    cb60:	003e1906 	br	c3c8 <__alt_data_end+0xfffec3c8>
    cb64:	000b883a 	mov	r5,zero
    cb68:	0005883a 	mov	r2,zero
    cb6c:	003e2e06 	br	c428 <__alt_data_end+0xfffec428>
    cb70:	0401ffc4 	movi	r16,2047
    cb74:	003e1406 	br	c3c8 <__alt_data_end+0xfffec3c8>
    cb78:	0005883a 	mov	r2,zero
    cb7c:	003f7506 	br	c954 <__alt_data_end+0xfffec954>
    cb80:	0005883a 	mov	r2,zero
    cb84:	0009883a 	mov	r4,zero
    cb88:	003e7806 	br	c56c <__alt_data_end+0xfffec56c>
    cb8c:	123ff804 	addi	r8,r2,-32
    cb90:	01000804 	movi	r4,32
    cb94:	1a10d83a 	srl	r8,r3,r8
    cb98:	11002526 	beq	r2,r4,cc30 <__subdf3+0x8ec>
    cb9c:	01001004 	movi	r4,64
    cba0:	2085c83a 	sub	r2,r4,r2
    cba4:	1884983a 	sll	r2,r3,r2
    cba8:	1444b03a 	or	r2,r2,r17
    cbac:	1004c03a 	cmpne	r2,r2,zero
    cbb0:	40a2b03a 	or	r17,r8,r2
    cbb4:	0005883a 	mov	r2,zero
    cbb8:	003f1606 	br	c814 <__alt_data_end+0xfffec814>
    cbbc:	02000434 	movhi	r8,16
    cbc0:	0009883a 	mov	r4,zero
    cbc4:	423fffc4 	addi	r8,r8,-1
    cbc8:	00bfffc4 	movi	r2,-1
    cbcc:	0401ffc4 	movi	r16,2047
    cbd0:	003e6606 	br	c56c <__alt_data_end+0xfffec56c>
    cbd4:	1c62b03a 	or	r17,r3,r17
    cbd8:	8822c03a 	cmpne	r17,r17,zero
    cbdc:	0005883a 	mov	r2,zero
    cbe0:	003f9906 	br	ca48 <__alt_data_end+0xfffeca48>
    cbe4:	2807883a 	mov	r3,r5
    cbe8:	3023883a 	mov	r17,r6
    cbec:	0401ffc4 	movi	r16,2047
    cbf0:	003df506 	br	c3c8 <__alt_data_end+0xfffec3c8>
    cbf4:	2807883a 	mov	r3,r5
    cbf8:	3023883a 	mov	r17,r6
    cbfc:	003df206 	br	c3c8 <__alt_data_end+0xfffec3c8>
    cc00:	123ff804 	addi	r8,r2,-32
    cc04:	01000804 	movi	r4,32
    cc08:	1a10d83a 	srl	r8,r3,r8
    cc0c:	11000a26 	beq	r2,r4,cc38 <__subdf3+0x8f4>
    cc10:	01001004 	movi	r4,64
    cc14:	2085c83a 	sub	r2,r4,r2
    cc18:	1884983a 	sll	r2,r3,r2
    cc1c:	1444b03a 	or	r2,r2,r17
    cc20:	1004c03a 	cmpne	r2,r2,zero
    cc24:	40a2b03a 	or	r17,r8,r2
    cc28:	0005883a 	mov	r2,zero
    cc2c:	003f8606 	br	ca48 <__alt_data_end+0xfffeca48>
    cc30:	0005883a 	mov	r2,zero
    cc34:	003fdc06 	br	cba8 <__alt_data_end+0xfffecba8>
    cc38:	0005883a 	mov	r2,zero
    cc3c:	003ff706 	br	cc1c <__alt_data_end+0xfffecc1c>

0000cc40 <__fixdfsi>:
    cc40:	280cd53a 	srli	r6,r5,20
    cc44:	00c00434 	movhi	r3,16
    cc48:	18ffffc4 	addi	r3,r3,-1
    cc4c:	3181ffcc 	andi	r6,r6,2047
    cc50:	01c0ff84 	movi	r7,1022
    cc54:	28c6703a 	and	r3,r5,r3
    cc58:	280ad7fa 	srli	r5,r5,31
    cc5c:	3980120e 	bge	r7,r6,cca8 <__fixdfsi+0x68>
    cc60:	00810744 	movi	r2,1053
    cc64:	11800c16 	blt	r2,r6,cc98 <__fixdfsi+0x58>
    cc68:	00810cc4 	movi	r2,1075
    cc6c:	1185c83a 	sub	r2,r2,r6
    cc70:	01c007c4 	movi	r7,31
    cc74:	18c00434 	orhi	r3,r3,16
    cc78:	38800d16 	blt	r7,r2,ccb0 <__fixdfsi+0x70>
    cc7c:	31befb44 	addi	r6,r6,-1043
    cc80:	2084d83a 	srl	r2,r4,r2
    cc84:	1986983a 	sll	r3,r3,r6
    cc88:	1884b03a 	or	r2,r3,r2
    cc8c:	28000726 	beq	r5,zero,ccac <__fixdfsi+0x6c>
    cc90:	0085c83a 	sub	r2,zero,r2
    cc94:	f800283a 	ret
    cc98:	00a00034 	movhi	r2,32768
    cc9c:	10bfffc4 	addi	r2,r2,-1
    cca0:	2885883a 	add	r2,r5,r2
    cca4:	f800283a 	ret
    cca8:	0005883a 	mov	r2,zero
    ccac:	f800283a 	ret
    ccb0:	008104c4 	movi	r2,1043
    ccb4:	1185c83a 	sub	r2,r2,r6
    ccb8:	1884d83a 	srl	r2,r3,r2
    ccbc:	003ff306 	br	cc8c <__alt_data_end+0xfffecc8c>

0000ccc0 <__floatsidf>:
    ccc0:	defffd04 	addi	sp,sp,-12
    ccc4:	dfc00215 	stw	ra,8(sp)
    ccc8:	dc400115 	stw	r17,4(sp)
    cccc:	dc000015 	stw	r16,0(sp)
    ccd0:	20002b26 	beq	r4,zero,cd80 <__floatsidf+0xc0>
    ccd4:	2023883a 	mov	r17,r4
    ccd8:	2020d7fa 	srli	r16,r4,31
    ccdc:	20002d16 	blt	r4,zero,cd94 <__floatsidf+0xd4>
    cce0:	8809883a 	mov	r4,r17
    cce4:	000ce440 	call	ce44 <__clzsi2>
    cce8:	01410784 	movi	r5,1054
    ccec:	288bc83a 	sub	r5,r5,r2
    ccf0:	01010cc4 	movi	r4,1075
    ccf4:	2149c83a 	sub	r4,r4,r5
    ccf8:	00c007c4 	movi	r3,31
    ccfc:	1900160e 	bge	r3,r4,cd58 <__floatsidf+0x98>
    cd00:	00c104c4 	movi	r3,1043
    cd04:	1947c83a 	sub	r3,r3,r5
    cd08:	88c6983a 	sll	r3,r17,r3
    cd0c:	00800434 	movhi	r2,16
    cd10:	10bfffc4 	addi	r2,r2,-1
    cd14:	1886703a 	and	r3,r3,r2
    cd18:	2941ffcc 	andi	r5,r5,2047
    cd1c:	800d883a 	mov	r6,r16
    cd20:	0005883a 	mov	r2,zero
    cd24:	280a953a 	slli	r5,r5,20
    cd28:	31803fcc 	andi	r6,r6,255
    cd2c:	01000434 	movhi	r4,16
    cd30:	300c97fa 	slli	r6,r6,31
    cd34:	213fffc4 	addi	r4,r4,-1
    cd38:	1906703a 	and	r3,r3,r4
    cd3c:	1946b03a 	or	r3,r3,r5
    cd40:	1986b03a 	or	r3,r3,r6
    cd44:	dfc00217 	ldw	ra,8(sp)
    cd48:	dc400117 	ldw	r17,4(sp)
    cd4c:	dc000017 	ldw	r16,0(sp)
    cd50:	dec00304 	addi	sp,sp,12
    cd54:	f800283a 	ret
    cd58:	00c002c4 	movi	r3,11
    cd5c:	1887c83a 	sub	r3,r3,r2
    cd60:	88c6d83a 	srl	r3,r17,r3
    cd64:	8904983a 	sll	r2,r17,r4
    cd68:	01000434 	movhi	r4,16
    cd6c:	213fffc4 	addi	r4,r4,-1
    cd70:	2941ffcc 	andi	r5,r5,2047
    cd74:	1906703a 	and	r3,r3,r4
    cd78:	800d883a 	mov	r6,r16
    cd7c:	003fe906 	br	cd24 <__alt_data_end+0xfffecd24>
    cd80:	000d883a 	mov	r6,zero
    cd84:	000b883a 	mov	r5,zero
    cd88:	0007883a 	mov	r3,zero
    cd8c:	0005883a 	mov	r2,zero
    cd90:	003fe406 	br	cd24 <__alt_data_end+0xfffecd24>
    cd94:	0123c83a 	sub	r17,zero,r4
    cd98:	003fd106 	br	cce0 <__alt_data_end+0xfffecce0>

0000cd9c <__floatunsidf>:
    cd9c:	defffe04 	addi	sp,sp,-8
    cda0:	dc000015 	stw	r16,0(sp)
    cda4:	dfc00115 	stw	ra,4(sp)
    cda8:	2021883a 	mov	r16,r4
    cdac:	20002226 	beq	r4,zero,ce38 <__floatunsidf+0x9c>
    cdb0:	000ce440 	call	ce44 <__clzsi2>
    cdb4:	01010784 	movi	r4,1054
    cdb8:	2089c83a 	sub	r4,r4,r2
    cdbc:	01810cc4 	movi	r6,1075
    cdc0:	310dc83a 	sub	r6,r6,r4
    cdc4:	00c007c4 	movi	r3,31
    cdc8:	1980120e 	bge	r3,r6,ce14 <__floatunsidf+0x78>
    cdcc:	00c104c4 	movi	r3,1043
    cdd0:	1907c83a 	sub	r3,r3,r4
    cdd4:	80ca983a 	sll	r5,r16,r3
    cdd8:	00800434 	movhi	r2,16
    cddc:	10bfffc4 	addi	r2,r2,-1
    cde0:	2101ffcc 	andi	r4,r4,2047
    cde4:	0021883a 	mov	r16,zero
    cde8:	288a703a 	and	r5,r5,r2
    cdec:	2008953a 	slli	r4,r4,20
    cdf0:	00c00434 	movhi	r3,16
    cdf4:	18ffffc4 	addi	r3,r3,-1
    cdf8:	28c6703a 	and	r3,r5,r3
    cdfc:	8005883a 	mov	r2,r16
    ce00:	1906b03a 	or	r3,r3,r4
    ce04:	dfc00117 	ldw	ra,4(sp)
    ce08:	dc000017 	ldw	r16,0(sp)
    ce0c:	dec00204 	addi	sp,sp,8
    ce10:	f800283a 	ret
    ce14:	00c002c4 	movi	r3,11
    ce18:	188bc83a 	sub	r5,r3,r2
    ce1c:	814ad83a 	srl	r5,r16,r5
    ce20:	00c00434 	movhi	r3,16
    ce24:	18ffffc4 	addi	r3,r3,-1
    ce28:	81a0983a 	sll	r16,r16,r6
    ce2c:	2101ffcc 	andi	r4,r4,2047
    ce30:	28ca703a 	and	r5,r5,r3
    ce34:	003fed06 	br	cdec <__alt_data_end+0xfffecdec>
    ce38:	0009883a 	mov	r4,zero
    ce3c:	000b883a 	mov	r5,zero
    ce40:	003fea06 	br	cdec <__alt_data_end+0xfffecdec>

0000ce44 <__clzsi2>:
    ce44:	00bfffd4 	movui	r2,65535
    ce48:	11000536 	bltu	r2,r4,ce60 <__clzsi2+0x1c>
    ce4c:	00803fc4 	movi	r2,255
    ce50:	11000f36 	bltu	r2,r4,ce90 <__clzsi2+0x4c>
    ce54:	00800804 	movi	r2,32
    ce58:	0007883a 	mov	r3,zero
    ce5c:	00000506 	br	ce74 <__clzsi2+0x30>
    ce60:	00804034 	movhi	r2,256
    ce64:	10bfffc4 	addi	r2,r2,-1
    ce68:	11000c2e 	bgeu	r2,r4,ce9c <__clzsi2+0x58>
    ce6c:	00800204 	movi	r2,8
    ce70:	00c00604 	movi	r3,24
    ce74:	20c8d83a 	srl	r4,r4,r3
    ce78:	00c00074 	movhi	r3,1
    ce7c:	18fe2604 	addi	r3,r3,-1896
    ce80:	1909883a 	add	r4,r3,r4
    ce84:	20c00003 	ldbu	r3,0(r4)
    ce88:	10c5c83a 	sub	r2,r2,r3
    ce8c:	f800283a 	ret
    ce90:	00800604 	movi	r2,24
    ce94:	00c00204 	movi	r3,8
    ce98:	003ff606 	br	ce74 <__alt_data_end+0xfffece74>
    ce9c:	00800404 	movi	r2,16
    cea0:	1007883a 	mov	r3,r2
    cea4:	003ff306 	br	ce74 <__alt_data_end+0xfffece74>

0000cea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cea8:	defffe04 	addi	sp,sp,-8
    ceac:	dfc00115 	stw	ra,4(sp)
    ceb0:	df000015 	stw	fp,0(sp)
    ceb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ceb8:	d0a00b17 	ldw	r2,-32724(gp)
    cebc:	10000326 	beq	r2,zero,cecc <alt_get_errno+0x24>
    cec0:	d0a00b17 	ldw	r2,-32724(gp)
    cec4:	103ee83a 	callr	r2
    cec8:	00000106 	br	ced0 <alt_get_errno+0x28>
    cecc:	d0a6d104 	addi	r2,gp,-25788
}
    ced0:	e037883a 	mov	sp,fp
    ced4:	dfc00117 	ldw	ra,4(sp)
    ced8:	df000017 	ldw	fp,0(sp)
    cedc:	dec00204 	addi	sp,sp,8
    cee0:	f800283a 	ret

0000cee4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cee4:	defffb04 	addi	sp,sp,-20
    cee8:	dfc00415 	stw	ra,16(sp)
    ceec:	df000315 	stw	fp,12(sp)
    cef0:	df000304 	addi	fp,sp,12
    cef4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cef8:	e0bfff17 	ldw	r2,-4(fp)
    cefc:	10000616 	blt	r2,zero,cf18 <close+0x34>
    cf00:	e0bfff17 	ldw	r2,-4(fp)
    cf04:	10c00324 	muli	r3,r2,12
    cf08:	00800074 	movhi	r2,1
    cf0c:	1080a604 	addi	r2,r2,664
    cf10:	1885883a 	add	r2,r3,r2
    cf14:	00000106 	br	cf1c <close+0x38>
    cf18:	0005883a 	mov	r2,zero
    cf1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cf20:	e0bffd17 	ldw	r2,-12(fp)
    cf24:	10001926 	beq	r2,zero,cf8c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cf28:	e0bffd17 	ldw	r2,-12(fp)
    cf2c:	10800017 	ldw	r2,0(r2)
    cf30:	10800417 	ldw	r2,16(r2)
    cf34:	10000626 	beq	r2,zero,cf50 <close+0x6c>
    cf38:	e0bffd17 	ldw	r2,-12(fp)
    cf3c:	10800017 	ldw	r2,0(r2)
    cf40:	10800417 	ldw	r2,16(r2)
    cf44:	e13ffd17 	ldw	r4,-12(fp)
    cf48:	103ee83a 	callr	r2
    cf4c:	00000106 	br	cf54 <close+0x70>
    cf50:	0005883a 	mov	r2,zero
    cf54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cf58:	e13fff17 	ldw	r4,-4(fp)
    cf5c:	000d5a40 	call	d5a4 <alt_release_fd>
    if (rval < 0)
    cf60:	e0bffe17 	ldw	r2,-8(fp)
    cf64:	1000070e 	bge	r2,zero,cf84 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cf68:	000cea80 	call	cea8 <alt_get_errno>
    cf6c:	1007883a 	mov	r3,r2
    cf70:	e0bffe17 	ldw	r2,-8(fp)
    cf74:	0085c83a 	sub	r2,zero,r2
    cf78:	18800015 	stw	r2,0(r3)
      return -1;
    cf7c:	00bfffc4 	movi	r2,-1
    cf80:	00000706 	br	cfa0 <close+0xbc>
    }
    return 0;
    cf84:	0005883a 	mov	r2,zero
    cf88:	00000506 	br	cfa0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cf8c:	000cea80 	call	cea8 <alt_get_errno>
    cf90:	1007883a 	mov	r3,r2
    cf94:	00801444 	movi	r2,81
    cf98:	18800015 	stw	r2,0(r3)
    return -1;
    cf9c:	00bfffc4 	movi	r2,-1
  }
}
    cfa0:	e037883a 	mov	sp,fp
    cfa4:	dfc00117 	ldw	ra,4(sp)
    cfa8:	df000017 	ldw	fp,0(sp)
    cfac:	dec00204 	addi	sp,sp,8
    cfb0:	f800283a 	ret

0000cfb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cfb4:	defffc04 	addi	sp,sp,-16
    cfb8:	df000315 	stw	fp,12(sp)
    cfbc:	df000304 	addi	fp,sp,12
    cfc0:	e13ffd15 	stw	r4,-12(fp)
    cfc4:	e17ffe15 	stw	r5,-8(fp)
    cfc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cfcc:	e0bfff17 	ldw	r2,-4(fp)
}
    cfd0:	e037883a 	mov	sp,fp
    cfd4:	df000017 	ldw	fp,0(sp)
    cfd8:	dec00104 	addi	sp,sp,4
    cfdc:	f800283a 	ret

0000cfe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cfe0:	defffe04 	addi	sp,sp,-8
    cfe4:	dfc00115 	stw	ra,4(sp)
    cfe8:	df000015 	stw	fp,0(sp)
    cfec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cff0:	d0a00b17 	ldw	r2,-32724(gp)
    cff4:	10000326 	beq	r2,zero,d004 <alt_get_errno+0x24>
    cff8:	d0a00b17 	ldw	r2,-32724(gp)
    cffc:	103ee83a 	callr	r2
    d000:	00000106 	br	d008 <alt_get_errno+0x28>
    d004:	d0a6d104 	addi	r2,gp,-25788
}
    d008:	e037883a 	mov	sp,fp
    d00c:	dfc00117 	ldw	ra,4(sp)
    d010:	df000017 	ldw	fp,0(sp)
    d014:	dec00204 	addi	sp,sp,8
    d018:	f800283a 	ret

0000d01c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d01c:	defffb04 	addi	sp,sp,-20
    d020:	dfc00415 	stw	ra,16(sp)
    d024:	df000315 	stw	fp,12(sp)
    d028:	df000304 	addi	fp,sp,12
    d02c:	e13ffe15 	stw	r4,-8(fp)
    d030:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d034:	e0bffe17 	ldw	r2,-8(fp)
    d038:	10000616 	blt	r2,zero,d054 <fstat+0x38>
    d03c:	e0bffe17 	ldw	r2,-8(fp)
    d040:	10c00324 	muli	r3,r2,12
    d044:	00800074 	movhi	r2,1
    d048:	1080a604 	addi	r2,r2,664
    d04c:	1885883a 	add	r2,r3,r2
    d050:	00000106 	br	d058 <fstat+0x3c>
    d054:	0005883a 	mov	r2,zero
    d058:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d05c:	e0bffd17 	ldw	r2,-12(fp)
    d060:	10001026 	beq	r2,zero,d0a4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d064:	e0bffd17 	ldw	r2,-12(fp)
    d068:	10800017 	ldw	r2,0(r2)
    d06c:	10800817 	ldw	r2,32(r2)
    d070:	10000726 	beq	r2,zero,d090 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d074:	e0bffd17 	ldw	r2,-12(fp)
    d078:	10800017 	ldw	r2,0(r2)
    d07c:	10800817 	ldw	r2,32(r2)
    d080:	e17fff17 	ldw	r5,-4(fp)
    d084:	e13ffd17 	ldw	r4,-12(fp)
    d088:	103ee83a 	callr	r2
    d08c:	00000a06 	br	d0b8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d090:	e0bfff17 	ldw	r2,-4(fp)
    d094:	00c80004 	movi	r3,8192
    d098:	10c00115 	stw	r3,4(r2)
      return 0;
    d09c:	0005883a 	mov	r2,zero
    d0a0:	00000506 	br	d0b8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d0a4:	000cfe00 	call	cfe0 <alt_get_errno>
    d0a8:	1007883a 	mov	r3,r2
    d0ac:	00801444 	movi	r2,81
    d0b0:	18800015 	stw	r2,0(r3)
    return -1;
    d0b4:	00bfffc4 	movi	r2,-1
  }
}
    d0b8:	e037883a 	mov	sp,fp
    d0bc:	dfc00117 	ldw	ra,4(sp)
    d0c0:	df000017 	ldw	fp,0(sp)
    d0c4:	dec00204 	addi	sp,sp,8
    d0c8:	f800283a 	ret

0000d0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0cc:	defffe04 	addi	sp,sp,-8
    d0d0:	dfc00115 	stw	ra,4(sp)
    d0d4:	df000015 	stw	fp,0(sp)
    d0d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0dc:	d0a00b17 	ldw	r2,-32724(gp)
    d0e0:	10000326 	beq	r2,zero,d0f0 <alt_get_errno+0x24>
    d0e4:	d0a00b17 	ldw	r2,-32724(gp)
    d0e8:	103ee83a 	callr	r2
    d0ec:	00000106 	br	d0f4 <alt_get_errno+0x28>
    d0f0:	d0a6d104 	addi	r2,gp,-25788
}
    d0f4:	e037883a 	mov	sp,fp
    d0f8:	dfc00117 	ldw	ra,4(sp)
    d0fc:	df000017 	ldw	fp,0(sp)
    d100:	dec00204 	addi	sp,sp,8
    d104:	f800283a 	ret

0000d108 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d108:	deffed04 	addi	sp,sp,-76
    d10c:	dfc01215 	stw	ra,72(sp)
    d110:	df001115 	stw	fp,68(sp)
    d114:	df001104 	addi	fp,sp,68
    d118:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d11c:	e0bfff17 	ldw	r2,-4(fp)
    d120:	10000616 	blt	r2,zero,d13c <isatty+0x34>
    d124:	e0bfff17 	ldw	r2,-4(fp)
    d128:	10c00324 	muli	r3,r2,12
    d12c:	00800074 	movhi	r2,1
    d130:	1080a604 	addi	r2,r2,664
    d134:	1885883a 	add	r2,r3,r2
    d138:	00000106 	br	d140 <isatty+0x38>
    d13c:	0005883a 	mov	r2,zero
    d140:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d144:	e0bfef17 	ldw	r2,-68(fp)
    d148:	10000e26 	beq	r2,zero,d184 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d14c:	e0bfef17 	ldw	r2,-68(fp)
    d150:	10800017 	ldw	r2,0(r2)
    d154:	10800817 	ldw	r2,32(r2)
    d158:	1000021e 	bne	r2,zero,d164 <isatty+0x5c>
    {
      return 1;
    d15c:	00800044 	movi	r2,1
    d160:	00000d06 	br	d198 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d164:	e0bff004 	addi	r2,fp,-64
    d168:	100b883a 	mov	r5,r2
    d16c:	e13fff17 	ldw	r4,-4(fp)
    d170:	000d01c0 	call	d01c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d174:	e0bff117 	ldw	r2,-60(fp)
    d178:	10880020 	cmpeqi	r2,r2,8192
    d17c:	10803fcc 	andi	r2,r2,255
    d180:	00000506 	br	d198 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d184:	000d0cc0 	call	d0cc <alt_get_errno>
    d188:	1007883a 	mov	r3,r2
    d18c:	00801444 	movi	r2,81
    d190:	18800015 	stw	r2,0(r3)
    return 0;
    d194:	0005883a 	mov	r2,zero
  }
}
    d198:	e037883a 	mov	sp,fp
    d19c:	dfc00117 	ldw	ra,4(sp)
    d1a0:	df000017 	ldw	fp,0(sp)
    d1a4:	dec00204 	addi	sp,sp,8
    d1a8:	f800283a 	ret

0000d1ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d1ac:	defffc04 	addi	sp,sp,-16
    d1b0:	df000315 	stw	fp,12(sp)
    d1b4:	df000304 	addi	fp,sp,12
    d1b8:	e13ffd15 	stw	r4,-12(fp)
    d1bc:	e17ffe15 	stw	r5,-8(fp)
    d1c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d1c4:	e0fffe17 	ldw	r3,-8(fp)
    d1c8:	e0bffd17 	ldw	r2,-12(fp)
    d1cc:	18800c26 	beq	r3,r2,d200 <alt_load_section+0x54>
  {
    while( to != end )
    d1d0:	00000806 	br	d1f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d1d4:	e0bffe17 	ldw	r2,-8(fp)
    d1d8:	10c00104 	addi	r3,r2,4
    d1dc:	e0fffe15 	stw	r3,-8(fp)
    d1e0:	e0fffd17 	ldw	r3,-12(fp)
    d1e4:	19000104 	addi	r4,r3,4
    d1e8:	e13ffd15 	stw	r4,-12(fp)
    d1ec:	18c00017 	ldw	r3,0(r3)
    d1f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d1f4:	e0fffe17 	ldw	r3,-8(fp)
    d1f8:	e0bfff17 	ldw	r2,-4(fp)
    d1fc:	18bff51e 	bne	r3,r2,d1d4 <__alt_data_end+0xfffed1d4>
    {
      *to++ = *from++;
    }
  }
}
    d200:	0001883a 	nop
    d204:	e037883a 	mov	sp,fp
    d208:	df000017 	ldw	fp,0(sp)
    d20c:	dec00104 	addi	sp,sp,4
    d210:	f800283a 	ret

0000d214 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d214:	defffe04 	addi	sp,sp,-8
    d218:	dfc00115 	stw	ra,4(sp)
    d21c:	df000015 	stw	fp,0(sp)
    d220:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d224:	01800074 	movhi	r6,1
    d228:	31852e04 	addi	r6,r6,5304
    d22c:	01400074 	movhi	r5,1
    d230:	297e7304 	addi	r5,r5,-1588
    d234:	01000074 	movhi	r4,1
    d238:	21052e04 	addi	r4,r4,5304
    d23c:	000d1ac0 	call	d1ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d240:	01800034 	movhi	r6,0
    d244:	31809104 	addi	r6,r6,580
    d248:	01400034 	movhi	r5,0
    d24c:	29400804 	addi	r5,r5,32
    d250:	01000034 	movhi	r4,0
    d254:	21000804 	addi	r4,r4,32
    d258:	000d1ac0 	call	d1ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d25c:	01800074 	movhi	r6,1
    d260:	31be7304 	addi	r6,r6,-1588
    d264:	01400074 	movhi	r5,1
    d268:	297d5204 	addi	r5,r5,-2744
    d26c:	01000074 	movhi	r4,1
    d270:	213d5204 	addi	r4,r4,-2744
    d274:	000d1ac0 	call	d1ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d278:	000e4340 	call	e434 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d27c:	000e61c0 	call	e61c <alt_icache_flush_all>
}
    d280:	0001883a 	nop
    d284:	e037883a 	mov	sp,fp
    d288:	dfc00117 	ldw	ra,4(sp)
    d28c:	df000017 	ldw	fp,0(sp)
    d290:	dec00204 	addi	sp,sp,8
    d294:	f800283a 	ret

0000d298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d298:	defffe04 	addi	sp,sp,-8
    d29c:	dfc00115 	stw	ra,4(sp)
    d2a0:	df000015 	stw	fp,0(sp)
    d2a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2a8:	d0a00b17 	ldw	r2,-32724(gp)
    d2ac:	10000326 	beq	r2,zero,d2bc <alt_get_errno+0x24>
    d2b0:	d0a00b17 	ldw	r2,-32724(gp)
    d2b4:	103ee83a 	callr	r2
    d2b8:	00000106 	br	d2c0 <alt_get_errno+0x28>
    d2bc:	d0a6d104 	addi	r2,gp,-25788
}
    d2c0:	e037883a 	mov	sp,fp
    d2c4:	dfc00117 	ldw	ra,4(sp)
    d2c8:	df000017 	ldw	fp,0(sp)
    d2cc:	dec00204 	addi	sp,sp,8
    d2d0:	f800283a 	ret

0000d2d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d2d4:	defff904 	addi	sp,sp,-28
    d2d8:	dfc00615 	stw	ra,24(sp)
    d2dc:	df000515 	stw	fp,20(sp)
    d2e0:	df000504 	addi	fp,sp,20
    d2e4:	e13ffd15 	stw	r4,-12(fp)
    d2e8:	e17ffe15 	stw	r5,-8(fp)
    d2ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d2f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d2f4:	e0bffd17 	ldw	r2,-12(fp)
    d2f8:	10000616 	blt	r2,zero,d314 <lseek+0x40>
    d2fc:	e0bffd17 	ldw	r2,-12(fp)
    d300:	10c00324 	muli	r3,r2,12
    d304:	00800074 	movhi	r2,1
    d308:	1080a604 	addi	r2,r2,664
    d30c:	1885883a 	add	r2,r3,r2
    d310:	00000106 	br	d318 <lseek+0x44>
    d314:	0005883a 	mov	r2,zero
    d318:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d31c:	e0bffc17 	ldw	r2,-16(fp)
    d320:	10001026 	beq	r2,zero,d364 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d324:	e0bffc17 	ldw	r2,-16(fp)
    d328:	10800017 	ldw	r2,0(r2)
    d32c:	10800717 	ldw	r2,28(r2)
    d330:	10000926 	beq	r2,zero,d358 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d334:	e0bffc17 	ldw	r2,-16(fp)
    d338:	10800017 	ldw	r2,0(r2)
    d33c:	10800717 	ldw	r2,28(r2)
    d340:	e1bfff17 	ldw	r6,-4(fp)
    d344:	e17ffe17 	ldw	r5,-8(fp)
    d348:	e13ffc17 	ldw	r4,-16(fp)
    d34c:	103ee83a 	callr	r2
    d350:	e0bffb15 	stw	r2,-20(fp)
    d354:	00000506 	br	d36c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d358:	00bfde84 	movi	r2,-134
    d35c:	e0bffb15 	stw	r2,-20(fp)
    d360:	00000206 	br	d36c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d364:	00bfebc4 	movi	r2,-81
    d368:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d36c:	e0bffb17 	ldw	r2,-20(fp)
    d370:	1000070e 	bge	r2,zero,d390 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d374:	000d2980 	call	d298 <alt_get_errno>
    d378:	1007883a 	mov	r3,r2
    d37c:	e0bffb17 	ldw	r2,-20(fp)
    d380:	0085c83a 	sub	r2,zero,r2
    d384:	18800015 	stw	r2,0(r3)
    rc = -1;
    d388:	00bfffc4 	movi	r2,-1
    d38c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d390:	e0bffb17 	ldw	r2,-20(fp)
}
    d394:	e037883a 	mov	sp,fp
    d398:	dfc00117 	ldw	ra,4(sp)
    d39c:	df000017 	ldw	fp,0(sp)
    d3a0:	dec00204 	addi	sp,sp,8
    d3a4:	f800283a 	ret

0000d3a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d3a8:	defffd04 	addi	sp,sp,-12
    d3ac:	dfc00215 	stw	ra,8(sp)
    d3b0:	df000115 	stw	fp,4(sp)
    d3b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d3b8:	0009883a 	mov	r4,zero
    d3bc:	000d8200 	call	d820 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d3c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d3c4:	000d8580 	call	d858 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d3c8:	01800074 	movhi	r6,1
    d3cc:	31be6904 	addi	r6,r6,-1628
    d3d0:	01400074 	movhi	r5,1
    d3d4:	297e6904 	addi	r5,r5,-1628
    d3d8:	01000074 	movhi	r4,1
    d3dc:	213e6904 	addi	r4,r4,-1628
    d3e0:	000e9b40 	call	e9b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d3e4:	000e55c0 	call	e55c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d3e8:	01000074 	movhi	r4,1
    d3ec:	21396f04 	addi	r4,r4,-6724
    d3f0:	000f1b40 	call	f1b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d3f4:	d0a6d217 	ldw	r2,-25784(gp)
    d3f8:	d0e6d317 	ldw	r3,-25780(gp)
    d3fc:	d126d417 	ldw	r4,-25776(gp)
    d400:	200d883a 	mov	r6,r4
    d404:	180b883a 	mov	r5,r3
    d408:	1009883a 	mov	r4,r2
    d40c:	00002900 	call	290 <main>
    d410:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d414:	01000044 	movi	r4,1
    d418:	000cee40 	call	cee4 <close>
  exit (result);
    d41c:	e13fff17 	ldw	r4,-4(fp)
    d420:	000f1c80 	call	f1c8 <exit>

0000d424 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d424:	defffe04 	addi	sp,sp,-8
    d428:	df000115 	stw	fp,4(sp)
    d42c:	df000104 	addi	fp,sp,4
    d430:	e13fff15 	stw	r4,-4(fp)
}
    d434:	0001883a 	nop
    d438:	e037883a 	mov	sp,fp
    d43c:	df000017 	ldw	fp,0(sp)
    d440:	dec00104 	addi	sp,sp,4
    d444:	f800283a 	ret

0000d448 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d448:	defffe04 	addi	sp,sp,-8
    d44c:	df000115 	stw	fp,4(sp)
    d450:	df000104 	addi	fp,sp,4
    d454:	e13fff15 	stw	r4,-4(fp)
}
    d458:	0001883a 	nop
    d45c:	e037883a 	mov	sp,fp
    d460:	df000017 	ldw	fp,0(sp)
    d464:	dec00104 	addi	sp,sp,4
    d468:	f800283a 	ret

0000d46c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d46c:	defffe04 	addi	sp,sp,-8
    d470:	dfc00115 	stw	ra,4(sp)
    d474:	df000015 	stw	fp,0(sp)
    d478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d47c:	d0a00b17 	ldw	r2,-32724(gp)
    d480:	10000326 	beq	r2,zero,d490 <alt_get_errno+0x24>
    d484:	d0a00b17 	ldw	r2,-32724(gp)
    d488:	103ee83a 	callr	r2
    d48c:	00000106 	br	d494 <alt_get_errno+0x28>
    d490:	d0a6d104 	addi	r2,gp,-25788
}
    d494:	e037883a 	mov	sp,fp
    d498:	dfc00117 	ldw	ra,4(sp)
    d49c:	df000017 	ldw	fp,0(sp)
    d4a0:	dec00204 	addi	sp,sp,8
    d4a4:	f800283a 	ret

0000d4a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d4a8:	defff904 	addi	sp,sp,-28
    d4ac:	dfc00615 	stw	ra,24(sp)
    d4b0:	df000515 	stw	fp,20(sp)
    d4b4:	df000504 	addi	fp,sp,20
    d4b8:	e13ffd15 	stw	r4,-12(fp)
    d4bc:	e17ffe15 	stw	r5,-8(fp)
    d4c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d4c4:	e0bffd17 	ldw	r2,-12(fp)
    d4c8:	10000616 	blt	r2,zero,d4e4 <read+0x3c>
    d4cc:	e0bffd17 	ldw	r2,-12(fp)
    d4d0:	10c00324 	muli	r3,r2,12
    d4d4:	00800074 	movhi	r2,1
    d4d8:	1080a604 	addi	r2,r2,664
    d4dc:	1885883a 	add	r2,r3,r2
    d4e0:	00000106 	br	d4e8 <read+0x40>
    d4e4:	0005883a 	mov	r2,zero
    d4e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d4ec:	e0bffb17 	ldw	r2,-20(fp)
    d4f0:	10002226 	beq	r2,zero,d57c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d4f4:	e0bffb17 	ldw	r2,-20(fp)
    d4f8:	10800217 	ldw	r2,8(r2)
    d4fc:	108000cc 	andi	r2,r2,3
    d500:	10800060 	cmpeqi	r2,r2,1
    d504:	1000181e 	bne	r2,zero,d568 <read+0xc0>
        (fd->dev->read))
    d508:	e0bffb17 	ldw	r2,-20(fp)
    d50c:	10800017 	ldw	r2,0(r2)
    d510:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d514:	10001426 	beq	r2,zero,d568 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d518:	e0bffb17 	ldw	r2,-20(fp)
    d51c:	10800017 	ldw	r2,0(r2)
    d520:	10800517 	ldw	r2,20(r2)
    d524:	e0ffff17 	ldw	r3,-4(fp)
    d528:	180d883a 	mov	r6,r3
    d52c:	e17ffe17 	ldw	r5,-8(fp)
    d530:	e13ffb17 	ldw	r4,-20(fp)
    d534:	103ee83a 	callr	r2
    d538:	e0bffc15 	stw	r2,-16(fp)
    d53c:	e0bffc17 	ldw	r2,-16(fp)
    d540:	1000070e 	bge	r2,zero,d560 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d544:	000d46c0 	call	d46c <alt_get_errno>
    d548:	1007883a 	mov	r3,r2
    d54c:	e0bffc17 	ldw	r2,-16(fp)
    d550:	0085c83a 	sub	r2,zero,r2
    d554:	18800015 	stw	r2,0(r3)
          return -1;
    d558:	00bfffc4 	movi	r2,-1
    d55c:	00000c06 	br	d590 <read+0xe8>
        }
        return rval;
    d560:	e0bffc17 	ldw	r2,-16(fp)
    d564:	00000a06 	br	d590 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d568:	000d46c0 	call	d46c <alt_get_errno>
    d56c:	1007883a 	mov	r3,r2
    d570:	00800344 	movi	r2,13
    d574:	18800015 	stw	r2,0(r3)
    d578:	00000406 	br	d58c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d57c:	000d46c0 	call	d46c <alt_get_errno>
    d580:	1007883a 	mov	r3,r2
    d584:	00801444 	movi	r2,81
    d588:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d58c:	00bfffc4 	movi	r2,-1
}
    d590:	e037883a 	mov	sp,fp
    d594:	dfc00117 	ldw	ra,4(sp)
    d598:	df000017 	ldw	fp,0(sp)
    d59c:	dec00204 	addi	sp,sp,8
    d5a0:	f800283a 	ret

0000d5a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d5a4:	defffe04 	addi	sp,sp,-8
    d5a8:	df000115 	stw	fp,4(sp)
    d5ac:	df000104 	addi	fp,sp,4
    d5b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d5b4:	e0bfff17 	ldw	r2,-4(fp)
    d5b8:	108000d0 	cmplti	r2,r2,3
    d5bc:	10000d1e 	bne	r2,zero,d5f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d5c0:	00800074 	movhi	r2,1
    d5c4:	1080a604 	addi	r2,r2,664
    d5c8:	e0ffff17 	ldw	r3,-4(fp)
    d5cc:	18c00324 	muli	r3,r3,12
    d5d0:	10c5883a 	add	r2,r2,r3
    d5d4:	10800204 	addi	r2,r2,8
    d5d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d5dc:	00800074 	movhi	r2,1
    d5e0:	1080a604 	addi	r2,r2,664
    d5e4:	e0ffff17 	ldw	r3,-4(fp)
    d5e8:	18c00324 	muli	r3,r3,12
    d5ec:	10c5883a 	add	r2,r2,r3
    d5f0:	10000015 	stw	zero,0(r2)
  }
}
    d5f4:	0001883a 	nop
    d5f8:	e037883a 	mov	sp,fp
    d5fc:	df000017 	ldw	fp,0(sp)
    d600:	dec00104 	addi	sp,sp,4
    d604:	f800283a 	ret

0000d608 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d608:	defff904 	addi	sp,sp,-28
    d60c:	df000615 	stw	fp,24(sp)
    d610:	df000604 	addi	fp,sp,24
    d614:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d618:	0005303a 	rdctl	r2,status
    d61c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d620:	e0fffe17 	ldw	r3,-8(fp)
    d624:	00bfff84 	movi	r2,-2
    d628:	1884703a 	and	r2,r3,r2
    d62c:	1001703a 	wrctl	status,r2
  
  return context;
    d630:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d634:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d638:	d0a00c17 	ldw	r2,-32720(gp)
    d63c:	10c000c4 	addi	r3,r2,3
    d640:	00bfff04 	movi	r2,-4
    d644:	1884703a 	and	r2,r3,r2
    d648:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d64c:	d0e00c17 	ldw	r3,-32720(gp)
    d650:	e0bfff17 	ldw	r2,-4(fp)
    d654:	1887883a 	add	r3,r3,r2
    d658:	008000b4 	movhi	r2,2
    d65c:	10800004 	addi	r2,r2,0
    d660:	10c0062e 	bgeu	r2,r3,d67c <sbrk+0x74>
    d664:	e0bffb17 	ldw	r2,-20(fp)
    d668:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d66c:	e0bffa17 	ldw	r2,-24(fp)
    d670:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d674:	00bfffc4 	movi	r2,-1
    d678:	00000b06 	br	d6a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d67c:	d0a00c17 	ldw	r2,-32720(gp)
    d680:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d684:	d0e00c17 	ldw	r3,-32720(gp)
    d688:	e0bfff17 	ldw	r2,-4(fp)
    d68c:	1885883a 	add	r2,r3,r2
    d690:	d0a00c15 	stw	r2,-32720(gp)
    d694:	e0bffb17 	ldw	r2,-20(fp)
    d698:	e0bffc15 	stw	r2,-16(fp)
    d69c:	e0bffc17 	ldw	r2,-16(fp)
    d6a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d6a4:	e0bffd17 	ldw	r2,-12(fp)
} 
    d6a8:	e037883a 	mov	sp,fp
    d6ac:	df000017 	ldw	fp,0(sp)
    d6b0:	dec00104 	addi	sp,sp,4
    d6b4:	f800283a 	ret

0000d6b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6b8:	defffe04 	addi	sp,sp,-8
    d6bc:	dfc00115 	stw	ra,4(sp)
    d6c0:	df000015 	stw	fp,0(sp)
    d6c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6c8:	d0a00b17 	ldw	r2,-32724(gp)
    d6cc:	10000326 	beq	r2,zero,d6dc <alt_get_errno+0x24>
    d6d0:	d0a00b17 	ldw	r2,-32724(gp)
    d6d4:	103ee83a 	callr	r2
    d6d8:	00000106 	br	d6e0 <alt_get_errno+0x28>
    d6dc:	d0a6d104 	addi	r2,gp,-25788
}
    d6e0:	e037883a 	mov	sp,fp
    d6e4:	dfc00117 	ldw	ra,4(sp)
    d6e8:	df000017 	ldw	fp,0(sp)
    d6ec:	dec00204 	addi	sp,sp,8
    d6f0:	f800283a 	ret

0000d6f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d6f4:	defff904 	addi	sp,sp,-28
    d6f8:	dfc00615 	stw	ra,24(sp)
    d6fc:	df000515 	stw	fp,20(sp)
    d700:	df000504 	addi	fp,sp,20
    d704:	e13ffd15 	stw	r4,-12(fp)
    d708:	e17ffe15 	stw	r5,-8(fp)
    d70c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d710:	e0bffd17 	ldw	r2,-12(fp)
    d714:	10000616 	blt	r2,zero,d730 <write+0x3c>
    d718:	e0bffd17 	ldw	r2,-12(fp)
    d71c:	10c00324 	muli	r3,r2,12
    d720:	00800074 	movhi	r2,1
    d724:	1080a604 	addi	r2,r2,664
    d728:	1885883a 	add	r2,r3,r2
    d72c:	00000106 	br	d734 <write+0x40>
    d730:	0005883a 	mov	r2,zero
    d734:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d738:	e0bffb17 	ldw	r2,-20(fp)
    d73c:	10002126 	beq	r2,zero,d7c4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d740:	e0bffb17 	ldw	r2,-20(fp)
    d744:	10800217 	ldw	r2,8(r2)
    d748:	108000cc 	andi	r2,r2,3
    d74c:	10001826 	beq	r2,zero,d7b0 <write+0xbc>
    d750:	e0bffb17 	ldw	r2,-20(fp)
    d754:	10800017 	ldw	r2,0(r2)
    d758:	10800617 	ldw	r2,24(r2)
    d75c:	10001426 	beq	r2,zero,d7b0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d760:	e0bffb17 	ldw	r2,-20(fp)
    d764:	10800017 	ldw	r2,0(r2)
    d768:	10800617 	ldw	r2,24(r2)
    d76c:	e0ffff17 	ldw	r3,-4(fp)
    d770:	180d883a 	mov	r6,r3
    d774:	e17ffe17 	ldw	r5,-8(fp)
    d778:	e13ffb17 	ldw	r4,-20(fp)
    d77c:	103ee83a 	callr	r2
    d780:	e0bffc15 	stw	r2,-16(fp)
    d784:	e0bffc17 	ldw	r2,-16(fp)
    d788:	1000070e 	bge	r2,zero,d7a8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d78c:	000d6b80 	call	d6b8 <alt_get_errno>
    d790:	1007883a 	mov	r3,r2
    d794:	e0bffc17 	ldw	r2,-16(fp)
    d798:	0085c83a 	sub	r2,zero,r2
    d79c:	18800015 	stw	r2,0(r3)
        return -1;
    d7a0:	00bfffc4 	movi	r2,-1
    d7a4:	00000c06 	br	d7d8 <write+0xe4>
      }
      return rval;
    d7a8:	e0bffc17 	ldw	r2,-16(fp)
    d7ac:	00000a06 	br	d7d8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d7b0:	000d6b80 	call	d6b8 <alt_get_errno>
    d7b4:	1007883a 	mov	r3,r2
    d7b8:	00800344 	movi	r2,13
    d7bc:	18800015 	stw	r2,0(r3)
    d7c0:	00000406 	br	d7d4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d7c4:	000d6b80 	call	d6b8 <alt_get_errno>
    d7c8:	1007883a 	mov	r3,r2
    d7cc:	00801444 	movi	r2,81
    d7d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d7d4:	00bfffc4 	movi	r2,-1
}
    d7d8:	e037883a 	mov	sp,fp
    d7dc:	dfc00117 	ldw	ra,4(sp)
    d7e0:	df000017 	ldw	fp,0(sp)
    d7e4:	dec00204 	addi	sp,sp,8
    d7e8:	f800283a 	ret

0000d7ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d7ec:	defffd04 	addi	sp,sp,-12
    d7f0:	dfc00215 	stw	ra,8(sp)
    d7f4:	df000115 	stw	fp,4(sp)
    d7f8:	df000104 	addi	fp,sp,4
    d7fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d800:	d1600804 	addi	r5,gp,-32736
    d804:	e13fff17 	ldw	r4,-4(fp)
    d808:	000e4b80 	call	e4b8 <alt_dev_llist_insert>
}
    d80c:	e037883a 	mov	sp,fp
    d810:	dfc00117 	ldw	ra,4(sp)
    d814:	df000017 	ldw	fp,0(sp)
    d818:	dec00204 	addi	sp,sp,8
    d81c:	f800283a 	ret

0000d820 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d820:	defffd04 	addi	sp,sp,-12
    d824:	dfc00215 	stw	ra,8(sp)
    d828:	df000115 	stw	fp,4(sp)
    d82c:	df000104 	addi	fp,sp,4
    d830:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    d834:	000ee280 	call	ee28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d838:	00800044 	movi	r2,1
    d83c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d840:	0001883a 	nop
    d844:	e037883a 	mov	sp,fp
    d848:	dfc00117 	ldw	ra,4(sp)
    d84c:	df000017 	ldw	fp,0(sp)
    d850:	dec00204 	addi	sp,sp,8
    d854:	f800283a 	ret

0000d858 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d858:	defffe04 	addi	sp,sp,-8
    d85c:	dfc00115 	stw	ra,4(sp)
    d860:	df000015 	stw	fp,0(sp)
    d864:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    d868:	01800144 	movi	r6,5
    d86c:	000b883a 	mov	r5,zero
    d870:	01000074 	movhi	r4,1
    d874:	21011004 	addi	r4,r4,1088
    d878:	000da040 	call	da04 <altera_avalon_jtag_uart_init>
    d87c:	01000074 	movhi	r4,1
    d880:	21010604 	addi	r4,r4,1048
    d884:	000d7ec0 	call	d7ec <alt_dev_reg>
}
    d888:	0001883a 	nop
    d88c:	e037883a 	mov	sp,fp
    d890:	dfc00117 	ldw	ra,4(sp)
    d894:	df000017 	ldw	fp,0(sp)
    d898:	dec00204 	addi	sp,sp,8
    d89c:	f800283a 	ret

0000d8a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d8a0:	defffa04 	addi	sp,sp,-24
    d8a4:	dfc00515 	stw	ra,20(sp)
    d8a8:	df000415 	stw	fp,16(sp)
    d8ac:	df000404 	addi	fp,sp,16
    d8b0:	e13ffd15 	stw	r4,-12(fp)
    d8b4:	e17ffe15 	stw	r5,-8(fp)
    d8b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d8bc:	e0bffd17 	ldw	r2,-12(fp)
    d8c0:	10800017 	ldw	r2,0(r2)
    d8c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d8c8:	e0bffc17 	ldw	r2,-16(fp)
    d8cc:	10c00a04 	addi	r3,r2,40
    d8d0:	e0bffd17 	ldw	r2,-12(fp)
    d8d4:	10800217 	ldw	r2,8(r2)
    d8d8:	100f883a 	mov	r7,r2
    d8dc:	e1bfff17 	ldw	r6,-4(fp)
    d8e0:	e17ffe17 	ldw	r5,-8(fp)
    d8e4:	1809883a 	mov	r4,r3
    d8e8:	000dec80 	call	dec8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d8ec:	e037883a 	mov	sp,fp
    d8f0:	dfc00117 	ldw	ra,4(sp)
    d8f4:	df000017 	ldw	fp,0(sp)
    d8f8:	dec00204 	addi	sp,sp,8
    d8fc:	f800283a 	ret

0000d900 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d900:	defffa04 	addi	sp,sp,-24
    d904:	dfc00515 	stw	ra,20(sp)
    d908:	df000415 	stw	fp,16(sp)
    d90c:	df000404 	addi	fp,sp,16
    d910:	e13ffd15 	stw	r4,-12(fp)
    d914:	e17ffe15 	stw	r5,-8(fp)
    d918:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d91c:	e0bffd17 	ldw	r2,-12(fp)
    d920:	10800017 	ldw	r2,0(r2)
    d924:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d928:	e0bffc17 	ldw	r2,-16(fp)
    d92c:	10c00a04 	addi	r3,r2,40
    d930:	e0bffd17 	ldw	r2,-12(fp)
    d934:	10800217 	ldw	r2,8(r2)
    d938:	100f883a 	mov	r7,r2
    d93c:	e1bfff17 	ldw	r6,-4(fp)
    d940:	e17ffe17 	ldw	r5,-8(fp)
    d944:	1809883a 	mov	r4,r3
    d948:	000e0e40 	call	e0e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d94c:	e037883a 	mov	sp,fp
    d950:	dfc00117 	ldw	ra,4(sp)
    d954:	df000017 	ldw	fp,0(sp)
    d958:	dec00204 	addi	sp,sp,8
    d95c:	f800283a 	ret

0000d960 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d960:	defffc04 	addi	sp,sp,-16
    d964:	dfc00315 	stw	ra,12(sp)
    d968:	df000215 	stw	fp,8(sp)
    d96c:	df000204 	addi	fp,sp,8
    d970:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d974:	e0bfff17 	ldw	r2,-4(fp)
    d978:	10800017 	ldw	r2,0(r2)
    d97c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d980:	e0bffe17 	ldw	r2,-8(fp)
    d984:	10c00a04 	addi	r3,r2,40
    d988:	e0bfff17 	ldw	r2,-4(fp)
    d98c:	10800217 	ldw	r2,8(r2)
    d990:	100b883a 	mov	r5,r2
    d994:	1809883a 	mov	r4,r3
    d998:	000dd700 	call	dd70 <altera_avalon_jtag_uart_close>
}
    d99c:	e037883a 	mov	sp,fp
    d9a0:	dfc00117 	ldw	ra,4(sp)
    d9a4:	df000017 	ldw	fp,0(sp)
    d9a8:	dec00204 	addi	sp,sp,8
    d9ac:	f800283a 	ret

0000d9b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d9b0:	defffa04 	addi	sp,sp,-24
    d9b4:	dfc00515 	stw	ra,20(sp)
    d9b8:	df000415 	stw	fp,16(sp)
    d9bc:	df000404 	addi	fp,sp,16
    d9c0:	e13ffd15 	stw	r4,-12(fp)
    d9c4:	e17ffe15 	stw	r5,-8(fp)
    d9c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d9cc:	e0bffd17 	ldw	r2,-12(fp)
    d9d0:	10800017 	ldw	r2,0(r2)
    d9d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d9d8:	e0bffc17 	ldw	r2,-16(fp)
    d9dc:	10800a04 	addi	r2,r2,40
    d9e0:	e1bfff17 	ldw	r6,-4(fp)
    d9e4:	e17ffe17 	ldw	r5,-8(fp)
    d9e8:	1009883a 	mov	r4,r2
    d9ec:	000ddd80 	call	ddd8 <altera_avalon_jtag_uart_ioctl>
}
    d9f0:	e037883a 	mov	sp,fp
    d9f4:	dfc00117 	ldw	ra,4(sp)
    d9f8:	df000017 	ldw	fp,0(sp)
    d9fc:	dec00204 	addi	sp,sp,8
    da00:	f800283a 	ret

0000da04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    da04:	defffa04 	addi	sp,sp,-24
    da08:	dfc00515 	stw	ra,20(sp)
    da0c:	df000415 	stw	fp,16(sp)
    da10:	df000404 	addi	fp,sp,16
    da14:	e13ffd15 	stw	r4,-12(fp)
    da18:	e17ffe15 	stw	r5,-8(fp)
    da1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    da20:	e0bffd17 	ldw	r2,-12(fp)
    da24:	00c00044 	movi	r3,1
    da28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    da2c:	e0bffd17 	ldw	r2,-12(fp)
    da30:	10800017 	ldw	r2,0(r2)
    da34:	10800104 	addi	r2,r2,4
    da38:	1007883a 	mov	r3,r2
    da3c:	e0bffd17 	ldw	r2,-12(fp)
    da40:	10800817 	ldw	r2,32(r2)
    da44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    da48:	e0bffe17 	ldw	r2,-8(fp)
    da4c:	e0ffff17 	ldw	r3,-4(fp)
    da50:	d8000015 	stw	zero,0(sp)
    da54:	e1fffd17 	ldw	r7,-12(fp)
    da58:	01800074 	movhi	r6,1
    da5c:	31b6b104 	addi	r6,r6,-9532
    da60:	180b883a 	mov	r5,r3
    da64:	1009883a 	mov	r4,r2
    da68:	000e6500 	call	e650 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    da6c:	e0bffd17 	ldw	r2,-12(fp)
    da70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    da74:	e0bffd17 	ldw	r2,-12(fp)
    da78:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    da7c:	d0e6d617 	ldw	r3,-25768(gp)
    da80:	e1fffd17 	ldw	r7,-12(fp)
    da84:	01800074 	movhi	r6,1
    da88:	31b73404 	addi	r6,r6,-9008
    da8c:	180b883a 	mov	r5,r3
    da90:	1009883a 	mov	r4,r2
    da94:	000e3080 	call	e308 <alt_alarm_start>
    da98:	1000040e 	bge	r2,zero,daac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    da9c:	e0fffd17 	ldw	r3,-12(fp)
    daa0:	00a00034 	movhi	r2,32768
    daa4:	10bfffc4 	addi	r2,r2,-1
    daa8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    daac:	0001883a 	nop
    dab0:	e037883a 	mov	sp,fp
    dab4:	dfc00117 	ldw	ra,4(sp)
    dab8:	df000017 	ldw	fp,0(sp)
    dabc:	dec00204 	addi	sp,sp,8
    dac0:	f800283a 	ret

0000dac4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    dac4:	defff804 	addi	sp,sp,-32
    dac8:	df000715 	stw	fp,28(sp)
    dacc:	df000704 	addi	fp,sp,28
    dad0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dad4:	e0bfff17 	ldw	r2,-4(fp)
    dad8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    dadc:	e0bffb17 	ldw	r2,-20(fp)
    dae0:	10800017 	ldw	r2,0(r2)
    dae4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dae8:	e0bffc17 	ldw	r2,-16(fp)
    daec:	10800104 	addi	r2,r2,4
    daf0:	10800037 	ldwio	r2,0(r2)
    daf4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    daf8:	e0bffd17 	ldw	r2,-12(fp)
    dafc:	1080c00c 	andi	r2,r2,768
    db00:	10006d26 	beq	r2,zero,dcb8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    db04:	e0bffd17 	ldw	r2,-12(fp)
    db08:	1080400c 	andi	r2,r2,256
    db0c:	10003526 	beq	r2,zero,dbe4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    db10:	00800074 	movhi	r2,1
    db14:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    db18:	e0bffb17 	ldw	r2,-20(fp)
    db1c:	10800a17 	ldw	r2,40(r2)
    db20:	10800044 	addi	r2,r2,1
    db24:	1081ffcc 	andi	r2,r2,2047
    db28:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    db2c:	e0bffb17 	ldw	r2,-20(fp)
    db30:	10c00b17 	ldw	r3,44(r2)
    db34:	e0bffe17 	ldw	r2,-8(fp)
    db38:	18801526 	beq	r3,r2,db90 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    db3c:	e0bffc17 	ldw	r2,-16(fp)
    db40:	10800037 	ldwio	r2,0(r2)
    db44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    db48:	e0bff917 	ldw	r2,-28(fp)
    db4c:	10a0000c 	andi	r2,r2,32768
    db50:	10001126 	beq	r2,zero,db98 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    db54:	e0bffb17 	ldw	r2,-20(fp)
    db58:	10800a17 	ldw	r2,40(r2)
    db5c:	e0fff917 	ldw	r3,-28(fp)
    db60:	1809883a 	mov	r4,r3
    db64:	e0fffb17 	ldw	r3,-20(fp)
    db68:	1885883a 	add	r2,r3,r2
    db6c:	10800e04 	addi	r2,r2,56
    db70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    db74:	e0bffb17 	ldw	r2,-20(fp)
    db78:	10800a17 	ldw	r2,40(r2)
    db7c:	10800044 	addi	r2,r2,1
    db80:	10c1ffcc 	andi	r3,r2,2047
    db84:	e0bffb17 	ldw	r2,-20(fp)
    db88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    db8c:	003fe206 	br	db18 <__alt_data_end+0xfffedb18>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    db90:	0001883a 	nop
    db94:	00000106 	br	db9c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    db98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    db9c:	e0bff917 	ldw	r2,-28(fp)
    dba0:	10bfffec 	andhi	r2,r2,65535
    dba4:	10000f26 	beq	r2,zero,dbe4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dba8:	e0bffb17 	ldw	r2,-20(fp)
    dbac:	10c00817 	ldw	r3,32(r2)
    dbb0:	00bfff84 	movi	r2,-2
    dbb4:	1886703a 	and	r3,r3,r2
    dbb8:	e0bffb17 	ldw	r2,-20(fp)
    dbbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    dbc0:	e0bffc17 	ldw	r2,-16(fp)
    dbc4:	10800104 	addi	r2,r2,4
    dbc8:	1007883a 	mov	r3,r2
    dbcc:	e0bffb17 	ldw	r2,-20(fp)
    dbd0:	10800817 	ldw	r2,32(r2)
    dbd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dbd8:	e0bffc17 	ldw	r2,-16(fp)
    dbdc:	10800104 	addi	r2,r2,4
    dbe0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dbe4:	e0bffd17 	ldw	r2,-12(fp)
    dbe8:	1080800c 	andi	r2,r2,512
    dbec:	103fbe26 	beq	r2,zero,dae8 <__alt_data_end+0xfffedae8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dbf0:	e0bffd17 	ldw	r2,-12(fp)
    dbf4:	1004d43a 	srli	r2,r2,16
    dbf8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dbfc:	00001406 	br	dc50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dc00:	e0bffc17 	ldw	r2,-16(fp)
    dc04:	e0fffb17 	ldw	r3,-20(fp)
    dc08:	18c00d17 	ldw	r3,52(r3)
    dc0c:	e13ffb17 	ldw	r4,-20(fp)
    dc10:	20c7883a 	add	r3,r4,r3
    dc14:	18c20e04 	addi	r3,r3,2104
    dc18:	18c00003 	ldbu	r3,0(r3)
    dc1c:	18c03fcc 	andi	r3,r3,255
    dc20:	18c0201c 	xori	r3,r3,128
    dc24:	18ffe004 	addi	r3,r3,-128
    dc28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc2c:	e0bffb17 	ldw	r2,-20(fp)
    dc30:	10800d17 	ldw	r2,52(r2)
    dc34:	10800044 	addi	r2,r2,1
    dc38:	10c1ffcc 	andi	r3,r2,2047
    dc3c:	e0bffb17 	ldw	r2,-20(fp)
    dc40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    dc44:	e0bffa17 	ldw	r2,-24(fp)
    dc48:	10bfffc4 	addi	r2,r2,-1
    dc4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dc50:	e0bffa17 	ldw	r2,-24(fp)
    dc54:	10000526 	beq	r2,zero,dc6c <altera_avalon_jtag_uart_irq+0x1a8>
    dc58:	e0bffb17 	ldw	r2,-20(fp)
    dc5c:	10c00d17 	ldw	r3,52(r2)
    dc60:	e0bffb17 	ldw	r2,-20(fp)
    dc64:	10800c17 	ldw	r2,48(r2)
    dc68:	18bfe51e 	bne	r3,r2,dc00 <__alt_data_end+0xfffedc00>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dc6c:	e0bffa17 	ldw	r2,-24(fp)
    dc70:	103f9d26 	beq	r2,zero,dae8 <__alt_data_end+0xfffedae8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dc74:	e0bffb17 	ldw	r2,-20(fp)
    dc78:	10c00817 	ldw	r3,32(r2)
    dc7c:	00bfff44 	movi	r2,-3
    dc80:	1886703a 	and	r3,r3,r2
    dc84:	e0bffb17 	ldw	r2,-20(fp)
    dc88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dc8c:	e0bffb17 	ldw	r2,-20(fp)
    dc90:	10800017 	ldw	r2,0(r2)
    dc94:	10800104 	addi	r2,r2,4
    dc98:	1007883a 	mov	r3,r2
    dc9c:	e0bffb17 	ldw	r2,-20(fp)
    dca0:	10800817 	ldw	r2,32(r2)
    dca4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dca8:	e0bffc17 	ldw	r2,-16(fp)
    dcac:	10800104 	addi	r2,r2,4
    dcb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    dcb4:	003f8c06 	br	dae8 <__alt_data_end+0xfffedae8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    dcb8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    dcbc:	0001883a 	nop
    dcc0:	e037883a 	mov	sp,fp
    dcc4:	df000017 	ldw	fp,0(sp)
    dcc8:	dec00104 	addi	sp,sp,4
    dccc:	f800283a 	ret

0000dcd0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    dcd0:	defff804 	addi	sp,sp,-32
    dcd4:	df000715 	stw	fp,28(sp)
    dcd8:	df000704 	addi	fp,sp,28
    dcdc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    dce0:	e0bffb17 	ldw	r2,-20(fp)
    dce4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dce8:	e0bff917 	ldw	r2,-28(fp)
    dcec:	10800017 	ldw	r2,0(r2)
    dcf0:	10800104 	addi	r2,r2,4
    dcf4:	10800037 	ldwio	r2,0(r2)
    dcf8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dcfc:	e0bffa17 	ldw	r2,-24(fp)
    dd00:	1081000c 	andi	r2,r2,1024
    dd04:	10000b26 	beq	r2,zero,dd34 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dd08:	e0bff917 	ldw	r2,-28(fp)
    dd0c:	10800017 	ldw	r2,0(r2)
    dd10:	10800104 	addi	r2,r2,4
    dd14:	1007883a 	mov	r3,r2
    dd18:	e0bff917 	ldw	r2,-28(fp)
    dd1c:	10800817 	ldw	r2,32(r2)
    dd20:	10810014 	ori	r2,r2,1024
    dd24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dd28:	e0bff917 	ldw	r2,-28(fp)
    dd2c:	10000915 	stw	zero,36(r2)
    dd30:	00000a06 	br	dd5c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dd34:	e0bff917 	ldw	r2,-28(fp)
    dd38:	10c00917 	ldw	r3,36(r2)
    dd3c:	00a00034 	movhi	r2,32768
    dd40:	10bfff04 	addi	r2,r2,-4
    dd44:	10c00536 	bltu	r2,r3,dd5c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    dd48:	e0bff917 	ldw	r2,-28(fp)
    dd4c:	10800917 	ldw	r2,36(r2)
    dd50:	10c00044 	addi	r3,r2,1
    dd54:	e0bff917 	ldw	r2,-28(fp)
    dd58:	10c00915 	stw	r3,36(r2)
    dd5c:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dd60:	e037883a 	mov	sp,fp
    dd64:	df000017 	ldw	fp,0(sp)
    dd68:	dec00104 	addi	sp,sp,4
    dd6c:	f800283a 	ret

0000dd70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dd70:	defffd04 	addi	sp,sp,-12
    dd74:	df000215 	stw	fp,8(sp)
    dd78:	df000204 	addi	fp,sp,8
    dd7c:	e13ffe15 	stw	r4,-8(fp)
    dd80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dd84:	00000506 	br	dd9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dd88:	e0bfff17 	ldw	r2,-4(fp)
    dd8c:	1090000c 	andi	r2,r2,16384
    dd90:	10000226 	beq	r2,zero,dd9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dd94:	00bffd44 	movi	r2,-11
    dd98:	00000b06 	br	ddc8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dd9c:	e0bffe17 	ldw	r2,-8(fp)
    dda0:	10c00d17 	ldw	r3,52(r2)
    dda4:	e0bffe17 	ldw	r2,-8(fp)
    dda8:	10800c17 	ldw	r2,48(r2)
    ddac:	18800526 	beq	r3,r2,ddc4 <altera_avalon_jtag_uart_close+0x54>
    ddb0:	e0bffe17 	ldw	r2,-8(fp)
    ddb4:	10c00917 	ldw	r3,36(r2)
    ddb8:	e0bffe17 	ldw	r2,-8(fp)
    ddbc:	10800117 	ldw	r2,4(r2)
    ddc0:	18bff136 	bltu	r3,r2,dd88 <__alt_data_end+0xfffedd88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ddc4:	0005883a 	mov	r2,zero
}
    ddc8:	e037883a 	mov	sp,fp
    ddcc:	df000017 	ldw	fp,0(sp)
    ddd0:	dec00104 	addi	sp,sp,4
    ddd4:	f800283a 	ret

0000ddd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ddd8:	defffa04 	addi	sp,sp,-24
    dddc:	df000515 	stw	fp,20(sp)
    dde0:	df000504 	addi	fp,sp,20
    dde4:	e13ffd15 	stw	r4,-12(fp)
    dde8:	e17ffe15 	stw	r5,-8(fp)
    ddec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ddf0:	00bff9c4 	movi	r2,-25
    ddf4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ddf8:	e0bffe17 	ldw	r2,-8(fp)
    ddfc:	10da8060 	cmpeqi	r3,r2,27137
    de00:	1800031e 	bne	r3,zero,de10 <altera_avalon_jtag_uart_ioctl+0x38>
    de04:	109a80a0 	cmpeqi	r2,r2,27138
    de08:	1000181e 	bne	r2,zero,de6c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    de0c:	00002906 	br	deb4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    de10:	e0bffd17 	ldw	r2,-12(fp)
    de14:	10c00117 	ldw	r3,4(r2)
    de18:	00a00034 	movhi	r2,32768
    de1c:	10bfffc4 	addi	r2,r2,-1
    de20:	18802126 	beq	r3,r2,dea8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    de24:	e0bfff17 	ldw	r2,-4(fp)
    de28:	10800017 	ldw	r2,0(r2)
    de2c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    de30:	e0bffc17 	ldw	r2,-16(fp)
    de34:	10800090 	cmplti	r2,r2,2
    de38:	1000061e 	bne	r2,zero,de54 <altera_avalon_jtag_uart_ioctl+0x7c>
    de3c:	e0fffc17 	ldw	r3,-16(fp)
    de40:	00a00034 	movhi	r2,32768
    de44:	10bfffc4 	addi	r2,r2,-1
    de48:	18800226 	beq	r3,r2,de54 <altera_avalon_jtag_uart_ioctl+0x7c>
    de4c:	e0bffc17 	ldw	r2,-16(fp)
    de50:	00000206 	br	de5c <altera_avalon_jtag_uart_ioctl+0x84>
    de54:	00a00034 	movhi	r2,32768
    de58:	10bfff84 	addi	r2,r2,-2
    de5c:	e0fffd17 	ldw	r3,-12(fp)
    de60:	18800115 	stw	r2,4(r3)
      rc = 0;
    de64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    de68:	00000f06 	br	dea8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    de6c:	e0bffd17 	ldw	r2,-12(fp)
    de70:	10c00117 	ldw	r3,4(r2)
    de74:	00a00034 	movhi	r2,32768
    de78:	10bfffc4 	addi	r2,r2,-1
    de7c:	18800c26 	beq	r3,r2,deb0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    de80:	e0bffd17 	ldw	r2,-12(fp)
    de84:	10c00917 	ldw	r3,36(r2)
    de88:	e0bffd17 	ldw	r2,-12(fp)
    de8c:	10800117 	ldw	r2,4(r2)
    de90:	1885803a 	cmpltu	r2,r3,r2
    de94:	10c03fcc 	andi	r3,r2,255
    de98:	e0bfff17 	ldw	r2,-4(fp)
    de9c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dea0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dea4:	00000206 	br	deb0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    dea8:	0001883a 	nop
    deac:	00000106 	br	deb4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    deb0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    deb4:	e0bffb17 	ldw	r2,-20(fp)
}
    deb8:	e037883a 	mov	sp,fp
    debc:	df000017 	ldw	fp,0(sp)
    dec0:	dec00104 	addi	sp,sp,4
    dec4:	f800283a 	ret

0000dec8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dec8:	defff304 	addi	sp,sp,-52
    decc:	dfc00c15 	stw	ra,48(sp)
    ded0:	df000b15 	stw	fp,44(sp)
    ded4:	df000b04 	addi	fp,sp,44
    ded8:	e13ffc15 	stw	r4,-16(fp)
    dedc:	e17ffd15 	stw	r5,-12(fp)
    dee0:	e1bffe15 	stw	r6,-8(fp)
    dee4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dee8:	e0bffd17 	ldw	r2,-12(fp)
    deec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    def0:	00004706 	br	e010 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    def4:	e0bffc17 	ldw	r2,-16(fp)
    def8:	10800a17 	ldw	r2,40(r2)
    defc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    df00:	e0bffc17 	ldw	r2,-16(fp)
    df04:	10800b17 	ldw	r2,44(r2)
    df08:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    df0c:	e0fff717 	ldw	r3,-36(fp)
    df10:	e0bff817 	ldw	r2,-32(fp)
    df14:	18800536 	bltu	r3,r2,df2c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    df18:	e0fff717 	ldw	r3,-36(fp)
    df1c:	e0bff817 	ldw	r2,-32(fp)
    df20:	1885c83a 	sub	r2,r3,r2
    df24:	e0bff615 	stw	r2,-40(fp)
    df28:	00000406 	br	df3c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    df2c:	00c20004 	movi	r3,2048
    df30:	e0bff817 	ldw	r2,-32(fp)
    df34:	1885c83a 	sub	r2,r3,r2
    df38:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    df3c:	e0bff617 	ldw	r2,-40(fp)
    df40:	10001e26 	beq	r2,zero,dfbc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    df44:	e0fffe17 	ldw	r3,-8(fp)
    df48:	e0bff617 	ldw	r2,-40(fp)
    df4c:	1880022e 	bgeu	r3,r2,df58 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    df50:	e0bffe17 	ldw	r2,-8(fp)
    df54:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    df58:	e0bffc17 	ldw	r2,-16(fp)
    df5c:	10c00e04 	addi	r3,r2,56
    df60:	e0bff817 	ldw	r2,-32(fp)
    df64:	1885883a 	add	r2,r3,r2
    df68:	e1bff617 	ldw	r6,-40(fp)
    df6c:	100b883a 	mov	r5,r2
    df70:	e13ff517 	ldw	r4,-44(fp)
    df74:	00062080 	call	6208 <memcpy>
      ptr   += n;
    df78:	e0fff517 	ldw	r3,-44(fp)
    df7c:	e0bff617 	ldw	r2,-40(fp)
    df80:	1885883a 	add	r2,r3,r2
    df84:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    df88:	e0fffe17 	ldw	r3,-8(fp)
    df8c:	e0bff617 	ldw	r2,-40(fp)
    df90:	1885c83a 	sub	r2,r3,r2
    df94:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df98:	e0fff817 	ldw	r3,-32(fp)
    df9c:	e0bff617 	ldw	r2,-40(fp)
    dfa0:	1885883a 	add	r2,r3,r2
    dfa4:	10c1ffcc 	andi	r3,r2,2047
    dfa8:	e0bffc17 	ldw	r2,-16(fp)
    dfac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    dfb0:	e0bffe17 	ldw	r2,-8(fp)
    dfb4:	00bfcf16 	blt	zero,r2,def4 <__alt_data_end+0xfffedef4>
    dfb8:	00000106 	br	dfc0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    dfbc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    dfc0:	e0fff517 	ldw	r3,-44(fp)
    dfc4:	e0bffd17 	ldw	r2,-12(fp)
    dfc8:	1880141e 	bne	r3,r2,e01c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    dfcc:	e0bfff17 	ldw	r2,-4(fp)
    dfd0:	1090000c 	andi	r2,r2,16384
    dfd4:	1000131e 	bne	r2,zero,e024 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dfd8:	0001883a 	nop
    dfdc:	e0bffc17 	ldw	r2,-16(fp)
    dfe0:	10c00a17 	ldw	r3,40(r2)
    dfe4:	e0bff717 	ldw	r2,-36(fp)
    dfe8:	1880051e 	bne	r3,r2,e000 <altera_avalon_jtag_uart_read+0x138>
    dfec:	e0bffc17 	ldw	r2,-16(fp)
    dff0:	10c00917 	ldw	r3,36(r2)
    dff4:	e0bffc17 	ldw	r2,-16(fp)
    dff8:	10800117 	ldw	r2,4(r2)
    dffc:	18bff736 	bltu	r3,r2,dfdc <__alt_data_end+0xfffedfdc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e000:	e0bffc17 	ldw	r2,-16(fp)
    e004:	10c00a17 	ldw	r3,40(r2)
    e008:	e0bff717 	ldw	r2,-36(fp)
    e00c:	18800726 	beq	r3,r2,e02c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e010:	e0bffe17 	ldw	r2,-8(fp)
    e014:	00bfb716 	blt	zero,r2,def4 <__alt_data_end+0xfffedef4>
    e018:	00000506 	br	e030 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e01c:	0001883a 	nop
    e020:	00000306 	br	e030 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e024:	0001883a 	nop
    e028:	00000106 	br	e030 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e02c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e030:	e0fff517 	ldw	r3,-44(fp)
    e034:	e0bffd17 	ldw	r2,-12(fp)
    e038:	18801826 	beq	r3,r2,e09c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e03c:	0005303a 	rdctl	r2,status
    e040:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e044:	e0fffb17 	ldw	r3,-20(fp)
    e048:	00bfff84 	movi	r2,-2
    e04c:	1884703a 	and	r2,r3,r2
    e050:	1001703a 	wrctl	status,r2
  
  return context;
    e054:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e058:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e05c:	e0bffc17 	ldw	r2,-16(fp)
    e060:	10800817 	ldw	r2,32(r2)
    e064:	10c00054 	ori	r3,r2,1
    e068:	e0bffc17 	ldw	r2,-16(fp)
    e06c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e070:	e0bffc17 	ldw	r2,-16(fp)
    e074:	10800017 	ldw	r2,0(r2)
    e078:	10800104 	addi	r2,r2,4
    e07c:	1007883a 	mov	r3,r2
    e080:	e0bffc17 	ldw	r2,-16(fp)
    e084:	10800817 	ldw	r2,32(r2)
    e088:	18800035 	stwio	r2,0(r3)
    e08c:	e0bffa17 	ldw	r2,-24(fp)
    e090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e094:	e0bff917 	ldw	r2,-28(fp)
    e098:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e09c:	e0fff517 	ldw	r3,-44(fp)
    e0a0:	e0bffd17 	ldw	r2,-12(fp)
    e0a4:	18800426 	beq	r3,r2,e0b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e0a8:	e0fff517 	ldw	r3,-44(fp)
    e0ac:	e0bffd17 	ldw	r2,-12(fp)
    e0b0:	1885c83a 	sub	r2,r3,r2
    e0b4:	00000606 	br	e0d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e0b8:	e0bfff17 	ldw	r2,-4(fp)
    e0bc:	1090000c 	andi	r2,r2,16384
    e0c0:	10000226 	beq	r2,zero,e0cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e0c4:	00bffd44 	movi	r2,-11
    e0c8:	00000106 	br	e0d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e0cc:	00bffec4 	movi	r2,-5
}
    e0d0:	e037883a 	mov	sp,fp
    e0d4:	dfc00117 	ldw	ra,4(sp)
    e0d8:	df000017 	ldw	fp,0(sp)
    e0dc:	dec00204 	addi	sp,sp,8
    e0e0:	f800283a 	ret

0000e0e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e0e4:	defff304 	addi	sp,sp,-52
    e0e8:	dfc00c15 	stw	ra,48(sp)
    e0ec:	df000b15 	stw	fp,44(sp)
    e0f0:	df000b04 	addi	fp,sp,44
    e0f4:	e13ffc15 	stw	r4,-16(fp)
    e0f8:	e17ffd15 	stw	r5,-12(fp)
    e0fc:	e1bffe15 	stw	r6,-8(fp)
    e100:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e104:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e108:	e0bffd17 	ldw	r2,-12(fp)
    e10c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e110:	00003706 	br	e1f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e114:	e0bffc17 	ldw	r2,-16(fp)
    e118:	10800c17 	ldw	r2,48(r2)
    e11c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e120:	e0bffc17 	ldw	r2,-16(fp)
    e124:	10800d17 	ldw	r2,52(r2)
    e128:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e12c:	e0fff917 	ldw	r3,-28(fp)
    e130:	e0bff517 	ldw	r2,-44(fp)
    e134:	1880062e 	bgeu	r3,r2,e150 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e138:	e0fff517 	ldw	r3,-44(fp)
    e13c:	e0bff917 	ldw	r2,-28(fp)
    e140:	1885c83a 	sub	r2,r3,r2
    e144:	10bfffc4 	addi	r2,r2,-1
    e148:	e0bff615 	stw	r2,-40(fp)
    e14c:	00000b06 	br	e17c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e150:	e0bff517 	ldw	r2,-44(fp)
    e154:	10000526 	beq	r2,zero,e16c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e158:	00c20004 	movi	r3,2048
    e15c:	e0bff917 	ldw	r2,-28(fp)
    e160:	1885c83a 	sub	r2,r3,r2
    e164:	e0bff615 	stw	r2,-40(fp)
    e168:	00000406 	br	e17c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e16c:	00c1ffc4 	movi	r3,2047
    e170:	e0bff917 	ldw	r2,-28(fp)
    e174:	1885c83a 	sub	r2,r3,r2
    e178:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e17c:	e0bff617 	ldw	r2,-40(fp)
    e180:	10001e26 	beq	r2,zero,e1fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e184:	e0fffe17 	ldw	r3,-8(fp)
    e188:	e0bff617 	ldw	r2,-40(fp)
    e18c:	1880022e 	bgeu	r3,r2,e198 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e190:	e0bffe17 	ldw	r2,-8(fp)
    e194:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e198:	e0bffc17 	ldw	r2,-16(fp)
    e19c:	10c20e04 	addi	r3,r2,2104
    e1a0:	e0bff917 	ldw	r2,-28(fp)
    e1a4:	1885883a 	add	r2,r3,r2
    e1a8:	e1bff617 	ldw	r6,-40(fp)
    e1ac:	e17ffd17 	ldw	r5,-12(fp)
    e1b0:	1009883a 	mov	r4,r2
    e1b4:	00062080 	call	6208 <memcpy>
      ptr   += n;
    e1b8:	e0fffd17 	ldw	r3,-12(fp)
    e1bc:	e0bff617 	ldw	r2,-40(fp)
    e1c0:	1885883a 	add	r2,r3,r2
    e1c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e1c8:	e0fffe17 	ldw	r3,-8(fp)
    e1cc:	e0bff617 	ldw	r2,-40(fp)
    e1d0:	1885c83a 	sub	r2,r3,r2
    e1d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e1d8:	e0fff917 	ldw	r3,-28(fp)
    e1dc:	e0bff617 	ldw	r2,-40(fp)
    e1e0:	1885883a 	add	r2,r3,r2
    e1e4:	10c1ffcc 	andi	r3,r2,2047
    e1e8:	e0bffc17 	ldw	r2,-16(fp)
    e1ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e1f0:	e0bffe17 	ldw	r2,-8(fp)
    e1f4:	00bfc716 	blt	zero,r2,e114 <__alt_data_end+0xfffee114>
    e1f8:	00000106 	br	e200 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e1fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e200:	0005303a 	rdctl	r2,status
    e204:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e208:	e0fffb17 	ldw	r3,-20(fp)
    e20c:	00bfff84 	movi	r2,-2
    e210:	1884703a 	and	r2,r3,r2
    e214:	1001703a 	wrctl	status,r2
  
  return context;
    e218:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e21c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e220:	e0bffc17 	ldw	r2,-16(fp)
    e224:	10800817 	ldw	r2,32(r2)
    e228:	10c00094 	ori	r3,r2,2
    e22c:	e0bffc17 	ldw	r2,-16(fp)
    e230:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e234:	e0bffc17 	ldw	r2,-16(fp)
    e238:	10800017 	ldw	r2,0(r2)
    e23c:	10800104 	addi	r2,r2,4
    e240:	1007883a 	mov	r3,r2
    e244:	e0bffc17 	ldw	r2,-16(fp)
    e248:	10800817 	ldw	r2,32(r2)
    e24c:	18800035 	stwio	r2,0(r3)
    e250:	e0bffa17 	ldw	r2,-24(fp)
    e254:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e258:	e0bff817 	ldw	r2,-32(fp)
    e25c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e260:	e0bffe17 	ldw	r2,-8(fp)
    e264:	0080100e 	bge	zero,r2,e2a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e268:	e0bfff17 	ldw	r2,-4(fp)
    e26c:	1090000c 	andi	r2,r2,16384
    e270:	1000101e 	bne	r2,zero,e2b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e274:	0001883a 	nop
    e278:	e0bffc17 	ldw	r2,-16(fp)
    e27c:	10c00d17 	ldw	r3,52(r2)
    e280:	e0bff517 	ldw	r2,-44(fp)
    e284:	1880051e 	bne	r3,r2,e29c <altera_avalon_jtag_uart_write+0x1b8>
    e288:	e0bffc17 	ldw	r2,-16(fp)
    e28c:	10c00917 	ldw	r3,36(r2)
    e290:	e0bffc17 	ldw	r2,-16(fp)
    e294:	10800117 	ldw	r2,4(r2)
    e298:	18bff736 	bltu	r3,r2,e278 <__alt_data_end+0xfffee278>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e29c:	e0bffc17 	ldw	r2,-16(fp)
    e2a0:	10800917 	ldw	r2,36(r2)
    e2a4:	1000051e 	bne	r2,zero,e2bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e2a8:	e0bffe17 	ldw	r2,-8(fp)
    e2ac:	00bfd016 	blt	zero,r2,e1f0 <__alt_data_end+0xfffee1f0>
    e2b0:	00000306 	br	e2c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e2b4:	0001883a 	nop
    e2b8:	00000106 	br	e2c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e2bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e2c0:	e0fffd17 	ldw	r3,-12(fp)
    e2c4:	e0bff717 	ldw	r2,-36(fp)
    e2c8:	18800426 	beq	r3,r2,e2dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e2cc:	e0fffd17 	ldw	r3,-12(fp)
    e2d0:	e0bff717 	ldw	r2,-36(fp)
    e2d4:	1885c83a 	sub	r2,r3,r2
    e2d8:	00000606 	br	e2f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e2dc:	e0bfff17 	ldw	r2,-4(fp)
    e2e0:	1090000c 	andi	r2,r2,16384
    e2e4:	10000226 	beq	r2,zero,e2f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e2e8:	00bffd44 	movi	r2,-11
    e2ec:	00000106 	br	e2f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e2f0:	00bffec4 	movi	r2,-5
}
    e2f4:	e037883a 	mov	sp,fp
    e2f8:	dfc00117 	ldw	ra,4(sp)
    e2fc:	df000017 	ldw	fp,0(sp)
    e300:	dec00204 	addi	sp,sp,8
    e304:	f800283a 	ret

0000e308 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e308:	defff504 	addi	sp,sp,-44
    e30c:	df000a15 	stw	fp,40(sp)
    e310:	df000a04 	addi	fp,sp,40
    e314:	e13ffc15 	stw	r4,-16(fp)
    e318:	e17ffd15 	stw	r5,-12(fp)
    e31c:	e1bffe15 	stw	r6,-8(fp)
    e320:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e324:	e03ff615 	stw	zero,-40(fp)
    e328:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
    e32c:	10003c26 	beq	r2,zero,e420 <alt_alarm_start+0x118>
  {
    if (alarm)
    e330:	e0bffc17 	ldw	r2,-16(fp)
    e334:	10003826 	beq	r2,zero,e418 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e338:	e0bffc17 	ldw	r2,-16(fp)
    e33c:	e0fffe17 	ldw	r3,-8(fp)
    e340:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e344:	e0bffc17 	ldw	r2,-16(fp)
    e348:	e0ffff17 	ldw	r3,-4(fp)
    e34c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e350:	0005303a 	rdctl	r2,status
    e354:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e358:	e0fff917 	ldw	r3,-28(fp)
    e35c:	00bfff84 	movi	r2,-2
    e360:	1884703a 	and	r2,r3,r2
    e364:	1001703a 	wrctl	status,r2
  
  return context;
    e368:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e36c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e370:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
    e374:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e378:	e0fffd17 	ldw	r3,-12(fp)
    e37c:	e0bff617 	ldw	r2,-40(fp)
    e380:	1885883a 	add	r2,r3,r2
    e384:	10c00044 	addi	r3,r2,1
    e388:	e0bffc17 	ldw	r2,-16(fp)
    e38c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e390:	e0bffc17 	ldw	r2,-16(fp)
    e394:	10c00217 	ldw	r3,8(r2)
    e398:	e0bff617 	ldw	r2,-40(fp)
    e39c:	1880042e 	bgeu	r3,r2,e3b0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e3a0:	e0bffc17 	ldw	r2,-16(fp)
    e3a4:	00c00044 	movi	r3,1
    e3a8:	10c00405 	stb	r3,16(r2)
    e3ac:	00000206 	br	e3b8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e3b0:	e0bffc17 	ldw	r2,-16(fp)
    e3b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e3b8:	e0bffc17 	ldw	r2,-16(fp)
    e3bc:	d0e00e04 	addi	r3,gp,-32712
    e3c0:	e0fffa15 	stw	r3,-24(fp)
    e3c4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e3c8:	e0bffb17 	ldw	r2,-20(fp)
    e3cc:	e0fffa17 	ldw	r3,-24(fp)
    e3d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e3d4:	e0bffa17 	ldw	r2,-24(fp)
    e3d8:	10c00017 	ldw	r3,0(r2)
    e3dc:	e0bffb17 	ldw	r2,-20(fp)
    e3e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e3e4:	e0bffa17 	ldw	r2,-24(fp)
    e3e8:	10800017 	ldw	r2,0(r2)
    e3ec:	e0fffb17 	ldw	r3,-20(fp)
    e3f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e3f4:	e0bffa17 	ldw	r2,-24(fp)
    e3f8:	e0fffb17 	ldw	r3,-20(fp)
    e3fc:	10c00015 	stw	r3,0(r2)
    e400:	e0bff817 	ldw	r2,-32(fp)
    e404:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e408:	e0bff717 	ldw	r2,-36(fp)
    e40c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e410:	0005883a 	mov	r2,zero
    e414:	00000306 	br	e424 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    e418:	00bffa84 	movi	r2,-22
    e41c:	00000106 	br	e424 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    e420:	00bfde84 	movi	r2,-134
  }
}
    e424:	e037883a 	mov	sp,fp
    e428:	df000017 	ldw	fp,0(sp)
    e42c:	dec00104 	addi	sp,sp,4
    e430:	f800283a 	ret

0000e434 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e434:	defffe04 	addi	sp,sp,-8
    e438:	df000115 	stw	fp,4(sp)
    e43c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e440:	e03fff15 	stw	zero,-4(fp)
    e444:	00000506 	br	e45c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e448:	e0bfff17 	ldw	r2,-4(fp)
    e44c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e450:	e0bfff17 	ldw	r2,-4(fp)
    e454:	10800804 	addi	r2,r2,32
    e458:	e0bfff15 	stw	r2,-4(fp)
    e45c:	e0bfff17 	ldw	r2,-4(fp)
    e460:	10820030 	cmpltui	r2,r2,2048
    e464:	103ff81e 	bne	r2,zero,e448 <__alt_data_end+0xfffee448>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e468:	0001883a 	nop
    e46c:	e037883a 	mov	sp,fp
    e470:	df000017 	ldw	fp,0(sp)
    e474:	dec00104 	addi	sp,sp,4
    e478:	f800283a 	ret

0000e47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e47c:	defffe04 	addi	sp,sp,-8
    e480:	dfc00115 	stw	ra,4(sp)
    e484:	df000015 	stw	fp,0(sp)
    e488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e48c:	d0a00b17 	ldw	r2,-32724(gp)
    e490:	10000326 	beq	r2,zero,e4a0 <alt_get_errno+0x24>
    e494:	d0a00b17 	ldw	r2,-32724(gp)
    e498:	103ee83a 	callr	r2
    e49c:	00000106 	br	e4a4 <alt_get_errno+0x28>
    e4a0:	d0a6d104 	addi	r2,gp,-25788
}
    e4a4:	e037883a 	mov	sp,fp
    e4a8:	dfc00117 	ldw	ra,4(sp)
    e4ac:	df000017 	ldw	fp,0(sp)
    e4b0:	dec00204 	addi	sp,sp,8
    e4b4:	f800283a 	ret

0000e4b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e4b8:	defffa04 	addi	sp,sp,-24
    e4bc:	dfc00515 	stw	ra,20(sp)
    e4c0:	df000415 	stw	fp,16(sp)
    e4c4:	df000404 	addi	fp,sp,16
    e4c8:	e13ffe15 	stw	r4,-8(fp)
    e4cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e4d0:	e0bffe17 	ldw	r2,-8(fp)
    e4d4:	10000326 	beq	r2,zero,e4e4 <alt_dev_llist_insert+0x2c>
    e4d8:	e0bffe17 	ldw	r2,-8(fp)
    e4dc:	10800217 	ldw	r2,8(r2)
    e4e0:	1000061e 	bne	r2,zero,e4fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e4e4:	000e47c0 	call	e47c <alt_get_errno>
    e4e8:	1007883a 	mov	r3,r2
    e4ec:	00800584 	movi	r2,22
    e4f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e4f4:	00bffa84 	movi	r2,-22
    e4f8:	00001306 	br	e548 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e4fc:	e0bffe17 	ldw	r2,-8(fp)
    e500:	e0ffff17 	ldw	r3,-4(fp)
    e504:	e0fffc15 	stw	r3,-16(fp)
    e508:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e50c:	e0bffd17 	ldw	r2,-12(fp)
    e510:	e0fffc17 	ldw	r3,-16(fp)
    e514:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e518:	e0bffc17 	ldw	r2,-16(fp)
    e51c:	10c00017 	ldw	r3,0(r2)
    e520:	e0bffd17 	ldw	r2,-12(fp)
    e524:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e528:	e0bffc17 	ldw	r2,-16(fp)
    e52c:	10800017 	ldw	r2,0(r2)
    e530:	e0fffd17 	ldw	r3,-12(fp)
    e534:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e538:	e0bffc17 	ldw	r2,-16(fp)
    e53c:	e0fffd17 	ldw	r3,-12(fp)
    e540:	10c00015 	stw	r3,0(r2)

  return 0;  
    e544:	0005883a 	mov	r2,zero
}
    e548:	e037883a 	mov	sp,fp
    e54c:	dfc00117 	ldw	ra,4(sp)
    e550:	df000017 	ldw	fp,0(sp)
    e554:	dec00204 	addi	sp,sp,8
    e558:	f800283a 	ret

0000e55c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e55c:	defffd04 	addi	sp,sp,-12
    e560:	dfc00215 	stw	ra,8(sp)
    e564:	df000115 	stw	fp,4(sp)
    e568:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e56c:	00800074 	movhi	r2,1
    e570:	10bd5104 	addi	r2,r2,-2748
    e574:	e0bfff15 	stw	r2,-4(fp)
    e578:	00000606 	br	e594 <_do_ctors+0x38>
        (*ctor) (); 
    e57c:	e0bfff17 	ldw	r2,-4(fp)
    e580:	10800017 	ldw	r2,0(r2)
    e584:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	10bfff04 	addi	r2,r2,-4
    e590:	e0bfff15 	stw	r2,-4(fp)
    e594:	e0ffff17 	ldw	r3,-4(fp)
    e598:	00800074 	movhi	r2,1
    e59c:	10bd5204 	addi	r2,r2,-2744
    e5a0:	18bff62e 	bgeu	r3,r2,e57c <__alt_data_end+0xfffee57c>
        (*ctor) (); 
}
    e5a4:	0001883a 	nop
    e5a8:	e037883a 	mov	sp,fp
    e5ac:	dfc00117 	ldw	ra,4(sp)
    e5b0:	df000017 	ldw	fp,0(sp)
    e5b4:	dec00204 	addi	sp,sp,8
    e5b8:	f800283a 	ret

0000e5bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e5bc:	defffd04 	addi	sp,sp,-12
    e5c0:	dfc00215 	stw	ra,8(sp)
    e5c4:	df000115 	stw	fp,4(sp)
    e5c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e5cc:	00800074 	movhi	r2,1
    e5d0:	10bd5104 	addi	r2,r2,-2748
    e5d4:	e0bfff15 	stw	r2,-4(fp)
    e5d8:	00000606 	br	e5f4 <_do_dtors+0x38>
        (*dtor) (); 
    e5dc:	e0bfff17 	ldw	r2,-4(fp)
    e5e0:	10800017 	ldw	r2,0(r2)
    e5e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e5e8:	e0bfff17 	ldw	r2,-4(fp)
    e5ec:	10bfff04 	addi	r2,r2,-4
    e5f0:	e0bfff15 	stw	r2,-4(fp)
    e5f4:	e0ffff17 	ldw	r3,-4(fp)
    e5f8:	00800074 	movhi	r2,1
    e5fc:	10bd5204 	addi	r2,r2,-2744
    e600:	18bff62e 	bgeu	r3,r2,e5dc <__alt_data_end+0xfffee5dc>
        (*dtor) (); 
}
    e604:	0001883a 	nop
    e608:	e037883a 	mov	sp,fp
    e60c:	dfc00117 	ldw	ra,4(sp)
    e610:	df000017 	ldw	fp,0(sp)
    e614:	dec00204 	addi	sp,sp,8
    e618:	f800283a 	ret

0000e61c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e61c:	defffe04 	addi	sp,sp,-8
    e620:	dfc00115 	stw	ra,4(sp)
    e624:	df000015 	stw	fp,0(sp)
    e628:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e62c:	01440004 	movi	r5,4096
    e630:	0009883a 	mov	r4,zero
    e634:	000f0880 	call	f088 <alt_icache_flush>
#endif
}
    e638:	0001883a 	nop
    e63c:	e037883a 	mov	sp,fp
    e640:	dfc00117 	ldw	ra,4(sp)
    e644:	df000017 	ldw	fp,0(sp)
    e648:	dec00204 	addi	sp,sp,8
    e64c:	f800283a 	ret

0000e650 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e650:	defff904 	addi	sp,sp,-28
    e654:	dfc00615 	stw	ra,24(sp)
    e658:	df000515 	stw	fp,20(sp)
    e65c:	df000504 	addi	fp,sp,20
    e660:	e13ffc15 	stw	r4,-16(fp)
    e664:	e17ffd15 	stw	r5,-12(fp)
    e668:	e1bffe15 	stw	r6,-8(fp)
    e66c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    e670:	e0800217 	ldw	r2,8(fp)
    e674:	d8800015 	stw	r2,0(sp)
    e678:	e1ffff17 	ldw	r7,-4(fp)
    e67c:	e1bffe17 	ldw	r6,-8(fp)
    e680:	e17ffd17 	ldw	r5,-12(fp)
    e684:	e13ffc17 	ldw	r4,-16(fp)
    e688:	000e8000 	call	e800 <alt_iic_isr_register>
}  
    e68c:	e037883a 	mov	sp,fp
    e690:	dfc00117 	ldw	ra,4(sp)
    e694:	df000017 	ldw	fp,0(sp)
    e698:	dec00204 	addi	sp,sp,8
    e69c:	f800283a 	ret

0000e6a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    e6a0:	defff904 	addi	sp,sp,-28
    e6a4:	df000615 	stw	fp,24(sp)
    e6a8:	df000604 	addi	fp,sp,24
    e6ac:	e13ffe15 	stw	r4,-8(fp)
    e6b0:	e17fff15 	stw	r5,-4(fp)
    e6b4:	e0bfff17 	ldw	r2,-4(fp)
    e6b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6bc:	0005303a 	rdctl	r2,status
    e6c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6c4:	e0fffb17 	ldw	r3,-20(fp)
    e6c8:	00bfff84 	movi	r2,-2
    e6cc:	1884703a 	and	r2,r3,r2
    e6d0:	1001703a 	wrctl	status,r2
  
  return context;
    e6d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e6d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    e6dc:	00c00044 	movi	r3,1
    e6e0:	e0bffa17 	ldw	r2,-24(fp)
    e6e4:	1884983a 	sll	r2,r3,r2
    e6e8:	1007883a 	mov	r3,r2
    e6ec:	d0a6d517 	ldw	r2,-25772(gp)
    e6f0:	1884b03a 	or	r2,r3,r2
    e6f4:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e6f8:	d0a6d517 	ldw	r2,-25772(gp)
    e6fc:	100170fa 	wrctl	ienable,r2
    e700:	e0bffc17 	ldw	r2,-16(fp)
    e704:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e708:	e0bffd17 	ldw	r2,-12(fp)
    e70c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e710:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    e714:	0001883a 	nop
}
    e718:	e037883a 	mov	sp,fp
    e71c:	df000017 	ldw	fp,0(sp)
    e720:	dec00104 	addi	sp,sp,4
    e724:	f800283a 	ret

0000e728 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    e728:	defff904 	addi	sp,sp,-28
    e72c:	df000615 	stw	fp,24(sp)
    e730:	df000604 	addi	fp,sp,24
    e734:	e13ffe15 	stw	r4,-8(fp)
    e738:	e17fff15 	stw	r5,-4(fp)
    e73c:	e0bfff17 	ldw	r2,-4(fp)
    e740:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e744:	0005303a 	rdctl	r2,status
    e748:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e74c:	e0fffb17 	ldw	r3,-20(fp)
    e750:	00bfff84 	movi	r2,-2
    e754:	1884703a 	and	r2,r3,r2
    e758:	1001703a 	wrctl	status,r2
  
  return context;
    e75c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e760:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    e764:	00c00044 	movi	r3,1
    e768:	e0bffa17 	ldw	r2,-24(fp)
    e76c:	1884983a 	sll	r2,r3,r2
    e770:	0084303a 	nor	r2,zero,r2
    e774:	1007883a 	mov	r3,r2
    e778:	d0a6d517 	ldw	r2,-25772(gp)
    e77c:	1884703a 	and	r2,r3,r2
    e780:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e784:	d0a6d517 	ldw	r2,-25772(gp)
    e788:	100170fa 	wrctl	ienable,r2
    e78c:	e0bffc17 	ldw	r2,-16(fp)
    e790:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e794:	e0bffd17 	ldw	r2,-12(fp)
    e798:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e79c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    e7a0:	0001883a 	nop
}
    e7a4:	e037883a 	mov	sp,fp
    e7a8:	df000017 	ldw	fp,0(sp)
    e7ac:	dec00104 	addi	sp,sp,4
    e7b0:	f800283a 	ret

0000e7b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e7b4:	defffc04 	addi	sp,sp,-16
    e7b8:	df000315 	stw	fp,12(sp)
    e7bc:	df000304 	addi	fp,sp,12
    e7c0:	e13ffe15 	stw	r4,-8(fp)
    e7c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e7c8:	000530fa 	rdctl	r2,ienable
    e7cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e7d0:	00c00044 	movi	r3,1
    e7d4:	e0bfff17 	ldw	r2,-4(fp)
    e7d8:	1884983a 	sll	r2,r3,r2
    e7dc:	1007883a 	mov	r3,r2
    e7e0:	e0bffd17 	ldw	r2,-12(fp)
    e7e4:	1884703a 	and	r2,r3,r2
    e7e8:	1004c03a 	cmpne	r2,r2,zero
    e7ec:	10803fcc 	andi	r2,r2,255
}
    e7f0:	e037883a 	mov	sp,fp
    e7f4:	df000017 	ldw	fp,0(sp)
    e7f8:	dec00104 	addi	sp,sp,4
    e7fc:	f800283a 	ret

0000e800 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e800:	defff504 	addi	sp,sp,-44
    e804:	dfc00a15 	stw	ra,40(sp)
    e808:	df000915 	stw	fp,36(sp)
    e80c:	df000904 	addi	fp,sp,36
    e810:	e13ffc15 	stw	r4,-16(fp)
    e814:	e17ffd15 	stw	r5,-12(fp)
    e818:	e1bffe15 	stw	r6,-8(fp)
    e81c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    e820:	00bffa84 	movi	r2,-22
    e824:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e828:	e0bffd17 	ldw	r2,-12(fp)
    e82c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e830:	e0bff817 	ldw	r2,-32(fp)
    e834:	10800808 	cmpgei	r2,r2,32
    e838:	1000271e 	bne	r2,zero,e8d8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e83c:	0005303a 	rdctl	r2,status
    e840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e844:	e0fffb17 	ldw	r3,-20(fp)
    e848:	00bfff84 	movi	r2,-2
    e84c:	1884703a 	and	r2,r3,r2
    e850:	1001703a 	wrctl	status,r2
  
  return context;
    e854:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e858:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    e85c:	00800074 	movhi	r2,1
    e860:	108c0104 	addi	r2,r2,12292
    e864:	e0fff817 	ldw	r3,-32(fp)
    e868:	180690fa 	slli	r3,r3,3
    e86c:	10c5883a 	add	r2,r2,r3
    e870:	e0fffe17 	ldw	r3,-8(fp)
    e874:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    e878:	00800074 	movhi	r2,1
    e87c:	108c0104 	addi	r2,r2,12292
    e880:	e0fff817 	ldw	r3,-32(fp)
    e884:	180690fa 	slli	r3,r3,3
    e888:	10c5883a 	add	r2,r2,r3
    e88c:	10800104 	addi	r2,r2,4
    e890:	e0ffff17 	ldw	r3,-4(fp)
    e894:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e898:	e0bffe17 	ldw	r2,-8(fp)
    e89c:	10000526 	beq	r2,zero,e8b4 <alt_iic_isr_register+0xb4>
    e8a0:	e0bff817 	ldw	r2,-32(fp)
    e8a4:	100b883a 	mov	r5,r2
    e8a8:	e13ffc17 	ldw	r4,-16(fp)
    e8ac:	000e6a00 	call	e6a0 <alt_ic_irq_enable>
    e8b0:	00000406 	br	e8c4 <alt_iic_isr_register+0xc4>
    e8b4:	e0bff817 	ldw	r2,-32(fp)
    e8b8:	100b883a 	mov	r5,r2
    e8bc:	e13ffc17 	ldw	r4,-16(fp)
    e8c0:	000e7280 	call	e728 <alt_ic_irq_disable>
    e8c4:	e0bff715 	stw	r2,-36(fp)
    e8c8:	e0bffa17 	ldw	r2,-24(fp)
    e8cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8d0:	e0bff917 	ldw	r2,-28(fp)
    e8d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e8d8:	e0bff717 	ldw	r2,-36(fp)
}
    e8dc:	e037883a 	mov	sp,fp
    e8e0:	dfc00117 	ldw	ra,4(sp)
    e8e4:	df000017 	ldw	fp,0(sp)
    e8e8:	dec00204 	addi	sp,sp,8
    e8ec:	f800283a 	ret

0000e8f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e8f0:	defff904 	addi	sp,sp,-28
    e8f4:	dfc00615 	stw	ra,24(sp)
    e8f8:	df000515 	stw	fp,20(sp)
    e8fc:	df000504 	addi	fp,sp,20
    e900:	e13ffc15 	stw	r4,-16(fp)
    e904:	e17ffd15 	stw	r5,-12(fp)
    e908:	e1bffe15 	stw	r6,-8(fp)
    e90c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e910:	e1bfff17 	ldw	r6,-4(fp)
    e914:	e17ffe17 	ldw	r5,-8(fp)
    e918:	e13ffd17 	ldw	r4,-12(fp)
    e91c:	000eb300 	call	eb30 <open>
    e920:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e924:	e0bffb17 	ldw	r2,-20(fp)
    e928:	10001c16 	blt	r2,zero,e99c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    e92c:	00800074 	movhi	r2,1
    e930:	1080a604 	addi	r2,r2,664
    e934:	e0fffb17 	ldw	r3,-20(fp)
    e938:	18c00324 	muli	r3,r3,12
    e93c:	10c5883a 	add	r2,r2,r3
    e940:	10c00017 	ldw	r3,0(r2)
    e944:	e0bffc17 	ldw	r2,-16(fp)
    e948:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e94c:	00800074 	movhi	r2,1
    e950:	1080a604 	addi	r2,r2,664
    e954:	e0fffb17 	ldw	r3,-20(fp)
    e958:	18c00324 	muli	r3,r3,12
    e95c:	10c5883a 	add	r2,r2,r3
    e960:	10800104 	addi	r2,r2,4
    e964:	10c00017 	ldw	r3,0(r2)
    e968:	e0bffc17 	ldw	r2,-16(fp)
    e96c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e970:	00800074 	movhi	r2,1
    e974:	1080a604 	addi	r2,r2,664
    e978:	e0fffb17 	ldw	r3,-20(fp)
    e97c:	18c00324 	muli	r3,r3,12
    e980:	10c5883a 	add	r2,r2,r3
    e984:	10800204 	addi	r2,r2,8
    e988:	10c00017 	ldw	r3,0(r2)
    e98c:	e0bffc17 	ldw	r2,-16(fp)
    e990:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e994:	e13ffb17 	ldw	r4,-20(fp)
    e998:	000d5a40 	call	d5a4 <alt_release_fd>
  }
} 
    e99c:	0001883a 	nop
    e9a0:	e037883a 	mov	sp,fp
    e9a4:	dfc00117 	ldw	ra,4(sp)
    e9a8:	df000017 	ldw	fp,0(sp)
    e9ac:	dec00204 	addi	sp,sp,8
    e9b0:	f800283a 	ret

0000e9b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e9b4:	defffb04 	addi	sp,sp,-20
    e9b8:	dfc00415 	stw	ra,16(sp)
    e9bc:	df000315 	stw	fp,12(sp)
    e9c0:	df000304 	addi	fp,sp,12
    e9c4:	e13ffd15 	stw	r4,-12(fp)
    e9c8:	e17ffe15 	stw	r5,-8(fp)
    e9cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e9d0:	01c07fc4 	movi	r7,511
    e9d4:	01800044 	movi	r6,1
    e9d8:	e17ffd17 	ldw	r5,-12(fp)
    e9dc:	01000074 	movhi	r4,1
    e9e0:	2100a904 	addi	r4,r4,676
    e9e4:	000e8f00 	call	e8f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e9e8:	01c07fc4 	movi	r7,511
    e9ec:	000d883a 	mov	r6,zero
    e9f0:	e17ffe17 	ldw	r5,-8(fp)
    e9f4:	01000074 	movhi	r4,1
    e9f8:	2100a604 	addi	r4,r4,664
    e9fc:	000e8f00 	call	e8f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ea00:	01c07fc4 	movi	r7,511
    ea04:	01800044 	movi	r6,1
    ea08:	e17fff17 	ldw	r5,-4(fp)
    ea0c:	01000074 	movhi	r4,1
    ea10:	2100ac04 	addi	r4,r4,688
    ea14:	000e8f00 	call	e8f0 <alt_open_fd>
}  
    ea18:	0001883a 	nop
    ea1c:	e037883a 	mov	sp,fp
    ea20:	dfc00117 	ldw	ra,4(sp)
    ea24:	df000017 	ldw	fp,0(sp)
    ea28:	dec00204 	addi	sp,sp,8
    ea2c:	f800283a 	ret

0000ea30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea30:	defffe04 	addi	sp,sp,-8
    ea34:	dfc00115 	stw	ra,4(sp)
    ea38:	df000015 	stw	fp,0(sp)
    ea3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea40:	d0a00b17 	ldw	r2,-32724(gp)
    ea44:	10000326 	beq	r2,zero,ea54 <alt_get_errno+0x24>
    ea48:	d0a00b17 	ldw	r2,-32724(gp)
    ea4c:	103ee83a 	callr	r2
    ea50:	00000106 	br	ea58 <alt_get_errno+0x28>
    ea54:	d0a6d104 	addi	r2,gp,-25788
}
    ea58:	e037883a 	mov	sp,fp
    ea5c:	dfc00117 	ldw	ra,4(sp)
    ea60:	df000017 	ldw	fp,0(sp)
    ea64:	dec00204 	addi	sp,sp,8
    ea68:	f800283a 	ret

0000ea6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ea6c:	defffd04 	addi	sp,sp,-12
    ea70:	df000215 	stw	fp,8(sp)
    ea74:	df000204 	addi	fp,sp,8
    ea78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ea7c:	e0bfff17 	ldw	r2,-4(fp)
    ea80:	10800217 	ldw	r2,8(r2)
    ea84:	10d00034 	orhi	r3,r2,16384
    ea88:	e0bfff17 	ldw	r2,-4(fp)
    ea8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ea90:	e03ffe15 	stw	zero,-8(fp)
    ea94:	00001d06 	br	eb0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ea98:	00800074 	movhi	r2,1
    ea9c:	1080a604 	addi	r2,r2,664
    eaa0:	e0fffe17 	ldw	r3,-8(fp)
    eaa4:	18c00324 	muli	r3,r3,12
    eaa8:	10c5883a 	add	r2,r2,r3
    eaac:	10c00017 	ldw	r3,0(r2)
    eab0:	e0bfff17 	ldw	r2,-4(fp)
    eab4:	10800017 	ldw	r2,0(r2)
    eab8:	1880111e 	bne	r3,r2,eb00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    eabc:	00800074 	movhi	r2,1
    eac0:	1080a604 	addi	r2,r2,664
    eac4:	e0fffe17 	ldw	r3,-8(fp)
    eac8:	18c00324 	muli	r3,r3,12
    eacc:	10c5883a 	add	r2,r2,r3
    ead0:	10800204 	addi	r2,r2,8
    ead4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ead8:	1000090e 	bge	r2,zero,eb00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    eadc:	e0bffe17 	ldw	r2,-8(fp)
    eae0:	10c00324 	muli	r3,r2,12
    eae4:	00800074 	movhi	r2,1
    eae8:	1080a604 	addi	r2,r2,664
    eaec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    eaf0:	e0bfff17 	ldw	r2,-4(fp)
    eaf4:	18800226 	beq	r3,r2,eb00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    eaf8:	00bffcc4 	movi	r2,-13
    eafc:	00000806 	br	eb20 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    eb00:	e0bffe17 	ldw	r2,-8(fp)
    eb04:	10800044 	addi	r2,r2,1
    eb08:	e0bffe15 	stw	r2,-8(fp)
    eb0c:	d0a00a17 	ldw	r2,-32728(gp)
    eb10:	1007883a 	mov	r3,r2
    eb14:	e0bffe17 	ldw	r2,-8(fp)
    eb18:	18bfdf2e 	bgeu	r3,r2,ea98 <__alt_data_end+0xfffeea98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    eb1c:	0005883a 	mov	r2,zero
}
    eb20:	e037883a 	mov	sp,fp
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00104 	addi	sp,sp,4
    eb2c:	f800283a 	ret

0000eb30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    eb30:	defff604 	addi	sp,sp,-40
    eb34:	dfc00915 	stw	ra,36(sp)
    eb38:	df000815 	stw	fp,32(sp)
    eb3c:	df000804 	addi	fp,sp,32
    eb40:	e13ffd15 	stw	r4,-12(fp)
    eb44:	e17ffe15 	stw	r5,-8(fp)
    eb48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    eb4c:	00bfffc4 	movi	r2,-1
    eb50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    eb54:	00bffb44 	movi	r2,-19
    eb58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    eb5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    eb60:	d1600804 	addi	r5,gp,-32736
    eb64:	e13ffd17 	ldw	r4,-12(fp)
    eb68:	000ee4c0 	call	ee4c <alt_find_dev>
    eb6c:	e0bff815 	stw	r2,-32(fp)
    eb70:	e0bff817 	ldw	r2,-32(fp)
    eb74:	1000051e 	bne	r2,zero,eb8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    eb78:	e13ffd17 	ldw	r4,-12(fp)
    eb7c:	000eedc0 	call	eedc <alt_find_file>
    eb80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    eb84:	00800044 	movi	r2,1
    eb88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    eb8c:	e0bff817 	ldw	r2,-32(fp)
    eb90:	10002926 	beq	r2,zero,ec38 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    eb94:	e13ff817 	ldw	r4,-32(fp)
    eb98:	000efe40 	call	efe4 <alt_get_fd>
    eb9c:	e0bff915 	stw	r2,-28(fp)
    eba0:	e0bff917 	ldw	r2,-28(fp)
    eba4:	1000030e 	bge	r2,zero,ebb4 <open+0x84>
    {
      status = index;
    eba8:	e0bff917 	ldw	r2,-28(fp)
    ebac:	e0bffa15 	stw	r2,-24(fp)
    ebb0:	00002306 	br	ec40 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    ebb4:	e0bff917 	ldw	r2,-28(fp)
    ebb8:	10c00324 	muli	r3,r2,12
    ebbc:	00800074 	movhi	r2,1
    ebc0:	1080a604 	addi	r2,r2,664
    ebc4:	1885883a 	add	r2,r3,r2
    ebc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ebcc:	e0fffe17 	ldw	r3,-8(fp)
    ebd0:	00900034 	movhi	r2,16384
    ebd4:	10bfffc4 	addi	r2,r2,-1
    ebd8:	1886703a 	and	r3,r3,r2
    ebdc:	e0bffc17 	ldw	r2,-16(fp)
    ebe0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ebe4:	e0bffb17 	ldw	r2,-20(fp)
    ebe8:	1000051e 	bne	r2,zero,ec00 <open+0xd0>
    ebec:	e13ffc17 	ldw	r4,-16(fp)
    ebf0:	000ea6c0 	call	ea6c <alt_file_locked>
    ebf4:	e0bffa15 	stw	r2,-24(fp)
    ebf8:	e0bffa17 	ldw	r2,-24(fp)
    ebfc:	10001016 	blt	r2,zero,ec40 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ec00:	e0bff817 	ldw	r2,-32(fp)
    ec04:	10800317 	ldw	r2,12(r2)
    ec08:	10000826 	beq	r2,zero,ec2c <open+0xfc>
    ec0c:	e0bff817 	ldw	r2,-32(fp)
    ec10:	10800317 	ldw	r2,12(r2)
    ec14:	e1ffff17 	ldw	r7,-4(fp)
    ec18:	e1bffe17 	ldw	r6,-8(fp)
    ec1c:	e17ffd17 	ldw	r5,-12(fp)
    ec20:	e13ffc17 	ldw	r4,-16(fp)
    ec24:	103ee83a 	callr	r2
    ec28:	00000106 	br	ec30 <open+0x100>
    ec2c:	0005883a 	mov	r2,zero
    ec30:	e0bffa15 	stw	r2,-24(fp)
    ec34:	00000206 	br	ec40 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ec38:	00bffb44 	movi	r2,-19
    ec3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ec40:	e0bffa17 	ldw	r2,-24(fp)
    ec44:	1000090e 	bge	r2,zero,ec6c <open+0x13c>
  {
    alt_release_fd (index);  
    ec48:	e13ff917 	ldw	r4,-28(fp)
    ec4c:	000d5a40 	call	d5a4 <alt_release_fd>
    ALT_ERRNO = -status;
    ec50:	000ea300 	call	ea30 <alt_get_errno>
    ec54:	1007883a 	mov	r3,r2
    ec58:	e0bffa17 	ldw	r2,-24(fp)
    ec5c:	0085c83a 	sub	r2,zero,r2
    ec60:	18800015 	stw	r2,0(r3)
    return -1;
    ec64:	00bfffc4 	movi	r2,-1
    ec68:	00000106 	br	ec70 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    ec6c:	e0bff917 	ldw	r2,-28(fp)
}
    ec70:	e037883a 	mov	sp,fp
    ec74:	dfc00117 	ldw	ra,4(sp)
    ec78:	df000017 	ldw	fp,0(sp)
    ec7c:	dec00204 	addi	sp,sp,8
    ec80:	f800283a 	ret

0000ec84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ec84:	defffa04 	addi	sp,sp,-24
    ec88:	df000515 	stw	fp,20(sp)
    ec8c:	df000504 	addi	fp,sp,20
    ec90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec94:	0005303a 	rdctl	r2,status
    ec98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec9c:	e0fffc17 	ldw	r3,-16(fp)
    eca0:	00bfff84 	movi	r2,-2
    eca4:	1884703a 	and	r2,r3,r2
    eca8:	1001703a 	wrctl	status,r2
  
  return context;
    ecac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ecb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    ecb4:	e0bfff17 	ldw	r2,-4(fp)
    ecb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ecbc:	e0bffd17 	ldw	r2,-12(fp)
    ecc0:	10800017 	ldw	r2,0(r2)
    ecc4:	e0fffd17 	ldw	r3,-12(fp)
    ecc8:	18c00117 	ldw	r3,4(r3)
    eccc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ecd0:	e0bffd17 	ldw	r2,-12(fp)
    ecd4:	10800117 	ldw	r2,4(r2)
    ecd8:	e0fffd17 	ldw	r3,-12(fp)
    ecdc:	18c00017 	ldw	r3,0(r3)
    ece0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ece4:	e0bffd17 	ldw	r2,-12(fp)
    ece8:	e0fffd17 	ldw	r3,-12(fp)
    ecec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ecf0:	e0bffd17 	ldw	r2,-12(fp)
    ecf4:	e0fffd17 	ldw	r3,-12(fp)
    ecf8:	10c00015 	stw	r3,0(r2)
    ecfc:	e0bffb17 	ldw	r2,-20(fp)
    ed00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed04:	e0bffe17 	ldw	r2,-8(fp)
    ed08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    ed0c:	0001883a 	nop
    ed10:	e037883a 	mov	sp,fp
    ed14:	df000017 	ldw	fp,0(sp)
    ed18:	dec00104 	addi	sp,sp,4
    ed1c:	f800283a 	ret

0000ed20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ed20:	defffb04 	addi	sp,sp,-20
    ed24:	dfc00415 	stw	ra,16(sp)
    ed28:	df000315 	stw	fp,12(sp)
    ed2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ed30:	d0a00e17 	ldw	r2,-32712(gp)
    ed34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ed38:	d0a6d717 	ldw	r2,-25764(gp)
    ed3c:	10800044 	addi	r2,r2,1
    ed40:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ed44:	00002e06 	br	ee00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    ed48:	e0bffd17 	ldw	r2,-12(fp)
    ed4c:	10800017 	ldw	r2,0(r2)
    ed50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ed54:	e0bffd17 	ldw	r2,-12(fp)
    ed58:	10800403 	ldbu	r2,16(r2)
    ed5c:	10803fcc 	andi	r2,r2,255
    ed60:	10000426 	beq	r2,zero,ed74 <alt_tick+0x54>
    ed64:	d0a6d717 	ldw	r2,-25764(gp)
    ed68:	1000021e 	bne	r2,zero,ed74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ed6c:	e0bffd17 	ldw	r2,-12(fp)
    ed70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ed74:	e0bffd17 	ldw	r2,-12(fp)
    ed78:	10800217 	ldw	r2,8(r2)
    ed7c:	d0e6d717 	ldw	r3,-25764(gp)
    ed80:	18801d36 	bltu	r3,r2,edf8 <alt_tick+0xd8>
    ed84:	e0bffd17 	ldw	r2,-12(fp)
    ed88:	10800403 	ldbu	r2,16(r2)
    ed8c:	10803fcc 	andi	r2,r2,255
    ed90:	1000191e 	bne	r2,zero,edf8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ed94:	e0bffd17 	ldw	r2,-12(fp)
    ed98:	10800317 	ldw	r2,12(r2)
    ed9c:	e0fffd17 	ldw	r3,-12(fp)
    eda0:	18c00517 	ldw	r3,20(r3)
    eda4:	1809883a 	mov	r4,r3
    eda8:	103ee83a 	callr	r2
    edac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    edb0:	e0bfff17 	ldw	r2,-4(fp)
    edb4:	1000031e 	bne	r2,zero,edc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    edb8:	e13ffd17 	ldw	r4,-12(fp)
    edbc:	000ec840 	call	ec84 <alt_alarm_stop>
    edc0:	00000d06 	br	edf8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    edc4:	e0bffd17 	ldw	r2,-12(fp)
    edc8:	10c00217 	ldw	r3,8(r2)
    edcc:	e0bfff17 	ldw	r2,-4(fp)
    edd0:	1887883a 	add	r3,r3,r2
    edd4:	e0bffd17 	ldw	r2,-12(fp)
    edd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    eddc:	e0bffd17 	ldw	r2,-12(fp)
    ede0:	10c00217 	ldw	r3,8(r2)
    ede4:	d0a6d717 	ldw	r2,-25764(gp)
    ede8:	1880032e 	bgeu	r3,r2,edf8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    edec:	e0bffd17 	ldw	r2,-12(fp)
    edf0:	00c00044 	movi	r3,1
    edf4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    edf8:	e0bffe17 	ldw	r2,-8(fp)
    edfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ee00:	e0fffd17 	ldw	r3,-12(fp)
    ee04:	d0a00e04 	addi	r2,gp,-32712
    ee08:	18bfcf1e 	bne	r3,r2,ed48 <__alt_data_end+0xfffeed48>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    ee0c:	0001883a 	nop
}
    ee10:	0001883a 	nop
    ee14:	e037883a 	mov	sp,fp
    ee18:	dfc00117 	ldw	ra,4(sp)
    ee1c:	df000017 	ldw	fp,0(sp)
    ee20:	dec00204 	addi	sp,sp,8
    ee24:	f800283a 	ret

0000ee28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    ee28:	deffff04 	addi	sp,sp,-4
    ee2c:	df000015 	stw	fp,0(sp)
    ee30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ee34:	000170fa 	wrctl	ienable,zero
}
    ee38:	0001883a 	nop
    ee3c:	e037883a 	mov	sp,fp
    ee40:	df000017 	ldw	fp,0(sp)
    ee44:	dec00104 	addi	sp,sp,4
    ee48:	f800283a 	ret

0000ee4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ee4c:	defffa04 	addi	sp,sp,-24
    ee50:	dfc00515 	stw	ra,20(sp)
    ee54:	df000415 	stw	fp,16(sp)
    ee58:	df000404 	addi	fp,sp,16
    ee5c:	e13ffe15 	stw	r4,-8(fp)
    ee60:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ee64:	e0bfff17 	ldw	r2,-4(fp)
    ee68:	10800017 	ldw	r2,0(r2)
    ee6c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ee70:	e13ffe17 	ldw	r4,-8(fp)
    ee74:	000087c0 	call	87c <strlen>
    ee78:	10800044 	addi	r2,r2,1
    ee7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ee80:	00000d06 	br	eeb8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ee84:	e0bffc17 	ldw	r2,-16(fp)
    ee88:	10800217 	ldw	r2,8(r2)
    ee8c:	e0fffd17 	ldw	r3,-12(fp)
    ee90:	180d883a 	mov	r6,r3
    ee94:	e17ffe17 	ldw	r5,-8(fp)
    ee98:	1009883a 	mov	r4,r2
    ee9c:	000f2000 	call	f200 <memcmp>
    eea0:	1000021e 	bne	r2,zero,eeac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    eea4:	e0bffc17 	ldw	r2,-16(fp)
    eea8:	00000706 	br	eec8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    eeac:	e0bffc17 	ldw	r2,-16(fp)
    eeb0:	10800017 	ldw	r2,0(r2)
    eeb4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    eeb8:	e0fffc17 	ldw	r3,-16(fp)
    eebc:	e0bfff17 	ldw	r2,-4(fp)
    eec0:	18bff01e 	bne	r3,r2,ee84 <__alt_data_end+0xfffeee84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    eec4:	0005883a 	mov	r2,zero
}
    eec8:	e037883a 	mov	sp,fp
    eecc:	dfc00117 	ldw	ra,4(sp)
    eed0:	df000017 	ldw	fp,0(sp)
    eed4:	dec00204 	addi	sp,sp,8
    eed8:	f800283a 	ret

0000eedc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    eedc:	defffb04 	addi	sp,sp,-20
    eee0:	dfc00415 	stw	ra,16(sp)
    eee4:	df000315 	stw	fp,12(sp)
    eee8:	df000304 	addi	fp,sp,12
    eeec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    eef0:	d0a00617 	ldw	r2,-32744(gp)
    eef4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    eef8:	00003106 	br	efc0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    eefc:	e0bffd17 	ldw	r2,-12(fp)
    ef00:	10800217 	ldw	r2,8(r2)
    ef04:	1009883a 	mov	r4,r2
    ef08:	000087c0 	call	87c <strlen>
    ef0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ef10:	e0bffd17 	ldw	r2,-12(fp)
    ef14:	10c00217 	ldw	r3,8(r2)
    ef18:	e0bffe17 	ldw	r2,-8(fp)
    ef1c:	10bfffc4 	addi	r2,r2,-1
    ef20:	1885883a 	add	r2,r3,r2
    ef24:	10800003 	ldbu	r2,0(r2)
    ef28:	10803fcc 	andi	r2,r2,255
    ef2c:	1080201c 	xori	r2,r2,128
    ef30:	10bfe004 	addi	r2,r2,-128
    ef34:	10800bd8 	cmpnei	r2,r2,47
    ef38:	1000031e 	bne	r2,zero,ef48 <alt_find_file+0x6c>
    {
      len -= 1;
    ef3c:	e0bffe17 	ldw	r2,-8(fp)
    ef40:	10bfffc4 	addi	r2,r2,-1
    ef44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ef48:	e0bffe17 	ldw	r2,-8(fp)
    ef4c:	e0ffff17 	ldw	r3,-4(fp)
    ef50:	1885883a 	add	r2,r3,r2
    ef54:	10800003 	ldbu	r2,0(r2)
    ef58:	10803fcc 	andi	r2,r2,255
    ef5c:	1080201c 	xori	r2,r2,128
    ef60:	10bfe004 	addi	r2,r2,-128
    ef64:	10800be0 	cmpeqi	r2,r2,47
    ef68:	1000081e 	bne	r2,zero,ef8c <alt_find_file+0xb0>
    ef6c:	e0bffe17 	ldw	r2,-8(fp)
    ef70:	e0ffff17 	ldw	r3,-4(fp)
    ef74:	1885883a 	add	r2,r3,r2
    ef78:	10800003 	ldbu	r2,0(r2)
    ef7c:	10803fcc 	andi	r2,r2,255
    ef80:	1080201c 	xori	r2,r2,128
    ef84:	10bfe004 	addi	r2,r2,-128
    ef88:	10000a1e 	bne	r2,zero,efb4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    ef8c:	e0bffd17 	ldw	r2,-12(fp)
    ef90:	10800217 	ldw	r2,8(r2)
    ef94:	e0fffe17 	ldw	r3,-8(fp)
    ef98:	180d883a 	mov	r6,r3
    ef9c:	e17fff17 	ldw	r5,-4(fp)
    efa0:	1009883a 	mov	r4,r2
    efa4:	000f2000 	call	f200 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    efa8:	1000021e 	bne	r2,zero,efb4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    efac:	e0bffd17 	ldw	r2,-12(fp)
    efb0:	00000706 	br	efd0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    efb4:	e0bffd17 	ldw	r2,-12(fp)
    efb8:	10800017 	ldw	r2,0(r2)
    efbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    efc0:	e0fffd17 	ldw	r3,-12(fp)
    efc4:	d0a00604 	addi	r2,gp,-32744
    efc8:	18bfcc1e 	bne	r3,r2,eefc <__alt_data_end+0xfffeeefc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    efcc:	0005883a 	mov	r2,zero
}
    efd0:	e037883a 	mov	sp,fp
    efd4:	dfc00117 	ldw	ra,4(sp)
    efd8:	df000017 	ldw	fp,0(sp)
    efdc:	dec00204 	addi	sp,sp,8
    efe0:	f800283a 	ret

0000efe4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    efe4:	defffc04 	addi	sp,sp,-16
    efe8:	df000315 	stw	fp,12(sp)
    efec:	df000304 	addi	fp,sp,12
    eff0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    eff4:	00bffa04 	movi	r2,-24
    eff8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    effc:	e03ffd15 	stw	zero,-12(fp)
    f000:	00001906 	br	f068 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    f004:	00800074 	movhi	r2,1
    f008:	1080a604 	addi	r2,r2,664
    f00c:	e0fffd17 	ldw	r3,-12(fp)
    f010:	18c00324 	muli	r3,r3,12
    f014:	10c5883a 	add	r2,r2,r3
    f018:	10800017 	ldw	r2,0(r2)
    f01c:	10000f1e 	bne	r2,zero,f05c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    f020:	00800074 	movhi	r2,1
    f024:	1080a604 	addi	r2,r2,664
    f028:	e0fffd17 	ldw	r3,-12(fp)
    f02c:	18c00324 	muli	r3,r3,12
    f030:	10c5883a 	add	r2,r2,r3
    f034:	e0ffff17 	ldw	r3,-4(fp)
    f038:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f03c:	d0e00a17 	ldw	r3,-32728(gp)
    f040:	e0bffd17 	ldw	r2,-12(fp)
    f044:	1880020e 	bge	r3,r2,f050 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    f048:	e0bffd17 	ldw	r2,-12(fp)
    f04c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f050:	e0bffd17 	ldw	r2,-12(fp)
    f054:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f058:	00000606 	br	f074 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f05c:	e0bffd17 	ldw	r2,-12(fp)
    f060:	10800044 	addi	r2,r2,1
    f064:	e0bffd15 	stw	r2,-12(fp)
    f068:	e0bffd17 	ldw	r2,-12(fp)
    f06c:	10800810 	cmplti	r2,r2,32
    f070:	103fe41e 	bne	r2,zero,f004 <__alt_data_end+0xfffef004>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f074:	e0bffe17 	ldw	r2,-8(fp)
}
    f078:	e037883a 	mov	sp,fp
    f07c:	df000017 	ldw	fp,0(sp)
    f080:	dec00104 	addi	sp,sp,4
    f084:	f800283a 	ret

0000f088 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f088:	defffb04 	addi	sp,sp,-20
    f08c:	df000415 	stw	fp,16(sp)
    f090:	df000404 	addi	fp,sp,16
    f094:	e13ffe15 	stw	r4,-8(fp)
    f098:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f09c:	e0bfff17 	ldw	r2,-4(fp)
    f0a0:	10840070 	cmpltui	r2,r2,4097
    f0a4:	1000021e 	bne	r2,zero,f0b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f0a8:	00840004 	movi	r2,4096
    f0ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f0b0:	e0fffe17 	ldw	r3,-8(fp)
    f0b4:	e0bfff17 	ldw	r2,-4(fp)
    f0b8:	1885883a 	add	r2,r3,r2
    f0bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f0c0:	e0bffe17 	ldw	r2,-8(fp)
    f0c4:	e0bffc15 	stw	r2,-16(fp)
    f0c8:	00000506 	br	f0e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f0cc:	e0bffc17 	ldw	r2,-16(fp)
    f0d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f0d4:	e0bffc17 	ldw	r2,-16(fp)
    f0d8:	10800804 	addi	r2,r2,32
    f0dc:	e0bffc15 	stw	r2,-16(fp)
    f0e0:	e0fffc17 	ldw	r3,-16(fp)
    f0e4:	e0bffd17 	ldw	r2,-12(fp)
    f0e8:	18bff836 	bltu	r3,r2,f0cc <__alt_data_end+0xfffef0cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f0ec:	e0bffe17 	ldw	r2,-8(fp)
    f0f0:	108007cc 	andi	r2,r2,31
    f0f4:	10000226 	beq	r2,zero,f100 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f0f8:	e0bffc17 	ldw	r2,-16(fp)
    f0fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f100:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f104:	0001883a 	nop
    f108:	e037883a 	mov	sp,fp
    f10c:	df000017 	ldw	fp,0(sp)
    f110:	dec00104 	addi	sp,sp,4
    f114:	f800283a 	ret

0000f118 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f118:	defffe04 	addi	sp,sp,-8
    f11c:	df000115 	stw	fp,4(sp)
    f120:	df000104 	addi	fp,sp,4
    f124:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f128:	e0bfff17 	ldw	r2,-4(fp)
    f12c:	10bffe84 	addi	r2,r2,-6
    f130:	10c00428 	cmpgeui	r3,r2,16
    f134:	18001a1e 	bne	r3,zero,f1a0 <alt_exception_cause_generated_bad_addr+0x88>
    f138:	100690ba 	slli	r3,r2,2
    f13c:	00800074 	movhi	r2,1
    f140:	10bc5404 	addi	r2,r2,-3760
    f144:	1885883a 	add	r2,r3,r2
    f148:	10800017 	ldw	r2,0(r2)
    f14c:	1000683a 	jmp	r2
    f150:	0000f190 	cmplti	zero,zero,966
    f154:	0000f190 	cmplti	zero,zero,966
    f158:	0000f1a0 	cmpeqi	zero,zero,966
    f15c:	0000f1a0 	cmpeqi	zero,zero,966
    f160:	0000f1a0 	cmpeqi	zero,zero,966
    f164:	0000f190 	cmplti	zero,zero,966
    f168:	0000f198 	cmpnei	zero,zero,966
    f16c:	0000f1a0 	cmpeqi	zero,zero,966
    f170:	0000f190 	cmplti	zero,zero,966
    f174:	0000f190 	cmplti	zero,zero,966
    f178:	0000f1a0 	cmpeqi	zero,zero,966
    f17c:	0000f190 	cmplti	zero,zero,966
    f180:	0000f198 	cmpnei	zero,zero,966
    f184:	0000f1a0 	cmpeqi	zero,zero,966
    f188:	0000f1a0 	cmpeqi	zero,zero,966
    f18c:	0000f190 	cmplti	zero,zero,966
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f190:	00800044 	movi	r2,1
    f194:	00000306 	br	f1a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f198:	0005883a 	mov	r2,zero
    f19c:	00000106 	br	f1a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f1a0:	0005883a 	mov	r2,zero
  }
}
    f1a4:	e037883a 	mov	sp,fp
    f1a8:	df000017 	ldw	fp,0(sp)
    f1ac:	dec00104 	addi	sp,sp,4
    f1b0:	f800283a 	ret

0000f1b4 <atexit>:
    f1b4:	200b883a 	mov	r5,r4
    f1b8:	000f883a 	mov	r7,zero
    f1bc:	000d883a 	mov	r6,zero
    f1c0:	0009883a 	mov	r4,zero
    f1c4:	000f27c1 	jmpi	f27c <__register_exitproc>

0000f1c8 <exit>:
    f1c8:	defffe04 	addi	sp,sp,-8
    f1cc:	000b883a 	mov	r5,zero
    f1d0:	dc000015 	stw	r16,0(sp)
    f1d4:	dfc00115 	stw	ra,4(sp)
    f1d8:	2021883a 	mov	r16,r4
    f1dc:	000f3940 	call	f394 <__call_exitprocs>
    f1e0:	00800074 	movhi	r2,1
    f1e4:	10851e04 	addi	r2,r2,5240
    f1e8:	11000017 	ldw	r4,0(r2)
    f1ec:	20800f17 	ldw	r2,60(r4)
    f1f0:	10000126 	beq	r2,zero,f1f8 <exit+0x30>
    f1f4:	103ee83a 	callr	r2
    f1f8:	8009883a 	mov	r4,r16
    f1fc:	000f5140 	call	f514 <_exit>

0000f200 <memcmp>:
    f200:	01c000c4 	movi	r7,3
    f204:	3980192e 	bgeu	r7,r6,f26c <memcmp+0x6c>
    f208:	2144b03a 	or	r2,r4,r5
    f20c:	11c4703a 	and	r2,r2,r7
    f210:	10000f26 	beq	r2,zero,f250 <memcmp+0x50>
    f214:	20800003 	ldbu	r2,0(r4)
    f218:	28c00003 	ldbu	r3,0(r5)
    f21c:	10c0151e 	bne	r2,r3,f274 <memcmp+0x74>
    f220:	31bfff84 	addi	r6,r6,-2
    f224:	01ffffc4 	movi	r7,-1
    f228:	00000406 	br	f23c <memcmp+0x3c>
    f22c:	20800003 	ldbu	r2,0(r4)
    f230:	28c00003 	ldbu	r3,0(r5)
    f234:	31bfffc4 	addi	r6,r6,-1
    f238:	10c00e1e 	bne	r2,r3,f274 <memcmp+0x74>
    f23c:	21000044 	addi	r4,r4,1
    f240:	29400044 	addi	r5,r5,1
    f244:	31fff91e 	bne	r6,r7,f22c <__alt_data_end+0xfffef22c>
    f248:	0005883a 	mov	r2,zero
    f24c:	f800283a 	ret
    f250:	20c00017 	ldw	r3,0(r4)
    f254:	28800017 	ldw	r2,0(r5)
    f258:	18bfee1e 	bne	r3,r2,f214 <__alt_data_end+0xfffef214>
    f25c:	31bfff04 	addi	r6,r6,-4
    f260:	21000104 	addi	r4,r4,4
    f264:	29400104 	addi	r5,r5,4
    f268:	39bff936 	bltu	r7,r6,f250 <__alt_data_end+0xfffef250>
    f26c:	303fe91e 	bne	r6,zero,f214 <__alt_data_end+0xfffef214>
    f270:	003ff506 	br	f248 <__alt_data_end+0xfffef248>
    f274:	10c5c83a 	sub	r2,r2,r3
    f278:	f800283a 	ret

0000f27c <__register_exitproc>:
    f27c:	defffa04 	addi	sp,sp,-24
    f280:	dc000315 	stw	r16,12(sp)
    f284:	04000074 	movhi	r16,1
    f288:	84051e04 	addi	r16,r16,5240
    f28c:	80c00017 	ldw	r3,0(r16)
    f290:	dc400415 	stw	r17,16(sp)
    f294:	dfc00515 	stw	ra,20(sp)
    f298:	18805217 	ldw	r2,328(r3)
    f29c:	2023883a 	mov	r17,r4
    f2a0:	10003726 	beq	r2,zero,f380 <__register_exitproc+0x104>
    f2a4:	10c00117 	ldw	r3,4(r2)
    f2a8:	010007c4 	movi	r4,31
    f2ac:	20c00e16 	blt	r4,r3,f2e8 <__register_exitproc+0x6c>
    f2b0:	1a000044 	addi	r8,r3,1
    f2b4:	8800221e 	bne	r17,zero,f340 <__register_exitproc+0xc4>
    f2b8:	18c00084 	addi	r3,r3,2
    f2bc:	18c7883a 	add	r3,r3,r3
    f2c0:	18c7883a 	add	r3,r3,r3
    f2c4:	12000115 	stw	r8,4(r2)
    f2c8:	10c7883a 	add	r3,r2,r3
    f2cc:	19400015 	stw	r5,0(r3)
    f2d0:	0005883a 	mov	r2,zero
    f2d4:	dfc00517 	ldw	ra,20(sp)
    f2d8:	dc400417 	ldw	r17,16(sp)
    f2dc:	dc000317 	ldw	r16,12(sp)
    f2e0:	dec00604 	addi	sp,sp,24
    f2e4:	f800283a 	ret
    f2e8:	00800034 	movhi	r2,0
    f2ec:	10800004 	addi	r2,r2,0
    f2f0:	10002626 	beq	r2,zero,f38c <__register_exitproc+0x110>
    f2f4:	01006404 	movi	r4,400
    f2f8:	d9400015 	stw	r5,0(sp)
    f2fc:	d9800115 	stw	r6,4(sp)
    f300:	d9c00215 	stw	r7,8(sp)
    f304:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f308:	d9400017 	ldw	r5,0(sp)
    f30c:	d9800117 	ldw	r6,4(sp)
    f310:	d9c00217 	ldw	r7,8(sp)
    f314:	10001d26 	beq	r2,zero,f38c <__register_exitproc+0x110>
    f318:	81000017 	ldw	r4,0(r16)
    f31c:	10000115 	stw	zero,4(r2)
    f320:	02000044 	movi	r8,1
    f324:	22405217 	ldw	r9,328(r4)
    f328:	0007883a 	mov	r3,zero
    f32c:	12400015 	stw	r9,0(r2)
    f330:	20805215 	stw	r2,328(r4)
    f334:	10006215 	stw	zero,392(r2)
    f338:	10006315 	stw	zero,396(r2)
    f33c:	883fde26 	beq	r17,zero,f2b8 <__alt_data_end+0xfffef2b8>
    f340:	18c9883a 	add	r4,r3,r3
    f344:	2109883a 	add	r4,r4,r4
    f348:	1109883a 	add	r4,r2,r4
    f34c:	21802215 	stw	r6,136(r4)
    f350:	01800044 	movi	r6,1
    f354:	12406217 	ldw	r9,392(r2)
    f358:	30cc983a 	sll	r6,r6,r3
    f35c:	4992b03a 	or	r9,r9,r6
    f360:	12406215 	stw	r9,392(r2)
    f364:	21c04215 	stw	r7,264(r4)
    f368:	01000084 	movi	r4,2
    f36c:	893fd21e 	bne	r17,r4,f2b8 <__alt_data_end+0xfffef2b8>
    f370:	11006317 	ldw	r4,396(r2)
    f374:	218cb03a 	or	r6,r4,r6
    f378:	11806315 	stw	r6,396(r2)
    f37c:	003fce06 	br	f2b8 <__alt_data_end+0xfffef2b8>
    f380:	18805304 	addi	r2,r3,332
    f384:	18805215 	stw	r2,328(r3)
    f388:	003fc606 	br	f2a4 <__alt_data_end+0xfffef2a4>
    f38c:	00bfffc4 	movi	r2,-1
    f390:	003fd006 	br	f2d4 <__alt_data_end+0xfffef2d4>

0000f394 <__call_exitprocs>:
    f394:	defff504 	addi	sp,sp,-44
    f398:	df000915 	stw	fp,36(sp)
    f39c:	dd400615 	stw	r21,24(sp)
    f3a0:	dc800315 	stw	r18,12(sp)
    f3a4:	dfc00a15 	stw	ra,40(sp)
    f3a8:	ddc00815 	stw	r23,32(sp)
    f3ac:	dd800715 	stw	r22,28(sp)
    f3b0:	dd000515 	stw	r20,20(sp)
    f3b4:	dcc00415 	stw	r19,16(sp)
    f3b8:	dc400215 	stw	r17,8(sp)
    f3bc:	dc000115 	stw	r16,4(sp)
    f3c0:	d9000015 	stw	r4,0(sp)
    f3c4:	2839883a 	mov	fp,r5
    f3c8:	04800044 	movi	r18,1
    f3cc:	057fffc4 	movi	r21,-1
    f3d0:	00800074 	movhi	r2,1
    f3d4:	10851e04 	addi	r2,r2,5240
    f3d8:	12000017 	ldw	r8,0(r2)
    f3dc:	45005217 	ldw	r20,328(r8)
    f3e0:	44c05204 	addi	r19,r8,328
    f3e4:	a0001c26 	beq	r20,zero,f458 <__call_exitprocs+0xc4>
    f3e8:	a0800117 	ldw	r2,4(r20)
    f3ec:	15ffffc4 	addi	r23,r2,-1
    f3f0:	b8000d16 	blt	r23,zero,f428 <__call_exitprocs+0x94>
    f3f4:	14000044 	addi	r16,r2,1
    f3f8:	8421883a 	add	r16,r16,r16
    f3fc:	8421883a 	add	r16,r16,r16
    f400:	84402004 	addi	r17,r16,128
    f404:	a463883a 	add	r17,r20,r17
    f408:	a421883a 	add	r16,r20,r16
    f40c:	e0001e26 	beq	fp,zero,f488 <__call_exitprocs+0xf4>
    f410:	80804017 	ldw	r2,256(r16)
    f414:	e0801c26 	beq	fp,r2,f488 <__call_exitprocs+0xf4>
    f418:	bdffffc4 	addi	r23,r23,-1
    f41c:	843fff04 	addi	r16,r16,-4
    f420:	8c7fff04 	addi	r17,r17,-4
    f424:	bd7ff91e 	bne	r23,r21,f40c <__alt_data_end+0xfffef40c>
    f428:	00800034 	movhi	r2,0
    f42c:	10800004 	addi	r2,r2,0
    f430:	10000926 	beq	r2,zero,f458 <__call_exitprocs+0xc4>
    f434:	a0800117 	ldw	r2,4(r20)
    f438:	1000301e 	bne	r2,zero,f4fc <__call_exitprocs+0x168>
    f43c:	a0800017 	ldw	r2,0(r20)
    f440:	10003226 	beq	r2,zero,f50c <__call_exitprocs+0x178>
    f444:	a009883a 	mov	r4,r20
    f448:	98800015 	stw	r2,0(r19)
    f44c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f450:	9d000017 	ldw	r20,0(r19)
    f454:	a03fe41e 	bne	r20,zero,f3e8 <__alt_data_end+0xfffef3e8>
    f458:	dfc00a17 	ldw	ra,40(sp)
    f45c:	df000917 	ldw	fp,36(sp)
    f460:	ddc00817 	ldw	r23,32(sp)
    f464:	dd800717 	ldw	r22,28(sp)
    f468:	dd400617 	ldw	r21,24(sp)
    f46c:	dd000517 	ldw	r20,20(sp)
    f470:	dcc00417 	ldw	r19,16(sp)
    f474:	dc800317 	ldw	r18,12(sp)
    f478:	dc400217 	ldw	r17,8(sp)
    f47c:	dc000117 	ldw	r16,4(sp)
    f480:	dec00b04 	addi	sp,sp,44
    f484:	f800283a 	ret
    f488:	a0800117 	ldw	r2,4(r20)
    f48c:	80c00017 	ldw	r3,0(r16)
    f490:	10bfffc4 	addi	r2,r2,-1
    f494:	15c01426 	beq	r2,r23,f4e8 <__call_exitprocs+0x154>
    f498:	80000015 	stw	zero,0(r16)
    f49c:	183fde26 	beq	r3,zero,f418 <__alt_data_end+0xfffef418>
    f4a0:	95c8983a 	sll	r4,r18,r23
    f4a4:	a0806217 	ldw	r2,392(r20)
    f4a8:	a5800117 	ldw	r22,4(r20)
    f4ac:	2084703a 	and	r2,r4,r2
    f4b0:	10000b26 	beq	r2,zero,f4e0 <__call_exitprocs+0x14c>
    f4b4:	a0806317 	ldw	r2,396(r20)
    f4b8:	2088703a 	and	r4,r4,r2
    f4bc:	20000c1e 	bne	r4,zero,f4f0 <__call_exitprocs+0x15c>
    f4c0:	89400017 	ldw	r5,0(r17)
    f4c4:	d9000017 	ldw	r4,0(sp)
    f4c8:	183ee83a 	callr	r3
    f4cc:	a0800117 	ldw	r2,4(r20)
    f4d0:	15bfbf1e 	bne	r2,r22,f3d0 <__alt_data_end+0xfffef3d0>
    f4d4:	98800017 	ldw	r2,0(r19)
    f4d8:	153fcf26 	beq	r2,r20,f418 <__alt_data_end+0xfffef418>
    f4dc:	003fbc06 	br	f3d0 <__alt_data_end+0xfffef3d0>
    f4e0:	183ee83a 	callr	r3
    f4e4:	003ff906 	br	f4cc <__alt_data_end+0xfffef4cc>
    f4e8:	a5c00115 	stw	r23,4(r20)
    f4ec:	003feb06 	br	f49c <__alt_data_end+0xfffef49c>
    f4f0:	89000017 	ldw	r4,0(r17)
    f4f4:	183ee83a 	callr	r3
    f4f8:	003ff406 	br	f4cc <__alt_data_end+0xfffef4cc>
    f4fc:	a0800017 	ldw	r2,0(r20)
    f500:	a027883a 	mov	r19,r20
    f504:	1029883a 	mov	r20,r2
    f508:	003fb606 	br	f3e4 <__alt_data_end+0xfffef3e4>
    f50c:	0005883a 	mov	r2,zero
    f510:	003ffb06 	br	f500 <__alt_data_end+0xfffef500>

0000f514 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f514:	defffd04 	addi	sp,sp,-12
    f518:	df000215 	stw	fp,8(sp)
    f51c:	df000204 	addi	fp,sp,8
    f520:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f524:	0001883a 	nop
    f528:	e0bfff17 	ldw	r2,-4(fp)
    f52c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f530:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f534:	10000226 	beq	r2,zero,f540 <_exit+0x2c>
    ALT_SIM_FAIL();
    f538:	002af070 	cmpltui	zero,zero,43969
    f53c:	00000106 	br	f544 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f540:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f544:	003fff06 	br	f544 <__alt_data_end+0xfffef544>
