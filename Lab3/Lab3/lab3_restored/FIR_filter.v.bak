module FIR_filter(input clk, reset1, input [15:0]sample, output reg [15:0]result);

parameter N = 70;
reg [15:0] shiftReg[N:0];
wire [15:0] multiRes[N:0];
reg [15:0]add[69:0];
integer j;

reg signed [15:0] coeff [N:0];
always@(*)begin
	coeff[  0]=         0;
	coeff[  1]=         0;
	coeff[  2]=        -0;
	coeff[  3]=        -0;
	coeff[  4]=         1;
	coeff[  5]=         0;
	coeff[  6]=        -2;
	coeff[  7]=        -0;
	coeff[  8]=         4;
	coeff[  9]=         0;
	coeff[ 10]=        -9;
	coeff[ 11]=        -0;
	coeff[ 12]=        17;
	coeff[ 13]=         0;
	coeff[ 14]=       -31;
	coeff[ 15]=        -0;
	coeff[ 16]=        52;
	coeff[ 17]=         0;
	coeff[ 18]=       -83;
	coeff[ 19]=        -0;
	coeff[ 20]=       127;
	coeff[ 21]=         0;
	coeff[ 22]=      -187;
	coeff[ 23]=        -0;
	coeff[ 24]=       265;
	coeff[ 25]=         0;
	coeff[ 26]=      -364;
	coeff[ 27]=        -0;
	coeff[ 28]=       485;
	coeff[ 29]=         0;
	coeff[ 30]=      -626;
	coeff[ 31]=        -0;
	coeff[ 32]=       787;
	coeff[ 33]=         0;
	coeff[ 34]=      -962;
	coeff[ 35]=        -0;
	coeff[ 36]=      1147;
	coeff[ 37]=         0;
	coeff[ 38]=     -1333;
	coeff[ 39]=        -0;
	coeff[ 40]=      1512;
	coeff[ 41]=         0;
	coeff[ 42]=     -1675;
	coeff[ 43]=        -0;
	coeff[ 44]=      1813;
	coeff[ 45]=         0;
	coeff[ 46]=     -1918;
	coeff[ 47]=        -0;
	coeff[ 48]=      1984;
	coeff[ 49]=         0;
	coeff[ 50]=     30762;
	coeff[ 51]=         0;
	coeff[ 52]=      1984;
	coeff[ 53]=        -0;
	coeff[ 54]=     -1918;
	coeff[ 55]=         0;
	coeff[ 56]=      1813;
	coeff[ 57]=        -0;
	coeff[ 58]=     -1675;
	coeff[ 59]=         0;
	coeff[ 60]=      1512;
	coeff[ 61]=        -0;
	coeff[ 62]=     -1333;
	coeff[ 63]=         0;
	coeff[ 64]=      1147;
	coeff[ 65]=        -0;
	coeff[ 66]=      -962;
	coeff[ 67]=         0;
	coeff[ 68]=       787;
	coeff[ 69]=        -0;
	coeff[ 70]=      -626;
	coeff[ 71]=         0;
	coeff[ 72]=       485;
	coeff[ 73]=        -0;
	coeff[ 74]=      -364;
	coeff[ 75]=         0;
	coeff[ 76]=       265;
	coeff[ 77]=        -0;
	coeff[ 78]=      -187;
	coeff[ 79]=         0;
	coeff[ 80]=       127;
	coeff[ 81]=        -0;
	coeff[ 82]=       -83;
	coeff[ 83]=         0;
	coeff[ 84]=        52;
	coeff[ 85]=        -0;
	coeff[ 86]=       -31;
	coeff[ 87]=         0;
	coeff[ 88]=        17;
	coeff[ 89]=        -0;
	coeff[ 90]=        -9;
	coeff[ 91]=         0;
	coeff[ 92]=         4;
	coeff[ 93]=        -0;
	coeff[ 94]=        -2;
	coeff[ 95]=         0;
	coeff[ 96]=         1;
	coeff[ 97]=        -0;
	coeff[ 98]=        -0;
	coeff[ 99]=         0;
	coeff[100]=         0;
end

generate
genvar i;

for (i=0;i<71;i=i+1)begin: multi
	multiplier multi (.dataa(shiftReg[i]),.datab(coeff[i]),.result(multiRes[i]));

end
endgenerate


always @(posedge clk or posedge reset1) begin 
	if(reset1) begin //reset, set all shiftReg to 0
		result = 0; 
		for (j=0; j<N; j=j+1) begin 
			shiftReg[j] = 0; 
		end 
	end else begin  //shift
		for (j=N-1; j>0; j=j-1) begin 
			shiftReg[j] = shiftReg[j-1]; 
		end 
		shiftReg[0] = sample; 
		result = add[69];
	end 
	
	add[0] = multiRes[0]+multiRes[1];

	for (j=1;j<70;j=j+1)begin
		add[j] = add[j-1]+multiRes[j+1];
	
	end

 end 
 
endmodule